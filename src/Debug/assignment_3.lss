
assignment_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000006b8  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800204  00800204  00000750  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c7  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f18  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000817  00000000  00000000  0000297f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000688  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000481  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003e89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	a8 c1       	rjmp	.+848    	; 0x3c6 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	ca c0       	rjmp	.+404    	; 0x23e <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 eb       	ldi	r30, 0xB8	; 184
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	93 d1       	rcall	.+806    	; 0x446 <main>
 120:	c9 c2       	rjmp	.+1426   	; 0x6b4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <set_refresh_rate>:
static uint8_t digits[SEGMENTS] = {0xFF, 0xFF, 0xFF, 0xFF};

static void set_refresh_rate() 
{
	// Set timer toggle on compare match
	TCCR4A |= _BV(COM4A0);
 124:	e0 ea       	ldi	r30, 0xA0	; 160
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	
	// Set prescaler 8
	TCCR4B |= _BV(CS41);
 12e:	e1 ea       	ldi	r30, 0xA1	; 161
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
	
	// Set to Clear timer on compare match (CTC mode)
	TCCR4B |= _BV(WGM42);
 138:	80 81       	ld	r24, Z
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	80 83       	st	Z, r24
	
	// Enable Timer interrupt
	TIMSK4 |= _BV(OCIE4A);
 13e:	e2 e7       	ldi	r30, 0x72	; 114
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
	
	// Set timer frequency 60Hz/digit (16000000 / (2*240*8))-1 = 4165.6
	OCR4A = 4166;
 148:	86 e4       	ldi	r24, 0x46	; 70
 14a:	90 e1       	ldi	r25, 0x10	; 16
 14c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 150:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 154:	08 95       	ret

00000156 <get_display_code>:
}

// Returns the number that should be converted to display code.
// If a zero is found, it will determine if it should return 0 or 10 where 10 will turn off the segment.
static uint8_t get_display_code(uint8_t segment)
{
 156:	cf 93       	push	r28
	// Will return current value if non-zero except last digit (segment 3) are allowed to show 0.
	if (segment == SEGMENTS - 1 || digits[segment] != 0)
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	39 f0       	breq	.+14     	; 0x16a <get_display_code+0x14>
 15c:	e8 2f       	mov	r30, r24
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	90 81       	ld	r25, Z
 166:	99 23       	and	r25, r25
 168:	31 f0       	breq	.+12     	; 0x176 <get_display_code+0x20>
	{
		return digits[segment];
 16a:	e8 2f       	mov	r30, r24
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e0 50       	subi	r30, 0x00	; 0
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	80 81       	ld	r24, Z
 174:	0f c0       	rjmp	.+30     	; 0x194 <get_display_code+0x3e>
	}

	// Current digit is 0

	// No more segments to check
	if (segment == 0)
 176:	88 23       	and	r24, r24
 178:	61 f0       	breq	.+24     	; 0x192 <get_display_code+0x3c>
	{
		return display_code[10];
	}

	// Decrement segment to check the digit before.
	segment--;
 17a:	cf ef       	ldi	r28, 0xFF	; 255
 17c:	c8 0f       	add	r28, r24

	// Checks digit before, get_display_code returns 0xFF if only zeros are found.
	if (get_display_code(segment) == display_code[10])
 17e:	8c 2f       	mov	r24, r28
 180:	ea df       	rcall	.-44     	; 0x156 <get_display_code>
 182:	8f 3f       	cpi	r24, 0xFF	; 255
 184:	39 f0       	breq	.+14     	; 0x194 <get_display_code+0x3e>
	}
	else
	{
		// A non-zero value is found in previous digits
		// Sets current segment to 0.
		return digits[segment];
 186:	ec 2f       	mov	r30, r28
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e0 50       	subi	r30, 0x00	; 0
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	80 81       	ld	r24, Z
 190:	01 c0       	rjmp	.+2      	; 0x194 <get_display_code+0x3e>
	// Current digit is 0

	// No more segments to check
	if (segment == 0)
	{
		return display_code[10];
 192:	8f ef       	ldi	r24, 0xFF	; 255
	{
		// A non-zero value is found in previous digits
		// Sets current segment to 0.
		return digits[segment];
	}
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <convert_to_display_code>:

// Overwrites original separated values with display code equivalent. 
static void convert_to_display_code() {
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
	for (uint8_t i = 0; i < SEGMENTS - 1; i++) {
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <convert_to_display_code+0x1a>
		digits[i] = get_display_code(digits[i]);
 1a2:	c1 2f       	mov	r28, r17
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	c0 50       	subi	r28, 0x00	; 0
 1a8:	de 4f       	sbci	r29, 0xFE	; 254
 1aa:	88 81       	ld	r24, Y
 1ac:	d4 df       	rcall	.-88     	; 0x156 <get_display_code>
 1ae:	88 83       	st	Y, r24
	}
}

// Overwrites original separated values with display code equivalent. 
static void convert_to_display_code() {
	for (uint8_t i = 0; i < SEGMENTS - 1; i++) {
 1b0:	1f 5f       	subi	r17, 0xFF	; 255
 1b2:	13 30       	cpi	r17, 0x03	; 3
 1b4:	b0 f3       	brcs	.-20     	; 0x1a2 <convert_to_display_code+0xa>
		digits[i] = get_display_code(digits[i]);
	}
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	08 95       	ret

000001be <split_digits>:

// Splits number into separate digits.
static void split_digits(uint8_t value, uint8_t digit) {
	// Base case - Done.
	if (digit == 0) {
 1be:	61 11       	cpse	r22, r1
 1c0:	13 c0       	rjmp	.+38     	; 0x1e8 <split_digits+0x2a>
		digits[digit] = value % 10;
 1c2:	e6 2f       	mov	r30, r22
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	9d ec       	ldi	r25, 0xCD	; 205
 1cc:	89 9f       	mul	r24, r25
 1ce:	91 2d       	mov	r25, r1
 1d0:	11 24       	eor	r1, r1
 1d2:	96 95       	lsr	r25
 1d4:	96 95       	lsr	r25
 1d6:	96 95       	lsr	r25
 1d8:	99 0f       	add	r25, r25
 1da:	29 2f       	mov	r18, r25
 1dc:	22 0f       	add	r18, r18
 1de:	22 0f       	add	r18, r18
 1e0:	92 0f       	add	r25, r18
 1e2:	89 1b       	sub	r24, r25
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret
 1e8:	e6 2f       	mov	r30, r22
 1ea:	98 2f       	mov	r25, r24
	}
	else {
		digits[digit] = value % 10;
 1ec:	a6 2f       	mov	r26, r22
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	a0 50       	subi	r26, 0x00	; 0
 1f2:	be 4f       	sbci	r27, 0xFE	; 254
 1f4:	8d ec       	ldi	r24, 0xCD	; 205
 1f6:	98 9f       	mul	r25, r24
 1f8:	81 2d       	mov	r24, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	86 95       	lsr	r24
 1fe:	86 95       	lsr	r24
 200:	86 95       	lsr	r24
 202:	38 2f       	mov	r19, r24
 204:	33 0f       	add	r19, r19
 206:	23 2f       	mov	r18, r19
 208:	22 0f       	add	r18, r18
 20a:	22 0f       	add	r18, r18
 20c:	23 0f       	add	r18, r19
 20e:	92 1b       	sub	r25, r18
 210:	9c 93       	st	X, r25
		value = value / 10;
		
		// Recurse until done.
		digit--;
 212:	6f ef       	ldi	r22, 0xFF	; 255
 214:	6e 0f       	add	r22, r30
		split_digits(value, digit);
 216:	d3 cf       	rjmp	.-90     	; 0x1be <split_digits>
 218:	08 95       	ret

0000021a <init_display>:
}

void init_display() 
{
	// Set PF0-PF3 to output (digits)
	DDRF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
 21a:	80 b3       	in	r24, 0x10	; 16
 21c:	8f 60       	ori	r24, 0x0F	; 15
 21e:	80 bb       	out	0x10, r24	; 16
	
	// Set SI to output
	DDRB |= _BV(SI);
 220:	84 b1       	in	r24, 0x04	; 4
 222:	84 60       	ori	r24, 0x04	; 4
 224:	84 b9       	out	0x04, r24	; 4
	
	// Set SCK to output
	DDRB |= _BV(SCK);
 226:	84 b1       	in	r24, 0x04	; 4
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	84 b9       	out	0x04, r24	; 4
	
	// Set RCK to output
	DDRB |= _BV(RCK);
 22c:	84 b1       	in	r24, 0x04	; 4
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	84 b9       	out	0x04, r24	; 4
	
	// Initializes timer and interrupt
	set_refresh_rate();
 232:	78 cf       	rjmp	.-272    	; 0x124 <set_refresh_rate>
 234:	08 95       	ret

00000236 <printint_4u>:
}

// Input from application
void printint_4u(uint16_t value) 
{
	split_digits(value, SEGMENTS - 1);
 236:	63 e0       	ldi	r22, 0x03	; 3
 238:	c2 df       	rcall	.-124    	; 0x1be <split_digits>
	convert_to_display_code();
 23a:	ae cf       	rjmp	.-164    	; 0x198 <convert_to_display_code>
 23c:	08 95       	ret

0000023e <__vector_42>:
 23e:	1f 92       	push	r1
}


ISR(TIMER4_COMPA_vect)
{	
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	0b b6       	in	r0, 0x3b	; 59
 24a:	0f 92       	push	r0
 24c:	2f 93       	push	r18
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	// Shift display code into register.
	for(uint8_t i = 0; i < 8; i++)
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	1d c0       	rjmp	.+58     	; 0x294 <__vector_42+0x56>
	{
		// bitwise right shift to onto serial input.
		if (digits[currentSegment] >> i & 1) 
 25a:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_end>
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	e0 50       	subi	r30, 0x00	; 0
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	80 81       	ld	r24, Z
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <__vector_42+0x32>
 26c:	95 95       	asr	r25
 26e:	87 95       	ror	r24
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <__vector_42+0x2e>
 274:	80 ff       	sbrs	r24, 0
 276:	04 c0       	rjmp	.+8      	; 0x280 <__vector_42+0x42>
		{
			PORTB |=_BV(SI);
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	84 60       	ori	r24, 0x04	; 4
 27c:	85 b9       	out	0x05, r24	; 5
 27e:	03 c0       	rjmp	.+6      	; 0x286 <__vector_42+0x48>
		} 
		else 
		{
			PORTB &= ~_BV(SI);
 280:	85 b1       	in	r24, 0x05	; 5
 282:	8b 7f       	andi	r24, 0xFB	; 251
 284:	85 b9       	out	0x05, r24	; 5
		}
		
		// Shift into register.
		PORTB |= _BV(SCK);
 286:	85 b1       	in	r24, 0x05	; 5
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~_BV(SCK);
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	8d 7f       	andi	r24, 0xFD	; 253
 290:	85 b9       	out	0x05, r24	; 5


ISR(TIMER4_COMPA_vect)
{	
	// Shift display code into register.
	for(uint8_t i = 0; i < 8; i++)
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	28 30       	cpi	r18, 0x08	; 8
 296:	08 f3       	brcs	.-62     	; 0x25a <__vector_42+0x1c>
		PORTB |= _BV(SCK);
		PORTB &= ~_BV(SCK);
	}
		
	// Turn off all segments
	PORTF |= _BV(D1) | _BV(D2) | _BV(D3)| _BV(D4);
 298:	81 b3       	in	r24, 0x11	; 17
 29a:	8f 60       	ori	r24, 0x0F	; 15
 29c:	81 bb       	out	0x11, r24	; 17
	
	// Move into storage register.
	PORTB |= _BV(RCK);
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~_BV(RCK);
 2a4:	85 b1       	in	r24, 0x05	; 5
 2a6:	8e 7f       	andi	r24, 0xFE	; 254
 2a8:	85 b9       	out	0x05, r24	; 5
		
	// Turn on current segment.
	PORTF &= ~(_BV(currentSegment));
 2aa:	21 b3       	in	r18, 0x11	; 17
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	00 90 04 02 	lds	r0, 0x0204	; 0x800204 <__data_end>
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <__vector_42+0x7c>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <__vector_42+0x78>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	81 bb       	out	0x11, r24	; 17
	
	// Increment to next segment.
	currentSegment++;
 2c4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
 2ca:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
		
	// Loops around to first segment again.
	if(currentSegment == SEGMENTS)
 2ce:	84 30       	cpi	r24, 0x04	; 4
 2d0:	11 f4       	brne	.+4      	; 0x2d6 <__vector_42+0x98>
	{
		currentSegment = 0;
 2d2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
	}
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0b be       	out	0x3b, r0	; 59
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <init_leds>:
#include "../include/led.h"

void init_leds()
{
	// set pin direction to output
	DDRA = 0xFF;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	81 b9       	out	0x01, r24	; 1
	// turn all leds off - Active low
	PORTA = 0xFF;
 2f2:	82 b9       	out	0x02, r24	; 2
 2f4:	08 95       	ret

000002f6 <mv_to_c>:
static void (*cb)(uint8_t deg_c) = 0;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
 2f6:	9c 01       	movw	r18, r24
 2f8:	24 5f       	subi	r18, 0xF4	; 244
 2fa:	31 40       	sbci	r19, 0x01	; 1
 2fc:	ad ec       	ldi	r26, 0xCD	; 205
 2fe:	bc ec       	ldi	r27, 0xCC	; 204
 300:	ca d1       	rcall	.+916    	; 0x696 <__umulhisi3>
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
}
 30e:	08 95       	ret

00000310 <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
 310:	bc 01       	movw	r22, r24
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	ce d0       	rcall	.+412    	; 0x4b4 <__floatunsisf>
 318:	2a e1       	ldi	r18, 0x1A	; 26
 31a:	37 e6       	ldi	r19, 0x67	; 103
 31c:	4c e9       	ldi	r20, 0x9C	; 156
 31e:	50 e4       	ldi	r21, 0x40	; 64
 320:	2f d1       	rcall	.+606    	; 0x580 <__mulsf3>
 322:	9c d0       	rcall	.+312    	; 0x45c <__fixunssfsi>
}
 324:	cb 01       	movw	r24, r22
 326:	08 95       	ret

00000328 <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
 328:	9c 01       	movw	r18, r24
	// **** General config *****
	
	// Set PK7 direction as input (TMP36 Vout)
	DDRK &= ~_BV(v_out);
 32a:	e7 e0       	ldi	r30, 0x07	; 7
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	80 81       	ld	r24, Z
 330:	8f 77       	andi	r24, 0x7F	; 127
 332:	80 83       	st	Z, r24
	
	// Set PG0 direction as output (TMP36 Enable)
	DDRG |= _BV(enable);  
 334:	83 b3       	in	r24, 0x13	; 19
 336:	81 60       	ori	r24, 0x01	; 1
 338:	83 bb       	out	0x13, r24	; 19

	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
 33a:	ec e7       	ldi	r30, 0x7C	; 124
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	80 64       	ori	r24, 0x40	; 64
 342:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
 344:	80 81       	ld	r24, Z
 346:	87 60       	ori	r24, 0x07	; 7
 348:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 34a:	ab e7       	ldi	r26, 0x7B	; 123
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	8c 91       	ld	r24, X
 350:	88 60       	ori	r24, 0x08	; 8
 352:	8c 93       	st	X, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
 354:	ea e7       	ldi	r30, 0x7A	; 122
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	86 60       	ori	r24, 0x06	; 6
 35c:	80 83       	st	Z, r24

	// Enable ADC  
	ADCSRA |= _BV(ADEN);
 35e:	80 81       	ld	r24, Z
 360:	80 68       	ori	r24, 0x80	; 128
 362:	80 83       	st	Z, r24
	// ****** General config end *************
	
	// ****** Interrupt and auto trigger ****
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
 364:	80 81       	ld	r24, Z
 366:	88 60       	ori	r24, 0x08	; 8
 368:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
 36a:	80 81       	ld	r24, Z
 36c:	80 62       	ori	r24, 0x20	; 32
 36e:	80 83       	st	Z, r24
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 370:	8c 91       	ld	r24, X
 372:	85 60       	ori	r24, 0x05	; 5
 374:	8c 93       	st	X, r24
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1A |= _BV(WGM12);
 376:	e0 e8       	ldi	r30, 0x80	; 128
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	90 81       	ld	r25, Z
 37c:	98 60       	ori	r25, 0x08	; 8
 37e:	90 83       	st	Z, r25
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
 380:	90 81       	ld	r25, Z
 382:	90 61       	ori	r25, 0x10	; 16
 384:	90 83       	st	Z, r25
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
 386:	e1 e8       	ldi	r30, 0x81	; 129
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	90 81       	ld	r25, Z
 38c:	94 60       	ori	r25, 0x04	; 4
 38e:	90 83       	st	Z, r25
	
	// Enable Timer Interrupt
	TIMSK1 |= _BV(OCIE1B);
 390:	ef e6       	ldi	r30, 0x6F	; 111
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	90 81       	ld	r25, Z
 396:	94 60       	ori	r25, 0x04	; 4
 398:	90 83       	st	Z, r25

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
 39a:	81 e1       	ldi	r24, 0x11	; 17
 39c:	9a e7       	ldi	r25, 0x7A	; 122
 39e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 3a2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
 3a6:	21 15       	cp	r18, r1
 3a8:	31 05       	cpc	r19, r1
 3aa:	21 f0       	breq	.+8      	; 0x3b4 <tmp36_init+0x8c>
		cb = callback;
 3ac:	30 93 06 02 	sts	0x0206, r19	; 0x800206 <cb+0x1>
 3b0:	20 93 05 02 	sts	0x0205, r18	; 0x800205 <cb>
	
	// Enable TMP36
	PORTG |= _BV(enable);
 3b4:	84 b3       	in	r24, 0x14	; 20
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	84 bb       	out	0x14, r24	; 20
	
	// Start Conversion.
	ADCSRA |= _BV(ADSC);
 3ba:	ea e7       	ldi	r30, 0x7A	; 122
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	80 64       	ori	r24, 0x40	; 64
 3c2:	80 83       	st	Z, r24
 3c4:	08 95       	ret

000003c6 <__vector_29>:
}

// AD Interrupt callback.
ISR(ADC_vect)
{
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	0b b6       	in	r0, 0x3b	; 59
 3d2:	0f 92       	push	r0
 3d4:	2f 93       	push	r18
 3d6:	3f 93       	push	r19
 3d8:	4f 93       	push	r20
 3da:	5f 93       	push	r21
 3dc:	6f 93       	push	r22
 3de:	7f 93       	push	r23
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	af 93       	push	r26
 3e6:	bf 93       	push	r27
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
 3f0:	c0 91 05 02 	lds	r28, 0x0205	; 0x800205 <cb>
 3f4:	d0 91 06 02 	lds	r29, 0x0206	; 0x800206 <cb+0x1>
 3f8:	20 97       	sbiw	r28, 0x00	; 0
 3fa:	41 f0       	breq	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		cb(mv_to_c(adc_to_mv(ADC)));
 3fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 400:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 404:	85 df       	rcall	.-246    	; 0x310 <adc_to_mv>
 406:	77 df       	rcall	.-274    	; 0x2f6 <mv_to_c>
 408:	fe 01       	movw	r30, r28
 40a:	19 95       	eicall
	
	// ADC interrupt flag is high!
	// Clear ADC interrupt flag.
	ADCSRA |= ~_BV(ADIF);
 40c:	ea e7       	ldi	r30, 0x7A	; 122
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	8f 6e       	ori	r24, 0xEF	; 239
 414:	80 83       	st	Z, r24
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0b be       	out	0x3b, r0	; 59
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <new_measurement>:
#define offset 17
static uint8_t temp = 0;

static void new_measurement(uint8_t deg_c)
{
	temp = deg_c;
 440:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <temp>
 444:	08 95       	ret

00000446 <main>:
}


int main(void)
{
	init_leds();
 446:	53 df       	rcall	.-346    	; 0x2ee <init_leds>
	tmp36_init(new_measurement);
 448:	80 e2       	ldi	r24, 0x20	; 32
 44a:	92 e0       	ldi	r25, 0x02	; 2
	init_display();
 44c:	6d df       	rcall	.-294    	; 0x328 <tmp36_init>
 44e:	e5 de       	rcall	.-566    	; 0x21a <init_display>
	
	// Enable interrupt globally.
	sei();
 450:	78 94       	sei
	
    while (1) 
    {
		printint_4u(temp);
 452:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <temp>
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	ee de       	rcall	.-548    	; 0x236 <printint_4u>
 45a:	fb cf       	rjmp	.-10     	; 0x452 <main+0xc>

0000045c <__fixunssfsi>:
 45c:	70 d0       	rcall	.+224    	; 0x53e <__fp_splitA>
 45e:	88 f0       	brcs	.+34     	; 0x482 <__fixunssfsi+0x26>
 460:	9f 57       	subi	r25, 0x7F	; 127
 462:	90 f0       	brcs	.+36     	; 0x488 <__fixunssfsi+0x2c>
 464:	b9 2f       	mov	r27, r25
 466:	99 27       	eor	r25, r25
 468:	b7 51       	subi	r27, 0x17	; 23
 46a:	a0 f0       	brcs	.+40     	; 0x494 <__fixunssfsi+0x38>
 46c:	d1 f0       	breq	.+52     	; 0x4a2 <__fixunssfsi+0x46>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	1a f0       	brmi	.+6      	; 0x47e <__fixunssfsi+0x22>
 478:	ba 95       	dec	r27
 47a:	c9 f7       	brne	.-14     	; 0x46e <__fixunssfsi+0x12>
 47c:	12 c0       	rjmp	.+36     	; 0x4a2 <__fixunssfsi+0x46>
 47e:	b1 30       	cpi	r27, 0x01	; 1
 480:	81 f0       	breq	.+32     	; 0x4a2 <__fixunssfsi+0x46>
 482:	77 d0       	rcall	.+238    	; 0x572 <__fp_zero>
 484:	b1 e0       	ldi	r27, 0x01	; 1
 486:	08 95       	ret
 488:	74 c0       	rjmp	.+232    	; 0x572 <__fp_zero>
 48a:	67 2f       	mov	r22, r23
 48c:	78 2f       	mov	r23, r24
 48e:	88 27       	eor	r24, r24
 490:	b8 5f       	subi	r27, 0xF8	; 248
 492:	39 f0       	breq	.+14     	; 0x4a2 <__fixunssfsi+0x46>
 494:	b9 3f       	cpi	r27, 0xF9	; 249
 496:	cc f3       	brlt	.-14     	; 0x48a <__fixunssfsi+0x2e>
 498:	86 95       	lsr	r24
 49a:	77 95       	ror	r23
 49c:	67 95       	ror	r22
 49e:	b3 95       	inc	r27
 4a0:	d9 f7       	brne	.-10     	; 0x498 <__fixunssfsi+0x3c>
 4a2:	3e f4       	brtc	.+14     	; 0x4b2 <__fixunssfsi+0x56>
 4a4:	90 95       	com	r25
 4a6:	80 95       	com	r24
 4a8:	70 95       	com	r23
 4aa:	61 95       	neg	r22
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	8f 4f       	sbci	r24, 0xFF	; 255
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	08 95       	ret

000004b4 <__floatunsisf>:
 4b4:	e8 94       	clt
 4b6:	09 c0       	rjmp	.+18     	; 0x4ca <__floatsisf+0x12>

000004b8 <__floatsisf>:
 4b8:	97 fb       	bst	r25, 7
 4ba:	3e f4       	brtc	.+14     	; 0x4ca <__floatsisf+0x12>
 4bc:	90 95       	com	r25
 4be:	80 95       	com	r24
 4c0:	70 95       	com	r23
 4c2:	61 95       	neg	r22
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	99 23       	and	r25, r25
 4cc:	a9 f0       	breq	.+42     	; 0x4f8 <__floatsisf+0x40>
 4ce:	f9 2f       	mov	r31, r25
 4d0:	96 e9       	ldi	r25, 0x96	; 150
 4d2:	bb 27       	eor	r27, r27
 4d4:	93 95       	inc	r25
 4d6:	f6 95       	lsr	r31
 4d8:	87 95       	ror	r24
 4da:	77 95       	ror	r23
 4dc:	67 95       	ror	r22
 4de:	b7 95       	ror	r27
 4e0:	f1 11       	cpse	r31, r1
 4e2:	f8 cf       	rjmp	.-16     	; 0x4d4 <__floatsisf+0x1c>
 4e4:	fa f4       	brpl	.+62     	; 0x524 <__floatsisf+0x6c>
 4e6:	bb 0f       	add	r27, r27
 4e8:	11 f4       	brne	.+4      	; 0x4ee <__floatsisf+0x36>
 4ea:	60 ff       	sbrs	r22, 0
 4ec:	1b c0       	rjmp	.+54     	; 0x524 <__floatsisf+0x6c>
 4ee:	6f 5f       	subi	r22, 0xFF	; 255
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	16 c0       	rjmp	.+44     	; 0x524 <__floatsisf+0x6c>
 4f8:	88 23       	and	r24, r24
 4fa:	11 f0       	breq	.+4      	; 0x500 <__floatsisf+0x48>
 4fc:	96 e9       	ldi	r25, 0x96	; 150
 4fe:	11 c0       	rjmp	.+34     	; 0x522 <__floatsisf+0x6a>
 500:	77 23       	and	r23, r23
 502:	21 f0       	breq	.+8      	; 0x50c <__floatsisf+0x54>
 504:	9e e8       	ldi	r25, 0x8E	; 142
 506:	87 2f       	mov	r24, r23
 508:	76 2f       	mov	r23, r22
 50a:	05 c0       	rjmp	.+10     	; 0x516 <__floatsisf+0x5e>
 50c:	66 23       	and	r22, r22
 50e:	71 f0       	breq	.+28     	; 0x52c <__floatsisf+0x74>
 510:	96 e8       	ldi	r25, 0x86	; 134
 512:	86 2f       	mov	r24, r22
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	2a f0       	brmi	.+10     	; 0x524 <__floatsisf+0x6c>
 51a:	9a 95       	dec	r25
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	88 1f       	adc	r24, r24
 522:	da f7       	brpl	.-10     	; 0x51a <__floatsisf+0x62>
 524:	88 0f       	add	r24, r24
 526:	96 95       	lsr	r25
 528:	87 95       	ror	r24
 52a:	97 f9       	bld	r25, 7
 52c:	08 95       	ret

0000052e <__fp_split3>:
 52e:	57 fd       	sbrc	r21, 7
 530:	90 58       	subi	r25, 0x80	; 128
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	59 f0       	breq	.+22     	; 0x54e <__fp_splitA+0x10>
 538:	5f 3f       	cpi	r21, 0xFF	; 255
 53a:	71 f0       	breq	.+28     	; 0x558 <__fp_splitA+0x1a>
 53c:	47 95       	ror	r20

0000053e <__fp_splitA>:
 53e:	88 0f       	add	r24, r24
 540:	97 fb       	bst	r25, 7
 542:	99 1f       	adc	r25, r25
 544:	61 f0       	breq	.+24     	; 0x55e <__fp_splitA+0x20>
 546:	9f 3f       	cpi	r25, 0xFF	; 255
 548:	79 f0       	breq	.+30     	; 0x568 <__fp_splitA+0x2a>
 54a:	87 95       	ror	r24
 54c:	08 95       	ret
 54e:	12 16       	cp	r1, r18
 550:	13 06       	cpc	r1, r19
 552:	14 06       	cpc	r1, r20
 554:	55 1f       	adc	r21, r21
 556:	f2 cf       	rjmp	.-28     	; 0x53c <__fp_split3+0xe>
 558:	46 95       	lsr	r20
 55a:	f1 df       	rcall	.-30     	; 0x53e <__fp_splitA>
 55c:	08 c0       	rjmp	.+16     	; 0x56e <__fp_splitA+0x30>
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	18 06       	cpc	r1, r24
 564:	99 1f       	adc	r25, r25
 566:	f1 cf       	rjmp	.-30     	; 0x54a <__fp_splitA+0xc>
 568:	86 95       	lsr	r24
 56a:	71 05       	cpc	r23, r1
 56c:	61 05       	cpc	r22, r1
 56e:	08 94       	sec
 570:	08 95       	ret

00000572 <__fp_zero>:
 572:	e8 94       	clt

00000574 <__fp_szero>:
 574:	bb 27       	eor	r27, r27
 576:	66 27       	eor	r22, r22
 578:	77 27       	eor	r23, r23
 57a:	cb 01       	movw	r24, r22
 57c:	97 f9       	bld	r25, 7
 57e:	08 95       	ret

00000580 <__mulsf3>:
 580:	0b d0       	rcall	.+22     	; 0x598 <__mulsf3x>
 582:	78 c0       	rjmp	.+240    	; 0x674 <__fp_round>
 584:	69 d0       	rcall	.+210    	; 0x658 <__fp_pscA>
 586:	28 f0       	brcs	.+10     	; 0x592 <__mulsf3+0x12>
 588:	6e d0       	rcall	.+220    	; 0x666 <__fp_pscB>
 58a:	18 f0       	brcs	.+6      	; 0x592 <__mulsf3+0x12>
 58c:	95 23       	and	r25, r21
 58e:	09 f0       	breq	.+2      	; 0x592 <__mulsf3+0x12>
 590:	5a c0       	rjmp	.+180    	; 0x646 <__fp_inf>
 592:	5f c0       	rjmp	.+190    	; 0x652 <__fp_nan>
 594:	11 24       	eor	r1, r1
 596:	ee cf       	rjmp	.-36     	; 0x574 <__fp_szero>

00000598 <__mulsf3x>:
 598:	ca df       	rcall	.-108    	; 0x52e <__fp_split3>
 59a:	a0 f3       	brcs	.-24     	; 0x584 <__mulsf3+0x4>

0000059c <__mulsf3_pse>:
 59c:	95 9f       	mul	r25, r21
 59e:	d1 f3       	breq	.-12     	; 0x594 <__mulsf3+0x14>
 5a0:	95 0f       	add	r25, r21
 5a2:	50 e0       	ldi	r21, 0x00	; 0
 5a4:	55 1f       	adc	r21, r21
 5a6:	62 9f       	mul	r22, r18
 5a8:	f0 01       	movw	r30, r0
 5aa:	72 9f       	mul	r23, r18
 5ac:	bb 27       	eor	r27, r27
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	63 9f       	mul	r22, r19
 5b4:	aa 27       	eor	r26, r26
 5b6:	f0 0d       	add	r31, r0
 5b8:	b1 1d       	adc	r27, r1
 5ba:	aa 1f       	adc	r26, r26
 5bc:	64 9f       	mul	r22, r20
 5be:	66 27       	eor	r22, r22
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	66 1f       	adc	r22, r22
 5c6:	82 9f       	mul	r24, r18
 5c8:	22 27       	eor	r18, r18
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	73 9f       	mul	r23, r19
 5d2:	b0 0d       	add	r27, r0
 5d4:	a1 1d       	adc	r26, r1
 5d6:	62 1f       	adc	r22, r18
 5d8:	83 9f       	mul	r24, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	22 1f       	adc	r18, r18
 5e0:	74 9f       	mul	r23, r20
 5e2:	33 27       	eor	r19, r19
 5e4:	a0 0d       	add	r26, r0
 5e6:	61 1d       	adc	r22, r1
 5e8:	23 1f       	adc	r18, r19
 5ea:	84 9f       	mul	r24, r20
 5ec:	60 0d       	add	r22, r0
 5ee:	21 1d       	adc	r18, r1
 5f0:	82 2f       	mov	r24, r18
 5f2:	76 2f       	mov	r23, r22
 5f4:	6a 2f       	mov	r22, r26
 5f6:	11 24       	eor	r1, r1
 5f8:	9f 57       	subi	r25, 0x7F	; 127
 5fa:	50 40       	sbci	r21, 0x00	; 0
 5fc:	8a f0       	brmi	.+34     	; 0x620 <__mulsf3_pse+0x84>
 5fe:	e1 f0       	breq	.+56     	; 0x638 <__mulsf3_pse+0x9c>
 600:	88 23       	and	r24, r24
 602:	4a f0       	brmi	.+18     	; 0x616 <__mulsf3_pse+0x7a>
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	bb 1f       	adc	r27, r27
 60a:	66 1f       	adc	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	91 50       	subi	r25, 0x01	; 1
 612:	50 40       	sbci	r21, 0x00	; 0
 614:	a9 f7       	brne	.-22     	; 0x600 <__mulsf3_pse+0x64>
 616:	9e 3f       	cpi	r25, 0xFE	; 254
 618:	51 05       	cpc	r21, r1
 61a:	70 f0       	brcs	.+28     	; 0x638 <__mulsf3_pse+0x9c>
 61c:	14 c0       	rjmp	.+40     	; 0x646 <__fp_inf>
 61e:	aa cf       	rjmp	.-172    	; 0x574 <__fp_szero>
 620:	5f 3f       	cpi	r21, 0xFF	; 255
 622:	ec f3       	brlt	.-6      	; 0x61e <__mulsf3_pse+0x82>
 624:	98 3e       	cpi	r25, 0xE8	; 232
 626:	dc f3       	brlt	.-10     	; 0x61e <__mulsf3_pse+0x82>
 628:	86 95       	lsr	r24
 62a:	77 95       	ror	r23
 62c:	67 95       	ror	r22
 62e:	b7 95       	ror	r27
 630:	f7 95       	ror	r31
 632:	e7 95       	ror	r30
 634:	9f 5f       	subi	r25, 0xFF	; 255
 636:	c1 f7       	brne	.-16     	; 0x628 <__mulsf3_pse+0x8c>
 638:	fe 2b       	or	r31, r30
 63a:	88 0f       	add	r24, r24
 63c:	91 1d       	adc	r25, r1
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <__fp_inf>:
 646:	97 f9       	bld	r25, 7
 648:	9f 67       	ori	r25, 0x7F	; 127
 64a:	80 e8       	ldi	r24, 0x80	; 128
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	08 95       	ret

00000652 <__fp_nan>:
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	80 ec       	ldi	r24, 0xC0	; 192
 656:	08 95       	ret

00000658 <__fp_pscA>:
 658:	00 24       	eor	r0, r0
 65a:	0a 94       	dec	r0
 65c:	16 16       	cp	r1, r22
 65e:	17 06       	cpc	r1, r23
 660:	18 06       	cpc	r1, r24
 662:	09 06       	cpc	r0, r25
 664:	08 95       	ret

00000666 <__fp_pscB>:
 666:	00 24       	eor	r0, r0
 668:	0a 94       	dec	r0
 66a:	12 16       	cp	r1, r18
 66c:	13 06       	cpc	r1, r19
 66e:	14 06       	cpc	r1, r20
 670:	05 06       	cpc	r0, r21
 672:	08 95       	ret

00000674 <__fp_round>:
 674:	09 2e       	mov	r0, r25
 676:	03 94       	inc	r0
 678:	00 0c       	add	r0, r0
 67a:	11 f4       	brne	.+4      	; 0x680 <__fp_round+0xc>
 67c:	88 23       	and	r24, r24
 67e:	52 f0       	brmi	.+20     	; 0x694 <__fp_round+0x20>
 680:	bb 0f       	add	r27, r27
 682:	40 f4       	brcc	.+16     	; 0x694 <__fp_round+0x20>
 684:	bf 2b       	or	r27, r31
 686:	11 f4       	brne	.+4      	; 0x68c <__fp_round+0x18>
 688:	60 ff       	sbrs	r22, 0
 68a:	04 c0       	rjmp	.+8      	; 0x694 <__fp_round+0x20>
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	8f 4f       	sbci	r24, 0xFF	; 255
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	08 95       	ret

00000696 <__umulhisi3>:
 696:	a2 9f       	mul	r26, r18
 698:	b0 01       	movw	r22, r0
 69a:	b3 9f       	mul	r27, r19
 69c:	c0 01       	movw	r24, r0
 69e:	a3 9f       	mul	r26, r19
 6a0:	70 0d       	add	r23, r0
 6a2:	81 1d       	adc	r24, r1
 6a4:	11 24       	eor	r1, r1
 6a6:	91 1d       	adc	r25, r1
 6a8:	b2 9f       	mul	r27, r18
 6aa:	70 0d       	add	r23, r0
 6ac:	81 1d       	adc	r24, r1
 6ae:	11 24       	eor	r1, r1
 6b0:	91 1d       	adc	r25, r1
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
