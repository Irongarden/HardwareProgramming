
assignment_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080020c  0080020c  00000894  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001310  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb6  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091b  00000000  00000000  00002caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000035c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000701  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000502  00000000  00000000  00003eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000043b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c2       	rjmp	.+1120   	; 0x4d6 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	0a c1       	rjmp	.+532    	; 0x2be <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ef       	ldi	r30, 0xF4	; 244
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 31       	cpi	r26, 0x19	; 25
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	1b d2       	rcall	.+1078   	; 0x556 <main>
 120:	67 c3       	rjmp	.+1742   	; 0x7f0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <set_refresh_rate>:
static uint8_t display[SEGMENTS] = {0x0, 0x0, 0x0, 0x0};

static void set_refresh_rate() 
{
	// Set timer toggle on compare match
	TCCR4A |= _BV(COM4A0);
 124:	e0 ea       	ldi	r30, 0xA0	; 160
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	
	// Set prescaler 8
	TCCR4B |= _BV(CS41);
 12e:	e1 ea       	ldi	r30, 0xA1	; 161
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
	
	// Set to Clear timer on compare match (CTC mode)
	TCCR4B |= _BV(WGM42);
 138:	80 81       	ld	r24, Z
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	80 83       	st	Z, r24
	
	// Enable Timer interrupt
	TIMSK4 |= _BV(OCIE4A);
 13e:	e2 e7       	ldi	r30, 0x72	; 114
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
	
	// Set timer frequency 60Hz/digit (16000000 / (2*60*4*8))-1 = 4165.6
	OCR4A = 4166;
 148:	86 e4       	ldi	r24, 0x46	; 70
 14a:	90 e1       	ldi	r25, 0x10	; 16
 14c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 150:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 154:	08 95       	ret

00000156 <get_display_code>:
// Returns display code equivalent to digit value.
// If a zero is found, it will determine if it should return code equivalent to 0 or turn off the segment based on values in more significant segments.
static uint8_t get_display_code(uint8_t segment)
{
	// Least significant segment is allowed to be zero.
	if (segment == SEGMENTS - 1)
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	51 f4       	brne	.+20     	; 0x16e <get_display_code+0x18>
		return display_code[digits[segment]];
 15a:	e8 2f       	mov	r30, r24
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e0 5f       	subi	r30, 0xF0	; 240
 160:	fd 4f       	sbci	r31, 0xFD	; 253
 162:	e0 81       	ld	r30, Z
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	ef 5f       	subi	r30, 0xFF	; 255
 168:	fd 4f       	sbci	r31, 0xFD	; 253
 16a:	80 81       	ld	r24, Z
 16c:	08 95       	ret
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
 16e:	e8 2f       	mov	r30, r24
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e0 5f       	subi	r30, 0xF0	; 240
 174:	fd 4f       	sbci	r31, 0xFD	; 253
 176:	e0 81       	ld	r30, Z
 178:	e1 11       	cpse	r30, r1
 17a:	04 c0       	rjmp	.+8      	; 0x184 <get_display_code+0x2e>
 17c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 180:	81 11       	cpse	r24, r1
 182:	0a c0       	rjmp	.+20     	; 0x198 <get_display_code+0x42>
		return display_code[10];
	
	// First time a non-zero value is found leading zeros will be false. 
	// This effectively returns less significant zeros to display code equivalent to zero instead of having them turned off.
	if (leading_zeros)
 184:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 188:	81 11       	cpse	r24, r1
		leading_zeros = 0;
 18a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ef 5f       	subi	r30, 0xFF	; 255
 192:	fd 4f       	sbci	r31, 0xFD	; 253
 194:	80 81       	ld	r24, Z
 196:	08 95       	ret
	if (segment == SEGMENTS - 1)
		return display_code[digits[segment]];
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
		return display_code[10];
 198:	8f ef       	ldi	r24, 0xFF	; 255
	if (leading_zeros)
		leading_zeros = 0;

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
}
 19a:	08 95       	ret

0000019c <set_display_code>:

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
	leading_zeros = 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	for (uint8_t i = 0; i < SEGMENTS; i++) 
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	09 c0       	rjmp	.+18     	; 0x1be <set_display_code+0x22>
		display[i] = get_display_code(i);
 1ac:	0c 2f       	mov	r16, r28
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	8c 2f       	mov	r24, r28
 1b2:	d1 df       	rcall	.-94     	; 0x156 <get_display_code>
 1b4:	f8 01       	movw	r30, r16
 1b6:	e4 5f       	subi	r30, 0xF4	; 244
 1b8:	fd 4f       	sbci	r31, 0xFD	; 253
 1ba:	80 83       	st	Z, r24
}

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
	leading_zeros = 1;
	for (uint8_t i = 0; i < SEGMENTS; i++) 
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	c4 30       	cpi	r28, 0x04	; 4
 1c0:	a8 f3       	brcs	.-22     	; 0x1ac <set_display_code+0x10>
		display[i] = get_display_code(i);
}
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <split_digits>:

// Splits number into separate digits.
static void split_digits(uint16_t value, uint8_t digit) {
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	fc 01       	movw	r30, r24
	
	// Base case - Done.
	if (digit == 0)
 1d0:	61 11       	cpse	r22, r1
 1d2:	1f c0       	rjmp	.+62     	; 0x212 <split_digits+0x48>
		digits[digit] = value % 10;
 1d4:	46 2f       	mov	r20, r22
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	9c 01       	movw	r18, r24
 1da:	ad ec       	ldi	r26, 0xCD	; 205
 1dc:	bc ec       	ldi	r27, 0xCC	; 204
 1de:	f9 d2       	rcall	.+1522   	; 0x7d2 <__umulhisi3>
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	9c 01       	movw	r18, r24
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	82 0f       	add	r24, r18
 200:	93 1f       	adc	r25, r19
 202:	9f 01       	movw	r18, r30
 204:	28 1b       	sub	r18, r24
 206:	39 0b       	sbc	r19, r25
 208:	fa 01       	movw	r30, r20
 20a:	e0 5f       	subi	r30, 0xF0	; 240
 20c:	fd 4f       	sbci	r31, 0xFD	; 253
 20e:	20 83       	st	Z, r18
 210:	29 c0       	rjmp	.+82     	; 0x264 <split_digits+0x9a>
 212:	46 2f       	mov	r20, r22
	else {
		digits[digit] = value % 10;
 214:	c6 2f       	mov	r28, r22
 216:	d0 e0       	ldi	r29, 0x00	; 0
 218:	9c 01       	movw	r18, r24
 21a:	ad ec       	ldi	r26, 0xCD	; 205
 21c:	bc ec       	ldi	r27, 0xCC	; 204
 21e:	d9 d2       	rcall	.+1458   	; 0x7d2 <__umulhisi3>
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	9c 01       	movw	r18, r24
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	82 0f       	add	r24, r18
 240:	93 1f       	adc	r25, r19
 242:	9f 01       	movw	r18, r30
 244:	28 1b       	sub	r18, r24
 246:	39 0b       	sbc	r19, r25
 248:	c0 5f       	subi	r28, 0xF0	; 240
 24a:	dd 4f       	sbci	r29, 0xFD	; 253
 24c:	28 83       	st	Y, r18
		value = value / 10;
 24e:	9f 01       	movw	r18, r30
 250:	c0 d2       	rcall	.+1408   	; 0x7d2 <__umulhisi3>
 252:	6f ef       	ldi	r22, 0xFF	; 255
		
		// Recurse until done.
		digit--;
 254:	64 0f       	add	r22, r20
 256:	96 95       	lsr	r25
		split_digits(value, digit);
 258:	87 95       	ror	r24
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	b3 df       	rcall	.-154    	; 0x1ca <split_digits>
 264:	df 91       	pop	r29
	}
}
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <init_display>:
 26a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <communication>
void init_display(communication_t mode) {
	// Set communication mode.
	communication = mode;
	
	// Set PF0-PF3 to output (digits)
	DDRF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
 26e:	80 b3       	in	r24, 0x10	; 16
 270:	8f 60       	ori	r24, 0x0F	; 15
 272:	80 bb       	out	0x10, r24	; 16
	
	// Set SI to output
	DDRB |= _BV(SI);
 274:	84 b1       	in	r24, 0x04	; 4
 276:	84 60       	ori	r24, 0x04	; 4
 278:	84 b9       	out	0x04, r24	; 4
	
	// Set SCK to output
	DDRB |= _BV(SCK);
 27a:	84 b1       	in	r24, 0x04	; 4
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	84 b9       	out	0x04, r24	; 4
	
	// Set RCK to output
	DDRB |= _BV(RCK);
 280:	84 b1       	in	r24, 0x04	; 4
 282:	81 60       	ori	r24, 0x01	; 1
 284:	84 b9       	out	0x04, r24	; 4
	
	if (communication == SPI) {
 286:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <communication>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	91 f4       	brne	.+36     	; 0x2b2 <init_display+0x48>
		// Setup CPOL functionality to sample at rising edge.
		SPCR &= ~ (_BV(CPOL) | _BV(CPHA));
 28e:	8c b5       	in	r24, 0x2c	; 44
 290:	83 7f       	andi	r24, 0xF3	; 243
 292:	8c bd       	out	0x2c, r24	; 44
	
		// DORD 0 OR 1: start from least significant bit or opposite.
		SPCR |=_BV(DORD);
 294:	8c b5       	in	r24, 0x2c	; 44
 296:	80 62       	ori	r24, 0x20	; 32
 298:	8c bd       	out	0x2c, r24	; 44
	
		// Set Master.
		SPCR |= _BV(MSTR);
 29a:	8c b5       	in	r24, 0x2c	; 44
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	8c bd       	out	0x2c, r24	; 44
	
		// Set SCK frequency to Fosc/128.
		SPCR |= _BV(SPR1) | _BV(SPR0);
 2a0:	8c b5       	in	r24, 0x2c	; 44
 2a2:	83 60       	ori	r24, 0x03	; 3
 2a4:	8c bd       	out	0x2c, r24	; 44
		SPSR &= ~_BV(SPI2X);
 2a6:	8d b5       	in	r24, 0x2d	; 45
 2a8:	8e 7f       	andi	r24, 0xFE	; 254
 2aa:	8d bd       	out	0x2d, r24	; 45
	
		// Enable SPI.
		SPCR |= _BV(SPE);
 2ac:	8c b5       	in	r24, 0x2c	; 44
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	8c bd       	out	0x2c, r24	; 44
	}
	
	// Initializes timer and interrupt
	set_refresh_rate();
 2b2:	38 cf       	rjmp	.-400    	; 0x124 <set_refresh_rate>
 2b4:	08 95       	ret

000002b6 <printint_4u>:

// Input from application
void printint_4u(uint16_t value) 
{
	// Split digits from least significant value.
	split_digits(value, SEGMENTS - 1);
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	88 df       	rcall	.-240    	; 0x1ca <split_digits>
	set_display_code();
 2ba:	70 cf       	rjmp	.-288    	; 0x19c <set_display_code>
 2bc:	08 95       	ret

000002be <__vector_42>:
 2be:	1f 92       	push	r1
}

ISR(TIMER4_COMPA_vect)
{		
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0b b6       	in	r0, 0x3b	; 59
 2ca:	0f 92       	push	r0
 2cc:	2f 93       	push	r18
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	// Turn off all segments
	PORTF |= _BV(D1) | _BV(D2) | _BV(D3)| _BV(D4);
 2d6:	81 b3       	in	r24, 0x11	; 17
 2d8:	8f 60       	ori	r24, 0x0F	; 15
 2da:	81 bb       	out	0x11, r24	; 17
	
	// Move into storage register.
	PORTB |= _BV(RCK);
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~_BV(RCK);
 2e2:	85 b1       	in	r24, 0x05	; 5
 2e4:	8e 7f       	andi	r24, 0xFE	; 254
 2e6:	85 b9       	out	0x05, r24	; 5
		
	// Turn on current segment.
	PORTF &= ~(_BV(current_segment));
 2e8:	21 b3       	in	r18, 0x11	; 17
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	00 90 14 02 	lds	r0, 0x0214	; 0x800214 <current_segment>
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <__vector_42+0x3a>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <__vector_42+0x36>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	81 bb       	out	0x11, r24	; 17
	
	// Increment to next segment.
	current_segment++;
 302:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <current_segment>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <current_segment>
		
	// Loops around to first segment again.
	if(current_segment == SEGMENTS)
 30c:	84 30       	cpi	r24, 0x04	; 4
 30e:	11 f4       	brne	.+4      	; 0x314 <__vector_42+0x56>
		current_segment = 0;
 310:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <current_segment>
		
	if (communication == SPI)
 314:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <communication>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	31 f5       	brne	.+76     	; 0x368 <__vector_42+0xaa>
		SPDR = display[current_segment];
 31c:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <current_segment>
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	e4 5f       	subi	r30, 0xF4	; 244
 324:	fd 4f       	sbci	r31, 0xFD	; 253
 326:	80 81       	ld	r24, Z
 328:	8e bd       	out	0x2e, r24	; 46
 32a:	21 c0       	rjmp	.+66     	; 0x36e <__vector_42+0xb0>
	else 
		// Shift display code into register.
		for(uint8_t i = 0; i < 8; i++)
		{
			// bitwise right shift to onto serial input.
			if (display[current_segment] >> i & 1)
 32c:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <current_segment>
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	e4 5f       	subi	r30, 0xF4	; 244
 334:	fd 4f       	sbci	r31, 0xFD	; 253
 336:	80 81       	ld	r24, Z
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 2e       	mov	r0, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_42+0x84>
 33e:	95 95       	asr	r25
 340:	87 95       	ror	r24
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <__vector_42+0x80>
 346:	80 ff       	sbrs	r24, 0
 348:	04 c0       	rjmp	.+8      	; 0x352 <__vector_42+0x94>
			PORTB |=_BV(SI);
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	84 60       	ori	r24, 0x04	; 4
 34e:	85 b9       	out	0x05, r24	; 5
 350:	03 c0       	rjmp	.+6      	; 0x358 <__vector_42+0x9a>
			else
			PORTB &= ~_BV(SI);
 352:	85 b1       	in	r24, 0x05	; 5
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	85 b9       	out	0x05, r24	; 5
			
			// Shift into register.
			PORTB |= _BV(SCK);
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	82 60       	ori	r24, 0x02	; 2
 35c:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~_BV(SCK);
 35e:	85 b1       	in	r24, 0x05	; 5
 360:	8d 7f       	andi	r24, 0xFD	; 253
 362:	85 b9       	out	0x05, r24	; 5
		
	if (communication == SPI)
		SPDR = display[current_segment];
	else 
		// Shift display code into register.
		for(uint8_t i = 0; i < 8; i++)
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	01 c0       	rjmp	.+2      	; 0x36a <__vector_42+0xac>
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	28 30       	cpi	r18, 0x08	; 8
 36c:	f8 f2       	brcs	.-66     	; 0x32c <__vector_42+0x6e>
			
			// Shift into register.
			PORTB |= _BV(SCK);
			PORTB &= ~_BV(SCK);
		}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0b be       	out	0x3b, r0	; 59
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <init_leds>:
#include "../include/led.h"

void init_leds()
{
	// set pin direction to output
	DDRA = 0xFF;
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	81 b9       	out	0x01, r24	; 1
	// turn all leds off - Active low
	PORTA = 0xFF;
 38a:	82 b9       	out	0x02, r24	; 2
 38c:	08 95       	ret

0000038e <set_led>:
/*
* Leds are active low.
*/
void set_led(uint8_t led_no, uint8_t state)
{
	if (led_no > 0 && led_no < 9)
 38e:	9f ef       	ldi	r25, 0xFF	; 255
 390:	98 0f       	add	r25, r24
 392:	98 30       	cpi	r25, 0x08	; 8
 394:	00 f5       	brcc	.+64     	; 0x3d6 <set_led+0x48>
		if (state == ON)
 396:	61 30       	cpi	r22, 0x01	; 1
 398:	81 f4       	brne	.+32     	; 0x3ba <set_led+0x2c>
			// Set port low.
			PORTA &= ~_BV(led_no - 1);
 39a:	42 b1       	in	r20, 0x02	; 2
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	b9 01       	movw	r22, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <set_led+0x1e>
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <set_led+0x1a>
 3b0:	cb 01       	movw	r24, r22
 3b2:	80 95       	com	r24
 3b4:	84 23       	and	r24, r20
 3b6:	82 b9       	out	0x02, r24	; 2
 3b8:	08 95       	ret
		else
			// Set port high.
			PORTA |= _BV(led_no - 1);
 3ba:	42 b1       	in	r20, 0x02	; 2
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	b9 01       	movw	r22, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <set_led+0x3e>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	8a 95       	dec	r24
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <set_led+0x3a>
 3d0:	cb 01       	movw	r24, r22
 3d2:	84 2b       	or	r24, r20
 3d4:	82 b9       	out	0x02, r24	; 2
 3d6:	08 95       	ret

000003d8 <lightbar>:

/*
* Turns on all leds <= level og turns all off itteratively.
*/
void lightbar(uint8_t level) 
{
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
	if (level >= 0 && level <= 8)
 3dc:	89 30       	cpi	r24, 0x09	; 9
 3de:	60 f0       	brcs	.+24     	; 0x3f8 <lightbar+0x20>
 3e0:	0f c0       	rjmp	.+30     	; 0x400 <__LOCK_REGION_LENGTH__>
		for(uint8_t i = 1; i <= 8; i++)
			if (i <= level) 
 3e2:	dc 17       	cp	r29, r28
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <lightbar+0x16>
				set_led(i, ON);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	8c 2f       	mov	r24, r28
 3ea:	d1 df       	rcall	.-94     	; 0x38e <set_led>
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <lightbar+0x1c>
			else
				set_led(i, OFF);	
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	8c 2f       	mov	r24, r28
 3f2:	cd df       	rcall	.-102    	; 0x38e <set_led>
* Turns on all leds <= level og turns all off itteratively.
*/
void lightbar(uint8_t level) 
{
	if (level >= 0 && level <= 8)
		for(uint8_t i = 1; i <= 8; i++)
 3f4:	cf 5f       	subi	r28, 0xFF	; 255
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <lightbar+0x24>
 3f8:	d8 2f       	mov	r29, r24
 3fa:	c1 e0       	ldi	r28, 0x01	; 1
 3fc:	c9 30       	cpi	r28, 0x09	; 9
 3fe:	88 f3       	brcs	.-30     	; 0x3e2 <lightbar+0xa>
			if (i <= level) 
				set_led(i, ON);
			else
				set_led(i, OFF);	
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <mv_to_c>:
static void (*cb)(uint8_t deg_c) = 0;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
 406:	9c 01       	movw	r18, r24
 408:	24 5f       	subi	r18, 0xF4	; 244
 40a:	31 40       	sbci	r19, 0x01	; 1
 40c:	ad ec       	ldi	r26, 0xCD	; 205
 40e:	bc ec       	ldi	r27, 0xCC	; 204
 410:	e0 d1       	rcall	.+960    	; 0x7d2 <__umulhisi3>
 412:	96 95       	lsr	r25
 414:	87 95       	ror	r24
 416:	96 95       	lsr	r25
 418:	87 95       	ror	r24
 41a:	96 95       	lsr	r25
 41c:	87 95       	ror	r24
}
 41e:	08 95       	ret

00000420 <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
 420:	bc 01       	movw	r22, r24
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	e4 d0       	rcall	.+456    	; 0x5f0 <__floatunsisf>
 428:	2a e1       	ldi	r18, 0x1A	; 26
 42a:	37 e6       	ldi	r19, 0x67	; 103
 42c:	4c e9       	ldi	r20, 0x9C	; 156
 42e:	50 e4       	ldi	r21, 0x40	; 64
 430:	45 d1       	rcall	.+650    	; 0x6bc <__mulsf3>
 432:	b2 d0       	rcall	.+356    	; 0x598 <__fixunssfsi>
}
 434:	cb 01       	movw	r24, r22
 436:	08 95       	ret

00000438 <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
 438:	9c 01       	movw	r18, r24
	// **** General config *****
	
	// Set PK7 direction as input (TMP36 Vout)
	DDRK &= ~_BV(v_out);
 43a:	e7 e0       	ldi	r30, 0x07	; 7
 43c:	f1 e0       	ldi	r31, 0x01	; 1
 43e:	80 81       	ld	r24, Z
 440:	8f 77       	andi	r24, 0x7F	; 127
 442:	80 83       	st	Z, r24
	
	// Set PG0 direction as output (TMP36 Enable)
	DDRG |= _BV(enable);  
 444:	83 b3       	in	r24, 0x13	; 19
 446:	81 60       	ori	r24, 0x01	; 1
 448:	83 bb       	out	0x13, r24	; 19

	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
 44a:	ec e7       	ldi	r30, 0x7C	; 124
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	80 64       	ori	r24, 0x40	; 64
 452:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
 454:	80 81       	ld	r24, Z
 456:	87 60       	ori	r24, 0x07	; 7
 458:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 45a:	ab e7       	ldi	r26, 0x7B	; 123
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	8c 91       	ld	r24, X
 460:	88 60       	ori	r24, 0x08	; 8
 462:	8c 93       	st	X, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
 464:	ea e7       	ldi	r30, 0x7A	; 122
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	86 60       	ori	r24, 0x06	; 6
 46c:	80 83       	st	Z, r24

	// Enable ADC  
	ADCSRA |= _BV(ADEN);
 46e:	80 81       	ld	r24, Z
 470:	80 68       	ori	r24, 0x80	; 128
 472:	80 83       	st	Z, r24
	// ****** General config end *************
	
	// ****** Interrupt and auto trigger ****
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
 474:	80 81       	ld	r24, Z
 476:	88 60       	ori	r24, 0x08	; 8
 478:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
 47a:	80 81       	ld	r24, Z
 47c:	80 62       	ori	r24, 0x20	; 32
 47e:	80 83       	st	Z, r24
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 480:	8c 91       	ld	r24, X
 482:	85 60       	ori	r24, 0x05	; 5
 484:	8c 93       	st	X, r24
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
 486:	e0 e8       	ldi	r30, 0x80	; 128
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	90 81       	ld	r25, Z
 48c:	90 61       	ori	r25, 0x10	; 16
 48e:	90 83       	st	Z, r25
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
 490:	e1 e8       	ldi	r30, 0x81	; 129
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	90 81       	ld	r25, Z
 496:	94 60       	ori	r25, 0x04	; 4
 498:	90 83       	st	Z, r25
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1B |= _BV(WGM12);
 49a:	90 81       	ld	r25, Z
 49c:	98 60       	ori	r25, 0x08	; 8
 49e:	90 83       	st	Z, r25
	
	// Enable Timer Interrupt
	TIMSK1 |= _BV(OCIE1B);
 4a0:	ef e6       	ldi	r30, 0x6F	; 111
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	90 81       	ld	r25, Z
 4a6:	94 60       	ori	r25, 0x04	; 4
 4a8:	90 83       	st	Z, r25

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
 4aa:	81 e1       	ldi	r24, 0x11	; 17
 4ac:	9a e7       	ldi	r25, 0x7A	; 122
 4ae:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 4b2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
 4b6:	21 15       	cp	r18, r1
 4b8:	31 05       	cpc	r19, r1
 4ba:	21 f0       	breq	.+8      	; 0x4c4 <tmp36_init+0x8c>
		cb = callback;
 4bc:	30 93 17 02 	sts	0x0217, r19	; 0x800217 <cb+0x1>
 4c0:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <cb>
	
	// Enable TMP36
	PORTG |= _BV(enable);
 4c4:	84 b3       	in	r24, 0x14	; 20
 4c6:	81 60       	ori	r24, 0x01	; 1
 4c8:	84 bb       	out	0x14, r24	; 20
	
	// Start Conversion.
	ADCSRA |= _BV(ADSC);
 4ca:	ea e7       	ldi	r30, 0x7A	; 122
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	80 83       	st	Z, r24
 4d4:	08 95       	ret

000004d6 <__vector_29>:
}

// AD Interrupt callback.
ISR(ADC_vect)
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	0b b6       	in	r0, 0x3b	; 59
 4e2:	0f 92       	push	r0
 4e4:	2f 93       	push	r18
 4e6:	3f 93       	push	r19
 4e8:	4f 93       	push	r20
 4ea:	5f 93       	push	r21
 4ec:	6f 93       	push	r22
 4ee:	7f 93       	push	r23
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
 4f4:	af 93       	push	r26
 4f6:	bf 93       	push	r27
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	ef 93       	push	r30
 4fe:	ff 93       	push	r31
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
 500:	c0 91 16 02 	lds	r28, 0x0216	; 0x800216 <cb>
 504:	d0 91 17 02 	lds	r29, 0x0217	; 0x800217 <cb+0x1>
 508:	20 97       	sbiw	r28, 0x00	; 0
 50a:	41 f0       	breq	.+16     	; 0x51c <__vector_29+0x46>
		cb(mv_to_c(adc_to_mv(ADC)));
 50c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 510:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 514:	85 df       	rcall	.-246    	; 0x420 <adc_to_mv>
 516:	77 df       	rcall	.-274    	; 0x406 <mv_to_c>
 518:	fe 01       	movw	r30, r28
 51a:	19 95       	eicall
	
	// ADC interrupt flag is high!
	// Clear ADC interrupt flag.
	ADCSRA |= ~_BV(ADIF);
 51c:	ea e7       	ldi	r30, 0x7A	; 122
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	8f 6e       	ori	r24, 0xEF	; 239
 524:	80 83       	st	Z, r24
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	0f 90       	pop	r0
 544:	0b be       	out	0x3b, r0	; 59
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <new_measurement>:
static uint8_t led_level = 0;

// Temperature callback.
static void new_measurement(uint8_t deg_c)
{
	temp = deg_c;
 550:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <temp>
 554:	08 95       	ret

00000556 <main>:
}

int main(void)
{
	// Initialize HAL.
	init_leds();
 556:	17 df       	rcall	.-466    	; 0x386 <init_leds>
	tmp36_init(new_measurement);
 558:	88 ea       	ldi	r24, 0xA8	; 168
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	6d df       	rcall	.-294    	; 0x438 <tmp36_init>
	init_display(SPI);
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	84 de       	rcall	.-760    	; 0x26a <init_display>
 562:	78 94       	sei
	
	// Enable interrupt globally.
	sei();
 564:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 566:	89 e6       	ldi	r24, 0x69	; 105
 568:	98 e1       	ldi	r25, 0x18	; 24
 56a:	21 50       	subi	r18, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <main+0x14>
 572:	00 c0       	rjmp	.+0      	; 0x574 <main+0x1e>
 574:	00 00       	nop
 576:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <temp>
	_delay_ms(500);
	
	// Application
    while (1)
    {		
		printint_4u(temp);
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	9c de       	rcall	.-712    	; 0x2b6 <printint_4u>
 57e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <temp>
		
		led_level = temp - offset;
 582:	82 51       	subi	r24, 0x12	; 18
		
		if (led_level <= 0)
 584:	11 f4       	brne	.+4      	; 0x58a <main+0x34>
			lightbar(0);
 586:	28 df       	rcall	.-432    	; 0x3d8 <lightbar>
 588:	f6 cf       	rjmp	.-20     	; 0x576 <main+0x20>
		else if (led_level < 9)
 58a:	89 30       	cpi	r24, 0x09	; 9
			lightbar(led_level);
 58c:	10 f4       	brcc	.+4      	; 0x592 <main+0x3c>
 58e:	24 df       	rcall	.-440    	; 0x3d8 <lightbar>
 590:	f2 cf       	rjmp	.-28     	; 0x576 <main+0x20>
		else
			lightbar(8);
 592:	88 e0       	ldi	r24, 0x08	; 8
 594:	21 df       	rcall	.-446    	; 0x3d8 <lightbar>
 596:	ef cf       	rjmp	.-34     	; 0x576 <main+0x20>

00000598 <__fixunssfsi>:
 598:	70 d0       	rcall	.+224    	; 0x67a <__fp_splitA>
 59a:	88 f0       	brcs	.+34     	; 0x5be <__fixunssfsi+0x26>
 59c:	9f 57       	subi	r25, 0x7F	; 127
 59e:	90 f0       	brcs	.+36     	; 0x5c4 <__fixunssfsi+0x2c>
 5a0:	b9 2f       	mov	r27, r25
 5a2:	99 27       	eor	r25, r25
 5a4:	b7 51       	subi	r27, 0x17	; 23
 5a6:	a0 f0       	brcs	.+40     	; 0x5d0 <__fixunssfsi+0x38>
 5a8:	d1 f0       	breq	.+52     	; 0x5de <__fixunssfsi+0x46>
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	1a f0       	brmi	.+6      	; 0x5ba <__fixunssfsi+0x22>
 5b4:	ba 95       	dec	r27
 5b6:	c9 f7       	brne	.-14     	; 0x5aa <__fixunssfsi+0x12>
 5b8:	12 c0       	rjmp	.+36     	; 0x5de <__fixunssfsi+0x46>
 5ba:	b1 30       	cpi	r27, 0x01	; 1
 5bc:	81 f0       	breq	.+32     	; 0x5de <__fixunssfsi+0x46>
 5be:	77 d0       	rcall	.+238    	; 0x6ae <__fp_zero>
 5c0:	b1 e0       	ldi	r27, 0x01	; 1
 5c2:	08 95       	ret
 5c4:	74 c0       	rjmp	.+232    	; 0x6ae <__fp_zero>
 5c6:	67 2f       	mov	r22, r23
 5c8:	78 2f       	mov	r23, r24
 5ca:	88 27       	eor	r24, r24
 5cc:	b8 5f       	subi	r27, 0xF8	; 248
 5ce:	39 f0       	breq	.+14     	; 0x5de <__fixunssfsi+0x46>
 5d0:	b9 3f       	cpi	r27, 0xF9	; 249
 5d2:	cc f3       	brlt	.-14     	; 0x5c6 <__fixunssfsi+0x2e>
 5d4:	86 95       	lsr	r24
 5d6:	77 95       	ror	r23
 5d8:	67 95       	ror	r22
 5da:	b3 95       	inc	r27
 5dc:	d9 f7       	brne	.-10     	; 0x5d4 <__fixunssfsi+0x3c>
 5de:	3e f4       	brtc	.+14     	; 0x5ee <__fixunssfsi+0x56>
 5e0:	90 95       	com	r25
 5e2:	80 95       	com	r24
 5e4:	70 95       	com	r23
 5e6:	61 95       	neg	r22
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	08 95       	ret

000005f0 <__floatunsisf>:
 5f0:	e8 94       	clt
 5f2:	09 c0       	rjmp	.+18     	; 0x606 <__floatsisf+0x12>

000005f4 <__floatsisf>:
 5f4:	97 fb       	bst	r25, 7
 5f6:	3e f4       	brtc	.+14     	; 0x606 <__floatsisf+0x12>
 5f8:	90 95       	com	r25
 5fa:	80 95       	com	r24
 5fc:	70 95       	com	r23
 5fe:	61 95       	neg	r22
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	99 23       	and	r25, r25
 608:	a9 f0       	breq	.+42     	; 0x634 <__floatsisf+0x40>
 60a:	f9 2f       	mov	r31, r25
 60c:	96 e9       	ldi	r25, 0x96	; 150
 60e:	bb 27       	eor	r27, r27
 610:	93 95       	inc	r25
 612:	f6 95       	lsr	r31
 614:	87 95       	ror	r24
 616:	77 95       	ror	r23
 618:	67 95       	ror	r22
 61a:	b7 95       	ror	r27
 61c:	f1 11       	cpse	r31, r1
 61e:	f8 cf       	rjmp	.-16     	; 0x610 <__floatsisf+0x1c>
 620:	fa f4       	brpl	.+62     	; 0x660 <__floatsisf+0x6c>
 622:	bb 0f       	add	r27, r27
 624:	11 f4       	brne	.+4      	; 0x62a <__floatsisf+0x36>
 626:	60 ff       	sbrs	r22, 0
 628:	1b c0       	rjmp	.+54     	; 0x660 <__floatsisf+0x6c>
 62a:	6f 5f       	subi	r22, 0xFF	; 255
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	8f 4f       	sbci	r24, 0xFF	; 255
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	16 c0       	rjmp	.+44     	; 0x660 <__floatsisf+0x6c>
 634:	88 23       	and	r24, r24
 636:	11 f0       	breq	.+4      	; 0x63c <__floatsisf+0x48>
 638:	96 e9       	ldi	r25, 0x96	; 150
 63a:	11 c0       	rjmp	.+34     	; 0x65e <__floatsisf+0x6a>
 63c:	77 23       	and	r23, r23
 63e:	21 f0       	breq	.+8      	; 0x648 <__floatsisf+0x54>
 640:	9e e8       	ldi	r25, 0x8E	; 142
 642:	87 2f       	mov	r24, r23
 644:	76 2f       	mov	r23, r22
 646:	05 c0       	rjmp	.+10     	; 0x652 <__floatsisf+0x5e>
 648:	66 23       	and	r22, r22
 64a:	71 f0       	breq	.+28     	; 0x668 <__floatsisf+0x74>
 64c:	96 e8       	ldi	r25, 0x86	; 134
 64e:	86 2f       	mov	r24, r22
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	2a f0       	brmi	.+10     	; 0x660 <__floatsisf+0x6c>
 656:	9a 95       	dec	r25
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	da f7       	brpl	.-10     	; 0x656 <__floatsisf+0x62>
 660:	88 0f       	add	r24, r24
 662:	96 95       	lsr	r25
 664:	87 95       	ror	r24
 666:	97 f9       	bld	r25, 7
 668:	08 95       	ret

0000066a <__fp_split3>:
 66a:	57 fd       	sbrc	r21, 7
 66c:	90 58       	subi	r25, 0x80	; 128
 66e:	44 0f       	add	r20, r20
 670:	55 1f       	adc	r21, r21
 672:	59 f0       	breq	.+22     	; 0x68a <__fp_splitA+0x10>
 674:	5f 3f       	cpi	r21, 0xFF	; 255
 676:	71 f0       	breq	.+28     	; 0x694 <__fp_splitA+0x1a>
 678:	47 95       	ror	r20

0000067a <__fp_splitA>:
 67a:	88 0f       	add	r24, r24
 67c:	97 fb       	bst	r25, 7
 67e:	99 1f       	adc	r25, r25
 680:	61 f0       	breq	.+24     	; 0x69a <__fp_splitA+0x20>
 682:	9f 3f       	cpi	r25, 0xFF	; 255
 684:	79 f0       	breq	.+30     	; 0x6a4 <__fp_splitA+0x2a>
 686:	87 95       	ror	r24
 688:	08 95       	ret
 68a:	12 16       	cp	r1, r18
 68c:	13 06       	cpc	r1, r19
 68e:	14 06       	cpc	r1, r20
 690:	55 1f       	adc	r21, r21
 692:	f2 cf       	rjmp	.-28     	; 0x678 <__fp_split3+0xe>
 694:	46 95       	lsr	r20
 696:	f1 df       	rcall	.-30     	; 0x67a <__fp_splitA>
 698:	08 c0       	rjmp	.+16     	; 0x6aa <__fp_splitA+0x30>
 69a:	16 16       	cp	r1, r22
 69c:	17 06       	cpc	r1, r23
 69e:	18 06       	cpc	r1, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	f1 cf       	rjmp	.-30     	; 0x686 <__fp_splitA+0xc>
 6a4:	86 95       	lsr	r24
 6a6:	71 05       	cpc	r23, r1
 6a8:	61 05       	cpc	r22, r1
 6aa:	08 94       	sec
 6ac:	08 95       	ret

000006ae <__fp_zero>:
 6ae:	e8 94       	clt

000006b0 <__fp_szero>:
 6b0:	bb 27       	eor	r27, r27
 6b2:	66 27       	eor	r22, r22
 6b4:	77 27       	eor	r23, r23
 6b6:	cb 01       	movw	r24, r22
 6b8:	97 f9       	bld	r25, 7
 6ba:	08 95       	ret

000006bc <__mulsf3>:
 6bc:	0b d0       	rcall	.+22     	; 0x6d4 <__mulsf3x>
 6be:	78 c0       	rjmp	.+240    	; 0x7b0 <__fp_round>
 6c0:	69 d0       	rcall	.+210    	; 0x794 <__fp_pscA>
 6c2:	28 f0       	brcs	.+10     	; 0x6ce <__mulsf3+0x12>
 6c4:	6e d0       	rcall	.+220    	; 0x7a2 <__fp_pscB>
 6c6:	18 f0       	brcs	.+6      	; 0x6ce <__mulsf3+0x12>
 6c8:	95 23       	and	r25, r21
 6ca:	09 f0       	breq	.+2      	; 0x6ce <__mulsf3+0x12>
 6cc:	5a c0       	rjmp	.+180    	; 0x782 <__fp_inf>
 6ce:	5f c0       	rjmp	.+190    	; 0x78e <__fp_nan>
 6d0:	11 24       	eor	r1, r1
 6d2:	ee cf       	rjmp	.-36     	; 0x6b0 <__fp_szero>

000006d4 <__mulsf3x>:
 6d4:	ca df       	rcall	.-108    	; 0x66a <__fp_split3>
 6d6:	a0 f3       	brcs	.-24     	; 0x6c0 <__mulsf3+0x4>

000006d8 <__mulsf3_pse>:
 6d8:	95 9f       	mul	r25, r21
 6da:	d1 f3       	breq	.-12     	; 0x6d0 <__mulsf3+0x14>
 6dc:	95 0f       	add	r25, r21
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	55 1f       	adc	r21, r21
 6e2:	62 9f       	mul	r22, r18
 6e4:	f0 01       	movw	r30, r0
 6e6:	72 9f       	mul	r23, r18
 6e8:	bb 27       	eor	r27, r27
 6ea:	f0 0d       	add	r31, r0
 6ec:	b1 1d       	adc	r27, r1
 6ee:	63 9f       	mul	r22, r19
 6f0:	aa 27       	eor	r26, r26
 6f2:	f0 0d       	add	r31, r0
 6f4:	b1 1d       	adc	r27, r1
 6f6:	aa 1f       	adc	r26, r26
 6f8:	64 9f       	mul	r22, r20
 6fa:	66 27       	eor	r22, r22
 6fc:	b0 0d       	add	r27, r0
 6fe:	a1 1d       	adc	r26, r1
 700:	66 1f       	adc	r22, r22
 702:	82 9f       	mul	r24, r18
 704:	22 27       	eor	r18, r18
 706:	b0 0d       	add	r27, r0
 708:	a1 1d       	adc	r26, r1
 70a:	62 1f       	adc	r22, r18
 70c:	73 9f       	mul	r23, r19
 70e:	b0 0d       	add	r27, r0
 710:	a1 1d       	adc	r26, r1
 712:	62 1f       	adc	r22, r18
 714:	83 9f       	mul	r24, r19
 716:	a0 0d       	add	r26, r0
 718:	61 1d       	adc	r22, r1
 71a:	22 1f       	adc	r18, r18
 71c:	74 9f       	mul	r23, r20
 71e:	33 27       	eor	r19, r19
 720:	a0 0d       	add	r26, r0
 722:	61 1d       	adc	r22, r1
 724:	23 1f       	adc	r18, r19
 726:	84 9f       	mul	r24, r20
 728:	60 0d       	add	r22, r0
 72a:	21 1d       	adc	r18, r1
 72c:	82 2f       	mov	r24, r18
 72e:	76 2f       	mov	r23, r22
 730:	6a 2f       	mov	r22, r26
 732:	11 24       	eor	r1, r1
 734:	9f 57       	subi	r25, 0x7F	; 127
 736:	50 40       	sbci	r21, 0x00	; 0
 738:	8a f0       	brmi	.+34     	; 0x75c <__mulsf3_pse+0x84>
 73a:	e1 f0       	breq	.+56     	; 0x774 <__mulsf3_pse+0x9c>
 73c:	88 23       	and	r24, r24
 73e:	4a f0       	brmi	.+18     	; 0x752 <__mulsf3_pse+0x7a>
 740:	ee 0f       	add	r30, r30
 742:	ff 1f       	adc	r31, r31
 744:	bb 1f       	adc	r27, r27
 746:	66 1f       	adc	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	88 1f       	adc	r24, r24
 74c:	91 50       	subi	r25, 0x01	; 1
 74e:	50 40       	sbci	r21, 0x00	; 0
 750:	a9 f7       	brne	.-22     	; 0x73c <__mulsf3_pse+0x64>
 752:	9e 3f       	cpi	r25, 0xFE	; 254
 754:	51 05       	cpc	r21, r1
 756:	70 f0       	brcs	.+28     	; 0x774 <__mulsf3_pse+0x9c>
 758:	14 c0       	rjmp	.+40     	; 0x782 <__fp_inf>
 75a:	aa cf       	rjmp	.-172    	; 0x6b0 <__fp_szero>
 75c:	5f 3f       	cpi	r21, 0xFF	; 255
 75e:	ec f3       	brlt	.-6      	; 0x75a <__mulsf3_pse+0x82>
 760:	98 3e       	cpi	r25, 0xE8	; 232
 762:	dc f3       	brlt	.-10     	; 0x75a <__mulsf3_pse+0x82>
 764:	86 95       	lsr	r24
 766:	77 95       	ror	r23
 768:	67 95       	ror	r22
 76a:	b7 95       	ror	r27
 76c:	f7 95       	ror	r31
 76e:	e7 95       	ror	r30
 770:	9f 5f       	subi	r25, 0xFF	; 255
 772:	c1 f7       	brne	.-16     	; 0x764 <__mulsf3_pse+0x8c>
 774:	fe 2b       	or	r31, r30
 776:	88 0f       	add	r24, r24
 778:	91 1d       	adc	r25, r1
 77a:	96 95       	lsr	r25
 77c:	87 95       	ror	r24
 77e:	97 f9       	bld	r25, 7
 780:	08 95       	ret

00000782 <__fp_inf>:
 782:	97 f9       	bld	r25, 7
 784:	9f 67       	ori	r25, 0x7F	; 127
 786:	80 e8       	ldi	r24, 0x80	; 128
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	08 95       	ret

0000078e <__fp_nan>:
 78e:	9f ef       	ldi	r25, 0xFF	; 255
 790:	80 ec       	ldi	r24, 0xC0	; 192
 792:	08 95       	ret

00000794 <__fp_pscA>:
 794:	00 24       	eor	r0, r0
 796:	0a 94       	dec	r0
 798:	16 16       	cp	r1, r22
 79a:	17 06       	cpc	r1, r23
 79c:	18 06       	cpc	r1, r24
 79e:	09 06       	cpc	r0, r25
 7a0:	08 95       	ret

000007a2 <__fp_pscB>:
 7a2:	00 24       	eor	r0, r0
 7a4:	0a 94       	dec	r0
 7a6:	12 16       	cp	r1, r18
 7a8:	13 06       	cpc	r1, r19
 7aa:	14 06       	cpc	r1, r20
 7ac:	05 06       	cpc	r0, r21
 7ae:	08 95       	ret

000007b0 <__fp_round>:
 7b0:	09 2e       	mov	r0, r25
 7b2:	03 94       	inc	r0
 7b4:	00 0c       	add	r0, r0
 7b6:	11 f4       	brne	.+4      	; 0x7bc <__fp_round+0xc>
 7b8:	88 23       	and	r24, r24
 7ba:	52 f0       	brmi	.+20     	; 0x7d0 <__fp_round+0x20>
 7bc:	bb 0f       	add	r27, r27
 7be:	40 f4       	brcc	.+16     	; 0x7d0 <__fp_round+0x20>
 7c0:	bf 2b       	or	r27, r31
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__fp_round+0x18>
 7c4:	60 ff       	sbrs	r22, 0
 7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <__fp_round+0x20>
 7c8:	6f 5f       	subi	r22, 0xFF	; 255
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	08 95       	ret

000007d2 <__umulhisi3>:
 7d2:	a2 9f       	mul	r26, r18
 7d4:	b0 01       	movw	r22, r0
 7d6:	b3 9f       	mul	r27, r19
 7d8:	c0 01       	movw	r24, r0
 7da:	a3 9f       	mul	r26, r19
 7dc:	70 0d       	add	r23, r0
 7de:	81 1d       	adc	r24, r1
 7e0:	11 24       	eor	r1, r1
 7e2:	91 1d       	adc	r25, r1
 7e4:	b2 9f       	mul	r27, r18
 7e6:	70 0d       	add	r23, r0
 7e8:	81 1d       	adc	r24, r1
 7ea:	11 24       	eor	r1, r1
 7ec:	91 1d       	adc	r25, r1
 7ee:	08 95       	ret

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
