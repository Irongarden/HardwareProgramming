
assignment_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000782  00000816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800210  00800210  00000826  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001152  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee4  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000815  00000000  00000000  000029a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000031bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066c  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000474  00000000  00000000  00003a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003e8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	0d c2       	rjmp	.+1050   	; 0x490 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	f7 c0       	rjmp	.+494    	; 0x298 <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e8       	ldi	r30, 0x82	; 130
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 31       	cpi	r26, 0x14	; 20
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	f8 d1       	rcall	.+1008   	; 0x510 <main>
 120:	2e c3       	rjmp	.+1628   	; 0x77e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <printint_4u>:
	PORTF |= _BV(D1) | _BV(D2) | _BV(D3)| _BV(D4);
}

uint8_t getValue(uint8_t val){
	
}
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ac 01       	movw	r20, r24
 12a:	9c 01       	movw	r18, r24
 12c:	ad ec       	ldi	r26, 0xCD	; 205
 12e:	bc ec       	ldi	r27, 0xCC	; 204
 130:	17 d3       	rcall	.+1582   	; 0x760 <__umulhisi3>
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	96 95       	lsr	r25
 138:	87 95       	ror	r24
 13a:	96 95       	lsr	r25
 13c:	87 95       	ror	r24
 13e:	9c 01       	movw	r18, r24
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	82 0f       	add	r24, r18
 152:	93 1f       	adc	r25, r19
 154:	9a 01       	movw	r18, r20
 156:	28 1b       	sub	r18, r24
 158:	39 0b       	sbc	r19, r25
 15a:	e0 e0       	ldi	r30, 0x00	; 0
 15c:	f2 e0       	ldi	r31, 0x02	; 2
 15e:	23 83       	std	Z+3, r18	; 0x03
 160:	9a 01       	movw	r18, r20
 162:	fe d2       	rcall	.+1532   	; 0x760 <__umulhisi3>
 164:	ec 01       	movw	r28, r24
 166:	d6 95       	lsr	r29
 168:	c7 95       	ror	r28
 16a:	d6 95       	lsr	r29
 16c:	c7 95       	ror	r28
 16e:	d6 95       	lsr	r29
 170:	c7 95       	ror	r28
 172:	9e 01       	movw	r18, r28
 174:	f5 d2       	rcall	.+1514   	; 0x760 <__umulhisi3>
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	9c 01       	movw	r18, r24
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	82 0f       	add	r24, r18
 196:	93 1f       	adc	r25, r19
 198:	9e 01       	movw	r18, r28
 19a:	28 1b       	sub	r18, r24
 19c:	39 0b       	sbc	r19, r25
 19e:	22 83       	std	Z+2, r18	; 0x02
 1a0:	9a 01       	movw	r18, r20
 1a2:	36 95       	lsr	r19
 1a4:	27 95       	ror	r18
 1a6:	36 95       	lsr	r19
 1a8:	27 95       	ror	r18
 1aa:	ab e7       	ldi	r26, 0x7B	; 123
 1ac:	b4 e1       	ldi	r27, 0x14	; 20
 1ae:	d8 d2       	rcall	.+1456   	; 0x760 <__umulhisi3>
 1b0:	ec 01       	movw	r28, r24
 1b2:	d6 95       	lsr	r29
 1b4:	c7 95       	ror	r28
 1b6:	9e 01       	movw	r18, r28
 1b8:	ad ec       	ldi	r26, 0xCD	; 205
 1ba:	bc ec       	ldi	r27, 0xCC	; 204
 1bc:	d1 d2       	rcall	.+1442   	; 0x760 <__umulhisi3>
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	96 95       	lsr	r25
 1c4:	87 95       	ror	r24
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	9c 01       	movw	r18, r24
 1cc:	22 0f       	add	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	82 0f       	add	r24, r18
 1de:	93 1f       	adc	r25, r19
 1e0:	9e 01       	movw	r18, r28
 1e2:	28 1b       	sub	r18, r24
 1e4:	39 0b       	sbc	r19, r25
 1e6:	21 83       	std	Z+1, r18	; 0x01
 1e8:	9a 01       	movw	r18, r20
 1ea:	36 95       	lsr	r19
 1ec:	27 95       	ror	r18
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	a5 ec       	ldi	r26, 0xC5	; 197
 1f8:	b0 e2       	ldi	r27, 0x20	; 32
 1fa:	b2 d2       	rcall	.+1380   	; 0x760 <__umulhisi3>
 1fc:	ac 01       	movw	r20, r24
 1fe:	52 95       	swap	r21
 200:	42 95       	swap	r20
 202:	4f 70       	andi	r20, 0x0F	; 15
 204:	45 27       	eor	r20, r21
 206:	5f 70       	andi	r21, 0x0F	; 15
 208:	45 27       	eor	r20, r21
 20a:	9a 01       	movw	r18, r20
 20c:	ad ec       	ldi	r26, 0xCD	; 205
 20e:	bc ec       	ldi	r27, 0xCC	; 204
 210:	a7 d2       	rcall	.+1358   	; 0x760 <__umulhisi3>
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	9c 01       	movw	r18, r24
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	82 0f       	add	r24, r18
 232:	93 1f       	adc	r25, r19
 234:	9a 01       	movw	r18, r20
 236:	28 1b       	sub	r18, r24
 238:	39 0b       	sbc	r19, r25
 23a:	20 83       	st	Z, r18
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <setrefreshrate>:
 242:	e0 ea       	ldi	r30, 0xA0	; 160
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
 24c:	e1 ea       	ldi	r30, 0xA1	; 161
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	82 60       	ori	r24, 0x02	; 2
 254:	80 83       	st	Z, r24
 256:	80 81       	ld	r24, Z
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	80 83       	st	Z, r24
 25c:	e2 e7       	ldi	r30, 0x72	; 114
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	82 60       	ori	r24, 0x02	; 2
 264:	80 83       	st	Z, r24
 266:	86 e4       	ldi	r24, 0x46	; 70
 268:	90 e1       	ldi	r25, 0x10	; 16
 26a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 26e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 272:	08 95       	ret

00000274 <init_display>:
 274:	80 b3       	in	r24, 0x10	; 16
 276:	8f 60       	ori	r24, 0x0F	; 15
 278:	80 bb       	out	0x10, r24	; 16
 27a:	84 b1       	in	r24, 0x04	; 4
 27c:	84 60       	ori	r24, 0x04	; 4
 27e:	84 b9       	out	0x04, r24	; 4
 280:	84 b1       	in	r24, 0x04	; 4
 282:	82 60       	ori	r24, 0x02	; 2
 284:	84 b9       	out	0x04, r24	; 4
 286:	84 b1       	in	r24, 0x04	; 4
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	84 b9       	out	0x04, r24	; 4
 28c:	da cf       	rjmp	.-76     	; 0x242 <setrefreshrate>
 28e:	08 95       	ret

00000290 <cleardisplay>:
 290:	81 b3       	in	r24, 0x11	; 17
 292:	8f 60       	ori	r24, 0x0F	; 15
 294:	81 bb       	out	0x11, r24	; 17
 296:	08 95       	ret

00000298 <__vector_42>:

ISR(TIMER4_COMPA_vect){	
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	0b b6       	in	r0, 0x3b	; 59
 2a4:	0f 92       	push	r0
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	for(uint8_t i =0; i<8;i++){
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	48 c0       	rjmp	.+144    	; 0x352 <__vector_42+0xba>
		uint8_t val = digits[segment];
 2c2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
 2c6:	48 2f       	mov	r20, r24
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	fa 01       	movw	r30, r20
 2cc:	e0 50       	subi	r30, 0x00	; 0
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	e0 81       	ld	r30, Z
		
		if (segment == 0 && val == 0){
 2d2:	81 11       	cpse	r24, r1
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_42+0x42>
 2d6:	ee 23       	and	r30, r30
 2d8:	e1 f0       	breq	.+56     	; 0x312 <__vector_42+0x7a>
			val = 10;
		}
		else if (segment == 1 && val == 0){
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	49 f4       	brne	.+18     	; 0x2f0 <__vector_42+0x58>
 2de:	e1 11       	cpse	r30, r1
 2e0:	07 c0       	rjmp	.+14     	; 0x2f0 <__vector_42+0x58>
			if (digits[segment - 1] == 0) {
 2e2:	da 01       	movw	r26, r20
 2e4:	a1 50       	subi	r26, 0x01	; 1
 2e6:	be 4f       	sbci	r27, 0xFE	; 254
 2e8:	8c 91       	ld	r24, X
 2ea:	88 23       	and	r24, r24
 2ec:	a1 f0       	breq	.+40     	; 0x316 <__vector_42+0x7e>
 2ee:	16 c0       	rjmp	.+44     	; 0x31c <__vector_42+0x84>
				val = 10;
			}
		} else if ( segment == 2 && val == 0){
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	a1 f4       	brne	.+40     	; 0x31c <__vector_42+0x84>
 2f4:	e1 11       	cpse	r30, r1
 2f6:	12 c0       	rjmp	.+36     	; 0x31c <__vector_42+0x84>
			if (digits[segment -1] == 0 && digits[segment -2] == 0){
 2f8:	da 01       	movw	r26, r20
 2fa:	a1 50       	subi	r26, 0x01	; 1
 2fc:	be 4f       	sbci	r27, 0xFE	; 254
 2fe:	8c 91       	ld	r24, X
 300:	81 11       	cpse	r24, r1
 302:	0c c0       	rjmp	.+24     	; 0x31c <__vector_42+0x84>
 304:	da 01       	movw	r26, r20
 306:	a2 50       	subi	r26, 0x02	; 2
 308:	be 4f       	sbci	r27, 0xFE	; 254
 30a:	8c 91       	ld	r24, X
 30c:	88 23       	and	r24, r24
 30e:	29 f0       	breq	.+10     	; 0x31a <__vector_42+0x82>
 310:	05 c0       	rjmp	.+10     	; 0x31c <__vector_42+0x84>
ISR(TIMER4_COMPA_vect){	
	for(uint8_t i =0; i<8;i++){
		uint8_t val = digits[segment];
		
		if (segment == 0 && val == 0){
			val = 10;
 312:	ea e0       	ldi	r30, 0x0A	; 10
 314:	03 c0       	rjmp	.+6      	; 0x31c <__vector_42+0x84>
		}
		else if (segment == 1 && val == 0){
			if (digits[segment - 1] == 0) {
				val = 10;
 316:	ea e0       	ldi	r30, 0x0A	; 10
 318:	01 c0       	rjmp	.+2      	; 0x31c <__vector_42+0x84>
			}
		} else if ( segment == 2 && val == 0){
			if (digits[segment -1] == 0 && digits[segment -2] == 0){
				val = 10;
 31a:	ea e0       	ldi	r30, 0x0A	; 10
			}
		}
		
	
		// Convert digit to display code.
		if(segValues[val]>>i & 1){
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ec 5f       	subi	r30, 0xFC	; 252
 320:	fd 4f       	sbci	r31, 0xFD	; 253
 322:	80 81       	ld	r24, Z
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 2e       	mov	r0, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <__vector_42+0x96>
 32a:	95 95       	asr	r25
 32c:	87 95       	ror	r24
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <__vector_42+0x92>
 332:	80 ff       	sbrs	r24, 0
 334:	04 c0       	rjmp	.+8      	; 0x33e <__vector_42+0xa6>
			PORTB |=_BV(SI);
 336:	85 b1       	in	r24, 0x05	; 5
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	85 b9       	out	0x05, r24	; 5
 33c:	03 c0       	rjmp	.+6      	; 0x344 <__vector_42+0xac>
			}else{
			PORTB &= ~_BV(SI);
 33e:	85 b1       	in	r24, 0x05	; 5
 340:	8b 7f       	andi	r24, 0xFB	; 251
 342:	85 b9       	out	0x05, r24	; 5
		}
		PORTB |= _BV(SCK);
 344:	85 b1       	in	r24, 0x05	; 5
 346:	82 60       	ori	r24, 0x02	; 2
 348:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~_BV(SCK);
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	8d 7f       	andi	r24, 0xFD	; 253
 34e:	85 b9       	out	0x05, r24	; 5
uint8_t getValue(uint8_t val){
	
}

ISR(TIMER4_COMPA_vect){	
	for(uint8_t i =0; i<8;i++){
 350:	2f 5f       	subi	r18, 0xFF	; 255
 352:	28 30       	cpi	r18, 0x08	; 8
 354:	08 f4       	brcc	.+2      	; 0x358 <__vector_42+0xc0>
 356:	b5 cf       	rjmp	.-150    	; 0x2c2 <__vector_42+0x2a>
		}
		PORTB |= _BV(SCK);
		PORTB &= ~_BV(SCK);
	}
		
	cleardisplay();
 358:	9b df       	rcall	.-202    	; 0x290 <cleardisplay>
		
	PORTB |= _BV(RCK);
 35a:	85 b1       	in	r24, 0x05	; 5
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~_BV(RCK);
 360:	85 b1       	in	r24, 0x05	; 5
 362:	8e 7f       	andi	r24, 0xFE	; 254
 364:	85 b9       	out	0x05, r24	; 5
		
		
	PORTF &= ~(_BV(segment));
 366:	21 b3       	in	r18, 0x11	; 17
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	00 90 10 02 	lds	r0, 0x0210	; 0x800210 <__data_end>
 370:	02 c0       	rjmp	.+4      	; 0x376 <__vector_42+0xde>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <__vector_42+0xda>
 37a:	80 95       	com	r24
 37c:	82 23       	and	r24, r18
 37e:	81 bb       	out	0x11, r24	; 17
	segment++;
 380:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
		
	if(segment==4){
 38a:	84 30       	cpi	r24, 0x04	; 4
 38c:	11 f4       	brne	.+4      	; 0x392 <__vector_42+0xfa>
		segment = 0;
 38e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <__data_end>
	}
}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0b be       	out	0x3b, r0	; 59
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <init_leds>:
#include "../include/led.h"

void init_leds()
{
	// set pin direction to output
	DDRA = 0xFF;
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	81 b9       	out	0x01, r24	; 1
	// turn all leds off - Active low
	PORTA = 0xFF;
 3bc:	82 b9       	out	0x02, r24	; 2
 3be:	08 95       	ret

000003c0 <mv_to_c>:
static void (*cb)(uint8_t deg_c) = 0;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
 3c0:	9c 01       	movw	r18, r24
 3c2:	24 5f       	subi	r18, 0xF4	; 244
 3c4:	31 40       	sbci	r19, 0x01	; 1
 3c6:	ad ec       	ldi	r26, 0xCD	; 205
 3c8:	bc ec       	ldi	r27, 0xCC	; 204
 3ca:	ca d1       	rcall	.+916    	; 0x760 <__umulhisi3>
 3cc:	96 95       	lsr	r25
 3ce:	87 95       	ror	r24
 3d0:	96 95       	lsr	r25
 3d2:	87 95       	ror	r24
 3d4:	96 95       	lsr	r25
 3d6:	87 95       	ror	r24
}
 3d8:	08 95       	ret

000003da <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
 3da:	bc 01       	movw	r22, r24
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	ce d0       	rcall	.+412    	; 0x57e <__floatunsisf>
 3e2:	2a e1       	ldi	r18, 0x1A	; 26
 3e4:	37 e6       	ldi	r19, 0x67	; 103
 3e6:	4c e9       	ldi	r20, 0x9C	; 156
 3e8:	50 e4       	ldi	r21, 0x40	; 64
 3ea:	2f d1       	rcall	.+606    	; 0x64a <__mulsf3>
 3ec:	9c d0       	rcall	.+312    	; 0x526 <__fixunssfsi>
}
 3ee:	cb 01       	movw	r24, r22
 3f0:	08 95       	ret

000003f2 <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
 3f2:	9c 01       	movw	r18, r24
	// **** General config *****
	
	// Set PK7 direction as input (TMP36 Vout)
	DDRK &= ~_BV(v_out);
 3f4:	e7 e0       	ldi	r30, 0x07	; 7
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	80 81       	ld	r24, Z
 3fa:	8f 77       	andi	r24, 0x7F	; 127
 3fc:	80 83       	st	Z, r24
	
	// Set PG0 direction as output (TMP36 Enable)
	DDRG |= _BV(enable);  
 3fe:	83 b3       	in	r24, 0x13	; 19
 400:	81 60       	ori	r24, 0x01	; 1
 402:	83 bb       	out	0x13, r24	; 19

	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
 404:	ec e7       	ldi	r30, 0x7C	; 124
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	80 64       	ori	r24, 0x40	; 64
 40c:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
 40e:	80 81       	ld	r24, Z
 410:	87 60       	ori	r24, 0x07	; 7
 412:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 414:	ab e7       	ldi	r26, 0x7B	; 123
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	8c 91       	ld	r24, X
 41a:	88 60       	ori	r24, 0x08	; 8
 41c:	8c 93       	st	X, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
 41e:	ea e7       	ldi	r30, 0x7A	; 122
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	86 60       	ori	r24, 0x06	; 6
 426:	80 83       	st	Z, r24

	// Enable ADC  
	ADCSRA |= _BV(ADEN);
 428:	80 81       	ld	r24, Z
 42a:	80 68       	ori	r24, 0x80	; 128
 42c:	80 83       	st	Z, r24
	// ****** General config end *************
	
	// ****** Interrupt and auto trigger ****
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
 42e:	80 81       	ld	r24, Z
 430:	88 60       	ori	r24, 0x08	; 8
 432:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
 434:	80 81       	ld	r24, Z
 436:	80 62       	ori	r24, 0x20	; 32
 438:	80 83       	st	Z, r24
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 43a:	8c 91       	ld	r24, X
 43c:	85 60       	ori	r24, 0x05	; 5
 43e:	8c 93       	st	X, r24
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1A |= _BV(WGM12);
 440:	e0 e8       	ldi	r30, 0x80	; 128
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	90 81       	ld	r25, Z
 446:	98 60       	ori	r25, 0x08	; 8
 448:	90 83       	st	Z, r25
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
 44a:	90 81       	ld	r25, Z
 44c:	90 61       	ori	r25, 0x10	; 16
 44e:	90 83       	st	Z, r25
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
 450:	e1 e8       	ldi	r30, 0x81	; 129
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	90 81       	ld	r25, Z
 456:	94 60       	ori	r25, 0x04	; 4
 458:	90 83       	st	Z, r25
	
	// Enable Timer Interrupt
	TIMSK1 |= _BV(OCIE1B);
 45a:	ef e6       	ldi	r30, 0x6F	; 111
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	90 81       	ld	r25, Z
 460:	94 60       	ori	r25, 0x04	; 4
 462:	90 83       	st	Z, r25

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
 464:	81 e1       	ldi	r24, 0x11	; 17
 466:	9a e7       	ldi	r25, 0x7A	; 122
 468:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 46c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
 470:	21 15       	cp	r18, r1
 472:	31 05       	cpc	r19, r1
 474:	21 f0       	breq	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		cb = callback;
 476:	30 93 12 02 	sts	0x0212, r19	; 0x800212 <cb+0x1>
 47a:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <cb>
	
	// Enable TMP36
	PORTG |= _BV(enable);
 47e:	84 b3       	in	r24, 0x14	; 20
 480:	81 60       	ori	r24, 0x01	; 1
 482:	84 bb       	out	0x14, r24	; 20
	
	// Start Conversion.
	ADCSRA |= _BV(ADSC);
 484:	ea e7       	ldi	r30, 0x7A	; 122
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	80 64       	ori	r24, 0x40	; 64
 48c:	80 83       	st	Z, r24
 48e:	08 95       	ret

00000490 <__vector_29>:
}

// AD Interrupt callback.
ISR(ADC_vect)
{
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	0b b6       	in	r0, 0x3b	; 59
 49c:	0f 92       	push	r0
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	ef 93       	push	r30
 4b8:	ff 93       	push	r31
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
 4ba:	c0 91 11 02 	lds	r28, 0x0211	; 0x800211 <cb>
 4be:	d0 91 12 02 	lds	r29, 0x0212	; 0x800212 <cb+0x1>
 4c2:	20 97       	sbiw	r28, 0x00	; 0
 4c4:	41 f0       	breq	.+16     	; 0x4d6 <__vector_29+0x46>
		cb(mv_to_c(adc_to_mv(ADC)));
 4c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 4ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 4ce:	85 df       	rcall	.-246    	; 0x3da <adc_to_mv>
 4d0:	77 df       	rcall	.-274    	; 0x3c0 <mv_to_c>
 4d2:	fe 01       	movw	r30, r28
 4d4:	19 95       	eicall
	
	// ADC interrupt flag is high!
	// Clear ADC interrupt flag.
	ADCSRA |= ~_BV(ADIF);
 4d6:	ea e7       	ldi	r30, 0x7A	; 122
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	8f 6e       	ori	r24, 0xEF	; 239
 4de:	80 83       	st	Z, r24
 4e0:	ff 91       	pop	r31
 4e2:	ef 91       	pop	r30
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	7f 91       	pop	r23
 4f2:	6f 91       	pop	r22
 4f4:	5f 91       	pop	r21
 4f6:	4f 91       	pop	r20
 4f8:	3f 91       	pop	r19
 4fa:	2f 91       	pop	r18
 4fc:	0f 90       	pop	r0
 4fe:	0b be       	out	0x3b, r0	; 59
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <new_measurement>:
#define offset 17
static uint8_t temp = 0;

static void new_measurement(uint8_t deg_c)
{
	temp = deg_c;
 50a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <temp>
 50e:	08 95       	ret

00000510 <main>:
}


int main(void)
{
	init_leds();
 510:	53 df       	rcall	.-346    	; 0x3b8 <init_leds>
	tmp36_init(new_measurement);
 512:	85 e8       	ldi	r24, 0x85	; 133
 514:	92 e0       	ldi	r25, 0x02	; 2
	init_display();
 516:	6d df       	rcall	.-294    	; 0x3f2 <tmp36_init>
 518:	ad de       	rcall	.-678    	; 0x274 <init_display>
	
	// Enable interrupt globally.
	sei();
 51a:	78 94       	sei
	
    while (1) 
    {
		printint_4u(temp);
 51c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <temp>
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	00 de       	rcall	.-1024   	; 0x124 <printint_4u>
 524:	fb cf       	rjmp	.-10     	; 0x51c <main+0xc>

00000526 <__fixunssfsi>:
 526:	70 d0       	rcall	.+224    	; 0x608 <__fp_splitA>
 528:	88 f0       	brcs	.+34     	; 0x54c <__fixunssfsi+0x26>
 52a:	9f 57       	subi	r25, 0x7F	; 127
 52c:	90 f0       	brcs	.+36     	; 0x552 <__fixunssfsi+0x2c>
 52e:	b9 2f       	mov	r27, r25
 530:	99 27       	eor	r25, r25
 532:	b7 51       	subi	r27, 0x17	; 23
 534:	a0 f0       	brcs	.+40     	; 0x55e <__fixunssfsi+0x38>
 536:	d1 f0       	breq	.+52     	; 0x56c <__fixunssfsi+0x46>
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	88 1f       	adc	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	1a f0       	brmi	.+6      	; 0x548 <__fixunssfsi+0x22>
 542:	ba 95       	dec	r27
 544:	c9 f7       	brne	.-14     	; 0x538 <__fixunssfsi+0x12>
 546:	12 c0       	rjmp	.+36     	; 0x56c <__fixunssfsi+0x46>
 548:	b1 30       	cpi	r27, 0x01	; 1
 54a:	81 f0       	breq	.+32     	; 0x56c <__fixunssfsi+0x46>
 54c:	77 d0       	rcall	.+238    	; 0x63c <__fp_zero>
 54e:	b1 e0       	ldi	r27, 0x01	; 1
 550:	08 95       	ret
 552:	74 c0       	rjmp	.+232    	; 0x63c <__fp_zero>
 554:	67 2f       	mov	r22, r23
 556:	78 2f       	mov	r23, r24
 558:	88 27       	eor	r24, r24
 55a:	b8 5f       	subi	r27, 0xF8	; 248
 55c:	39 f0       	breq	.+14     	; 0x56c <__fixunssfsi+0x46>
 55e:	b9 3f       	cpi	r27, 0xF9	; 249
 560:	cc f3       	brlt	.-14     	; 0x554 <__fixunssfsi+0x2e>
 562:	86 95       	lsr	r24
 564:	77 95       	ror	r23
 566:	67 95       	ror	r22
 568:	b3 95       	inc	r27
 56a:	d9 f7       	brne	.-10     	; 0x562 <__fixunssfsi+0x3c>
 56c:	3e f4       	brtc	.+14     	; 0x57c <__fixunssfsi+0x56>
 56e:	90 95       	com	r25
 570:	80 95       	com	r24
 572:	70 95       	com	r23
 574:	61 95       	neg	r22
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	8f 4f       	sbci	r24, 0xFF	; 255
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	08 95       	ret

0000057e <__floatunsisf>:
 57e:	e8 94       	clt
 580:	09 c0       	rjmp	.+18     	; 0x594 <__floatsisf+0x12>

00000582 <__floatsisf>:
 582:	97 fb       	bst	r25, 7
 584:	3e f4       	brtc	.+14     	; 0x594 <__floatsisf+0x12>
 586:	90 95       	com	r25
 588:	80 95       	com	r24
 58a:	70 95       	com	r23
 58c:	61 95       	neg	r22
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	99 23       	and	r25, r25
 596:	a9 f0       	breq	.+42     	; 0x5c2 <__floatsisf+0x40>
 598:	f9 2f       	mov	r31, r25
 59a:	96 e9       	ldi	r25, 0x96	; 150
 59c:	bb 27       	eor	r27, r27
 59e:	93 95       	inc	r25
 5a0:	f6 95       	lsr	r31
 5a2:	87 95       	ror	r24
 5a4:	77 95       	ror	r23
 5a6:	67 95       	ror	r22
 5a8:	b7 95       	ror	r27
 5aa:	f1 11       	cpse	r31, r1
 5ac:	f8 cf       	rjmp	.-16     	; 0x59e <__floatsisf+0x1c>
 5ae:	fa f4       	brpl	.+62     	; 0x5ee <__floatsisf+0x6c>
 5b0:	bb 0f       	add	r27, r27
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <__floatsisf+0x36>
 5b4:	60 ff       	sbrs	r22, 0
 5b6:	1b c0       	rjmp	.+54     	; 0x5ee <__floatsisf+0x6c>
 5b8:	6f 5f       	subi	r22, 0xFF	; 255
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	16 c0       	rjmp	.+44     	; 0x5ee <__floatsisf+0x6c>
 5c2:	88 23       	and	r24, r24
 5c4:	11 f0       	breq	.+4      	; 0x5ca <__floatsisf+0x48>
 5c6:	96 e9       	ldi	r25, 0x96	; 150
 5c8:	11 c0       	rjmp	.+34     	; 0x5ec <__floatsisf+0x6a>
 5ca:	77 23       	and	r23, r23
 5cc:	21 f0       	breq	.+8      	; 0x5d6 <__floatsisf+0x54>
 5ce:	9e e8       	ldi	r25, 0x8E	; 142
 5d0:	87 2f       	mov	r24, r23
 5d2:	76 2f       	mov	r23, r22
 5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <__floatsisf+0x5e>
 5d6:	66 23       	and	r22, r22
 5d8:	71 f0       	breq	.+28     	; 0x5f6 <__floatsisf+0x74>
 5da:	96 e8       	ldi	r25, 0x86	; 134
 5dc:	86 2f       	mov	r24, r22
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	2a f0       	brmi	.+10     	; 0x5ee <__floatsisf+0x6c>
 5e4:	9a 95       	dec	r25
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	88 1f       	adc	r24, r24
 5ec:	da f7       	brpl	.-10     	; 0x5e4 <__floatsisf+0x62>
 5ee:	88 0f       	add	r24, r24
 5f0:	96 95       	lsr	r25
 5f2:	87 95       	ror	r24
 5f4:	97 f9       	bld	r25, 7
 5f6:	08 95       	ret

000005f8 <__fp_split3>:
 5f8:	57 fd       	sbrc	r21, 7
 5fa:	90 58       	subi	r25, 0x80	; 128
 5fc:	44 0f       	add	r20, r20
 5fe:	55 1f       	adc	r21, r21
 600:	59 f0       	breq	.+22     	; 0x618 <__fp_splitA+0x10>
 602:	5f 3f       	cpi	r21, 0xFF	; 255
 604:	71 f0       	breq	.+28     	; 0x622 <__fp_splitA+0x1a>
 606:	47 95       	ror	r20

00000608 <__fp_splitA>:
 608:	88 0f       	add	r24, r24
 60a:	97 fb       	bst	r25, 7
 60c:	99 1f       	adc	r25, r25
 60e:	61 f0       	breq	.+24     	; 0x628 <__fp_splitA+0x20>
 610:	9f 3f       	cpi	r25, 0xFF	; 255
 612:	79 f0       	breq	.+30     	; 0x632 <__fp_splitA+0x2a>
 614:	87 95       	ror	r24
 616:	08 95       	ret
 618:	12 16       	cp	r1, r18
 61a:	13 06       	cpc	r1, r19
 61c:	14 06       	cpc	r1, r20
 61e:	55 1f       	adc	r21, r21
 620:	f2 cf       	rjmp	.-28     	; 0x606 <__fp_split3+0xe>
 622:	46 95       	lsr	r20
 624:	f1 df       	rcall	.-30     	; 0x608 <__fp_splitA>
 626:	08 c0       	rjmp	.+16     	; 0x638 <__fp_splitA+0x30>
 628:	16 16       	cp	r1, r22
 62a:	17 06       	cpc	r1, r23
 62c:	18 06       	cpc	r1, r24
 62e:	99 1f       	adc	r25, r25
 630:	f1 cf       	rjmp	.-30     	; 0x614 <__fp_splitA+0xc>
 632:	86 95       	lsr	r24
 634:	71 05       	cpc	r23, r1
 636:	61 05       	cpc	r22, r1
 638:	08 94       	sec
 63a:	08 95       	ret

0000063c <__fp_zero>:
 63c:	e8 94       	clt

0000063e <__fp_szero>:
 63e:	bb 27       	eor	r27, r27
 640:	66 27       	eor	r22, r22
 642:	77 27       	eor	r23, r23
 644:	cb 01       	movw	r24, r22
 646:	97 f9       	bld	r25, 7
 648:	08 95       	ret

0000064a <__mulsf3>:
 64a:	0b d0       	rcall	.+22     	; 0x662 <__mulsf3x>
 64c:	78 c0       	rjmp	.+240    	; 0x73e <__fp_round>
 64e:	69 d0       	rcall	.+210    	; 0x722 <__fp_pscA>
 650:	28 f0       	brcs	.+10     	; 0x65c <__mulsf3+0x12>
 652:	6e d0       	rcall	.+220    	; 0x730 <__fp_pscB>
 654:	18 f0       	brcs	.+6      	; 0x65c <__mulsf3+0x12>
 656:	95 23       	and	r25, r21
 658:	09 f0       	breq	.+2      	; 0x65c <__mulsf3+0x12>
 65a:	5a c0       	rjmp	.+180    	; 0x710 <__fp_inf>
 65c:	5f c0       	rjmp	.+190    	; 0x71c <__fp_nan>
 65e:	11 24       	eor	r1, r1
 660:	ee cf       	rjmp	.-36     	; 0x63e <__fp_szero>

00000662 <__mulsf3x>:
 662:	ca df       	rcall	.-108    	; 0x5f8 <__fp_split3>
 664:	a0 f3       	brcs	.-24     	; 0x64e <__mulsf3+0x4>

00000666 <__mulsf3_pse>:
 666:	95 9f       	mul	r25, r21
 668:	d1 f3       	breq	.-12     	; 0x65e <__mulsf3+0x14>
 66a:	95 0f       	add	r25, r21
 66c:	50 e0       	ldi	r21, 0x00	; 0
 66e:	55 1f       	adc	r21, r21
 670:	62 9f       	mul	r22, r18
 672:	f0 01       	movw	r30, r0
 674:	72 9f       	mul	r23, r18
 676:	bb 27       	eor	r27, r27
 678:	f0 0d       	add	r31, r0
 67a:	b1 1d       	adc	r27, r1
 67c:	63 9f       	mul	r22, r19
 67e:	aa 27       	eor	r26, r26
 680:	f0 0d       	add	r31, r0
 682:	b1 1d       	adc	r27, r1
 684:	aa 1f       	adc	r26, r26
 686:	64 9f       	mul	r22, r20
 688:	66 27       	eor	r22, r22
 68a:	b0 0d       	add	r27, r0
 68c:	a1 1d       	adc	r26, r1
 68e:	66 1f       	adc	r22, r22
 690:	82 9f       	mul	r24, r18
 692:	22 27       	eor	r18, r18
 694:	b0 0d       	add	r27, r0
 696:	a1 1d       	adc	r26, r1
 698:	62 1f       	adc	r22, r18
 69a:	73 9f       	mul	r23, r19
 69c:	b0 0d       	add	r27, r0
 69e:	a1 1d       	adc	r26, r1
 6a0:	62 1f       	adc	r22, r18
 6a2:	83 9f       	mul	r24, r19
 6a4:	a0 0d       	add	r26, r0
 6a6:	61 1d       	adc	r22, r1
 6a8:	22 1f       	adc	r18, r18
 6aa:	74 9f       	mul	r23, r20
 6ac:	33 27       	eor	r19, r19
 6ae:	a0 0d       	add	r26, r0
 6b0:	61 1d       	adc	r22, r1
 6b2:	23 1f       	adc	r18, r19
 6b4:	84 9f       	mul	r24, r20
 6b6:	60 0d       	add	r22, r0
 6b8:	21 1d       	adc	r18, r1
 6ba:	82 2f       	mov	r24, r18
 6bc:	76 2f       	mov	r23, r22
 6be:	6a 2f       	mov	r22, r26
 6c0:	11 24       	eor	r1, r1
 6c2:	9f 57       	subi	r25, 0x7F	; 127
 6c4:	50 40       	sbci	r21, 0x00	; 0
 6c6:	8a f0       	brmi	.+34     	; 0x6ea <__mulsf3_pse+0x84>
 6c8:	e1 f0       	breq	.+56     	; 0x702 <__mulsf3_pse+0x9c>
 6ca:	88 23       	and	r24, r24
 6cc:	4a f0       	brmi	.+18     	; 0x6e0 <__mulsf3_pse+0x7a>
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	bb 1f       	adc	r27, r27
 6d4:	66 1f       	adc	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	91 50       	subi	r25, 0x01	; 1
 6dc:	50 40       	sbci	r21, 0x00	; 0
 6de:	a9 f7       	brne	.-22     	; 0x6ca <__mulsf3_pse+0x64>
 6e0:	9e 3f       	cpi	r25, 0xFE	; 254
 6e2:	51 05       	cpc	r21, r1
 6e4:	70 f0       	brcs	.+28     	; 0x702 <__mulsf3_pse+0x9c>
 6e6:	14 c0       	rjmp	.+40     	; 0x710 <__fp_inf>
 6e8:	aa cf       	rjmp	.-172    	; 0x63e <__fp_szero>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	ec f3       	brlt	.-6      	; 0x6e8 <__mulsf3_pse+0x82>
 6ee:	98 3e       	cpi	r25, 0xE8	; 232
 6f0:	dc f3       	brlt	.-10     	; 0x6e8 <__mulsf3_pse+0x82>
 6f2:	86 95       	lsr	r24
 6f4:	77 95       	ror	r23
 6f6:	67 95       	ror	r22
 6f8:	b7 95       	ror	r27
 6fa:	f7 95       	ror	r31
 6fc:	e7 95       	ror	r30
 6fe:	9f 5f       	subi	r25, 0xFF	; 255
 700:	c1 f7       	brne	.-16     	; 0x6f2 <__mulsf3_pse+0x8c>
 702:	fe 2b       	or	r31, r30
 704:	88 0f       	add	r24, r24
 706:	91 1d       	adc	r25, r1
 708:	96 95       	lsr	r25
 70a:	87 95       	ror	r24
 70c:	97 f9       	bld	r25, 7
 70e:	08 95       	ret

00000710 <__fp_inf>:
 710:	97 f9       	bld	r25, 7
 712:	9f 67       	ori	r25, 0x7F	; 127
 714:	80 e8       	ldi	r24, 0x80	; 128
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	08 95       	ret

0000071c <__fp_nan>:
 71c:	9f ef       	ldi	r25, 0xFF	; 255
 71e:	80 ec       	ldi	r24, 0xC0	; 192
 720:	08 95       	ret

00000722 <__fp_pscA>:
 722:	00 24       	eor	r0, r0
 724:	0a 94       	dec	r0
 726:	16 16       	cp	r1, r22
 728:	17 06       	cpc	r1, r23
 72a:	18 06       	cpc	r1, r24
 72c:	09 06       	cpc	r0, r25
 72e:	08 95       	ret

00000730 <__fp_pscB>:
 730:	00 24       	eor	r0, r0
 732:	0a 94       	dec	r0
 734:	12 16       	cp	r1, r18
 736:	13 06       	cpc	r1, r19
 738:	14 06       	cpc	r1, r20
 73a:	05 06       	cpc	r0, r21
 73c:	08 95       	ret

0000073e <__fp_round>:
 73e:	09 2e       	mov	r0, r25
 740:	03 94       	inc	r0
 742:	00 0c       	add	r0, r0
 744:	11 f4       	brne	.+4      	; 0x74a <__fp_round+0xc>
 746:	88 23       	and	r24, r24
 748:	52 f0       	brmi	.+20     	; 0x75e <__fp_round+0x20>
 74a:	bb 0f       	add	r27, r27
 74c:	40 f4       	brcc	.+16     	; 0x75e <__fp_round+0x20>
 74e:	bf 2b       	or	r27, r31
 750:	11 f4       	brne	.+4      	; 0x756 <__fp_round+0x18>
 752:	60 ff       	sbrs	r22, 0
 754:	04 c0       	rjmp	.+8      	; 0x75e <__fp_round+0x20>
 756:	6f 5f       	subi	r22, 0xFF	; 255
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	08 95       	ret

00000760 <__umulhisi3>:
 760:	a2 9f       	mul	r26, r18
 762:	b0 01       	movw	r22, r0
 764:	b3 9f       	mul	r27, r19
 766:	c0 01       	movw	r24, r0
 768:	a3 9f       	mul	r26, r19
 76a:	70 0d       	add	r23, r0
 76c:	81 1d       	adc	r24, r1
 76e:	11 24       	eor	r1, r1
 770:	91 1d       	adc	r25, r1
 772:	b2 9f       	mul	r27, r18
 774:	70 0d       	add	r23, r0
 776:	81 1d       	adc	r24, r1
 778:	11 24       	eor	r1, r1
 77a:	91 1d       	adc	r25, r1
 77c:	08 95       	ret

0000077e <_exit>:
 77e:	f8 94       	cli

00000780 <__stop_program>:
 780:	ff cf       	rjmp	.-2      	; 0x780 <__stop_program>
