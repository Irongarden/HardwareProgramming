
assignment_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000762  000007f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800214  00800214  0000080a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000113d  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec4  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b1  00000000  00000000  00002955  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066b  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000432  00000000  00000000  0000396f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003da1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	00 c2       	rjmp	.+1024   	; 0x476 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	30 c1       	rjmp	.+608    	; 0x30a <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e6       	ldi	r30, 0x62	; 98
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 31       	cpi	r26, 0x16	; 22
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e9 d1       	rcall	.+978    	; 0x4f2 <main>
 120:	1e c3       	rjmp	.+1596   	; 0x75e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <convert>:
	
	// Initializes Timer and interrupt
	setrefreshrate();
}

void convert(){
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	
	display[0]=segValues[digits[0]];
 128:	c4 e0       	ldi	r28, 0x04	; 4
 12a:	d2 e0       	ldi	r29, 0x02	; 2
 12c:	e8 81       	ld	r30, Y
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e7 5f       	subi	r30, 0xF7	; 247
 132:	fd 4f       	sbci	r31, 0xFD	; 253
 134:	80 81       	ld	r24, Z
 136:	a0 e0       	ldi	r26, 0x00	; 0
 138:	b2 e0       	ldi	r27, 0x02	; 2
 13a:	8c 93       	st	X, r24
	display[1]=segValues[digits[1]];
 13c:	e9 81       	ldd	r30, Y+1	; 0x01
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e7 5f       	subi	r30, 0xF7	; 247
 142:	fd 4f       	sbci	r31, 0xFD	; 253
 144:	80 81       	ld	r24, Z
 146:	11 96       	adiw	r26, 0x01	; 1
 148:	8c 93       	st	X, r24
 14a:	11 97       	sbiw	r26, 0x01	; 1
	display[2]=segValues[digits[2]];
 14c:	ea 81       	ldd	r30, Y+2	; 0x02
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	e7 5f       	subi	r30, 0xF7	; 247
 152:	fd 4f       	sbci	r31, 0xFD	; 253
 154:	80 81       	ld	r24, Z
 156:	12 96       	adiw	r26, 0x02	; 2
 158:	8c 93       	st	X, r24
 15a:	12 97       	sbiw	r26, 0x02	; 2
	display[3]=segValues[digits[3]];
 15c:	eb 81       	ldd	r30, Y+3	; 0x03
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e7 5f       	subi	r30, 0xF7	; 247
 162:	fd 4f       	sbci	r31, 0xFD	; 253
 164:	80 81       	ld	r24, Z
 166:	13 96       	adiw	r26, 0x03	; 3
 168:	8c 93       	st	X, r24
	
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <printint_4u>:
void printint_4u(uint16_t value){
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ac 01       	movw	r20, r24
	
	// Seperating digits
	digits[3] = value%10;
 176:	9c 01       	movw	r18, r24
 178:	ad ec       	ldi	r26, 0xCD	; 205
 17a:	bc ec       	ldi	r27, 0xCC	; 204
 17c:	e1 d2       	rcall	.+1474   	; 0x740 <__umulhisi3>
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	9c 01       	movw	r18, r24
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	82 0f       	add	r24, r18
 19e:	93 1f       	adc	r25, r19
 1a0:	9a 01       	movw	r18, r20
 1a2:	28 1b       	sub	r18, r24
 1a4:	39 0b       	sbc	r19, r25
 1a6:	e4 e0       	ldi	r30, 0x04	; 4
 1a8:	f2 e0       	ldi	r31, 0x02	; 2
 1aa:	23 83       	std	Z+3, r18	; 0x03
	value = value/10;
 1ac:	9a 01       	movw	r18, r20
 1ae:	c8 d2       	rcall	.+1424   	; 0x740 <__umulhisi3>
 1b0:	ec 01       	movw	r28, r24
 1b2:	d6 95       	lsr	r29
 1b4:	c7 95       	ror	r28
 1b6:	d6 95       	lsr	r29
 1b8:	c7 95       	ror	r28
 1ba:	d6 95       	lsr	r29
 1bc:	c7 95       	ror	r28
	digits[2] = value%10;
 1be:	9e 01       	movw	r18, r28
 1c0:	bf d2       	rcall	.+1406   	; 0x740 <__umulhisi3>
 1c2:	96 95       	lsr	r25
 1c4:	87 95       	ror	r24
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	9c 01       	movw	r18, r24
 1d0:	22 0f       	add	r18, r18
 1d2:	33 1f       	adc	r19, r19
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	82 0f       	add	r24, r18
 1e2:	93 1f       	adc	r25, r19
 1e4:	9e 01       	movw	r18, r28
 1e6:	28 1b       	sub	r18, r24
 1e8:	39 0b       	sbc	r19, r25
 1ea:	22 83       	std	Z+2, r18	; 0x02
 1ec:	9a 01       	movw	r18, r20
	value = value/10;
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	ab e7       	ldi	r26, 0x7B	; 123
 1f8:	b4 e1       	ldi	r27, 0x14	; 20
 1fa:	a2 d2       	rcall	.+1348   	; 0x740 <__umulhisi3>
 1fc:	ec 01       	movw	r28, r24
 1fe:	d6 95       	lsr	r29
 200:	c7 95       	ror	r28
 202:	9e 01       	movw	r18, r28
	digits[1] = value%10;
 204:	ad ec       	ldi	r26, 0xCD	; 205
 206:	bc ec       	ldi	r27, 0xCC	; 204
 208:	9b d2       	rcall	.+1334   	; 0x740 <__umulhisi3>
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	96 95       	lsr	r25
 210:	87 95       	ror	r24
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	9c 01       	movw	r18, r24
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	82 0f       	add	r24, r18
 22a:	93 1f       	adc	r25, r19
 22c:	9e 01       	movw	r18, r28
 22e:	28 1b       	sub	r18, r24
 230:	39 0b       	sbc	r19, r25
 232:	21 83       	std	Z+1, r18	; 0x01
 234:	9a 01       	movw	r18, r20
 236:	36 95       	lsr	r19
	value = value/10;
 238:	27 95       	ror	r18
 23a:	36 95       	lsr	r19
 23c:	27 95       	ror	r18
 23e:	36 95       	lsr	r19
 240:	27 95       	ror	r18
 242:	a5 ec       	ldi	r26, 0xC5	; 197
 244:	b0 e2       	ldi	r27, 0x20	; 32
 246:	7c d2       	rcall	.+1272   	; 0x740 <__umulhisi3>
 248:	ac 01       	movw	r20, r24
 24a:	52 95       	swap	r21
 24c:	42 95       	swap	r20
 24e:	4f 70       	andi	r20, 0x0F	; 15
 250:	45 27       	eor	r20, r21
 252:	5f 70       	andi	r21, 0x0F	; 15
 254:	45 27       	eor	r20, r21
 256:	9a 01       	movw	r18, r20
	digits[0] = value%10;
 258:	ad ec       	ldi	r26, 0xCD	; 205
 25a:	bc ec       	ldi	r27, 0xCC	; 204
 25c:	71 d2       	rcall	.+1250   	; 0x740 <__umulhisi3>
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	9c 01       	movw	r18, r24
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	82 0f       	add	r24, r18
 27e:	93 1f       	adc	r25, r19
 280:	9a 01       	movw	r18, r20
 282:	28 1b       	sub	r18, r24
 284:	39 0b       	sbc	r19, r25
 286:	20 83       	st	Z, r18
 288:	4d df       	rcall	.-358    	; 0x124 <convert>
	
	convert();
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
}
 28e:	08 95       	ret

00000290 <setrefreshrate>:
 290:	e0 ea       	ldi	r30, 0xA0	; 160
 292:	f0 e0       	ldi	r31, 0x00	; 0

void setrefreshrate()
{
	// Set timer toggle on compare match
	TCCR4A |= _BV(COM4A0);
 294:	80 81       	ld	r24, Z
 296:	80 64       	ori	r24, 0x40	; 64
 298:	80 83       	st	Z, r24
	
	// Set prescaler 8
	TCCR4B |= _BV(CS41);
 29a:	e1 ea       	ldi	r30, 0xA1	; 161
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	80 83       	st	Z, r24
	
	// Set to Clear timer on compare match (CTC mode)
	TCCR4B |= _BV(WGM42);
 2a4:	80 81       	ld	r24, Z
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	80 83       	st	Z, r24
	
	// Enable Timer interrupt
	TIMSK4 |= _BV(OCIE4A);
 2aa:	e2 e7       	ldi	r30, 0x72	; 114
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	80 83       	st	Z, r24
	
	// Set timer frequency 60Hz/digit (16000000 / (2*240*8))-1 = 4165.6
	OCR4A = 4166;
 2b4:	86 e4       	ldi	r24, 0x46	; 70
 2b6:	90 e1       	ldi	r25, 0x10	; 16
 2b8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 2bc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 2c0:	08 95       	ret

000002c2 <init_display>:
uint8_t display[4] = {0xFF,0xFF,0xFF,0xFF};


void init_display(){
	// Set PF0-PF3 to output (digits)
	DDRF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
 2c2:	80 b3       	in	r24, 0x10	; 16
 2c4:	8f 60       	ori	r24, 0x0F	; 15
 2c6:	80 bb       	out	0x10, r24	; 16
	
	//--!!!! SPI Change: !!!!!--
	
	// Setup CPOL functionality to sample at rising edge.
	SPCR &= ~ (_BV(CPOL) | _BV(CPHA));
 2c8:	8c b5       	in	r24, 0x2c	; 44
 2ca:	83 7f       	andi	r24, 0xF3	; 243
 2cc:	8c bd       	out	0x2c, r24	; 44
	
	// DORD 0 OR 1: start from least significant bit or opposite.
	SPCR |=_BV(DORD);
 2ce:	8c b5       	in	r24, 0x2c	; 44
 2d0:	80 62       	ori	r24, 0x20	; 32
 2d2:	8c bd       	out	0x2c, r24	; 44
	
	SPCR |= _BV(MSTR);
 2d4:	8c b5       	in	r24, 0x2c	; 44
 2d6:	80 61       	ori	r24, 0x10	; 16
 2d8:	8c bd       	out	0x2c, r24	; 44
	
	// set SCK frequency to Fosc/128
	SPCR |= _BV(SPR1) | _BV(SPR0);
 2da:	8c b5       	in	r24, 0x2c	; 44
 2dc:	83 60       	ori	r24, 0x03	; 3
 2de:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~_BV(SPI2X);
 2e0:	8d b5       	in	r24, 0x2d	; 45
 2e2:	8e 7f       	andi	r24, 0xFE	; 254
 2e4:	8d bd       	out	0x2d, r24	; 45
	
	// Enable SPI
	SPCR |= _BV(SPE);
 2e6:	8c b5       	in	r24, 0x2c	; 44
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	8c bd       	out	0x2c, r24	; 44
	 
	//--!!!! SPI Change: !!!!!--
	
	// Set SI to output
	DDRB |= _BV(SI);
 2ec:	84 b1       	in	r24, 0x04	; 4
 2ee:	84 60       	ori	r24, 0x04	; 4
 2f0:	84 b9       	out	0x04, r24	; 4
	
	// Set SCK to output
	
	DDRB |= _BV(SCK);
 2f2:	84 b1       	in	r24, 0x04	; 4
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	84 b9       	out	0x04, r24	; 4
	
	// Set RCK to output
	
	DDRB |= _BV(RCK);
 2f8:	84 b1       	in	r24, 0x04	; 4
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	84 b9       	out	0x04, r24	; 4
	
	
	// Initializes Timer and interrupt
	setrefreshrate();
 2fe:	c8 cf       	rjmp	.-112    	; 0x290 <setrefreshrate>
 300:	08 95       	ret

00000302 <cleardisplay>:
	OCR4A = 4166;
}

void cleardisplay(){
	// Turn off digit displays
	PORTF |= _BV(D1) | _BV(D2) | _BV(D3)| _BV(D4);
 302:	81 b3       	in	r24, 0x11	; 17
 304:	8f 60       	ori	r24, 0x0F	; 15
 306:	81 bb       	out	0x11, r24	; 17
 308:	08 95       	ret

0000030a <__vector_42>:
}


ISR(TIMER4_COMPA_vect){	
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	0b b6       	in	r0, 0x3b	; 59
 316:	0f 92       	push	r0
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
	
	
	
	
	
	cleardisplay();
 330:	e8 df       	rcall	.-48     	; 0x302 <cleardisplay>
		// Clock to state output
	PORTB |= _BV(RCK);
 332:	85 b1       	in	r24, 0x05	; 5
 334:	81 60       	ori	r24, 0x01	; 1
 336:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~_BV(RCK);
 338:	85 b1       	in	r24, 0x05	; 5
 33a:	8e 7f       	andi	r24, 0xFE	; 254
 33c:	85 b9       	out	0x05, r24	; 5
		
		
	PORTF &= ~(_BV(segment));
 33e:	21 b3       	in	r18, 0x11	; 17
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	00 90 08 02 	lds	r0, 0x0208	; 0x800208 <segment>
 348:	02 c0       	rjmp	.+4      	; 0x34e <__vector_42+0x44>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	0a 94       	dec	r0
 350:	e2 f7       	brpl	.-8      	; 0x34a <__vector_42+0x40>
 352:	80 95       	com	r24
 354:	82 23       	and	r24, r18
 356:	81 bb       	out	0x11, r24	; 17
	segment++;
 358:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <segment>
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <segment>
		
		
	if(segment==4){
 362:	84 30       	cpi	r24, 0x04	; 4
 364:	11 f4       	brne	.+4      	; 0x36a <__vector_42+0x60>
		segment = 0;
 366:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <segment>
	}
	SPDR = display[segment];
 36a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <segment>
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	e0 50       	subi	r30, 0x00	; 0
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	80 81       	ld	r24, Z
 376:	8e bd       	out	0x2e, r24	; 46
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0b be       	out	0x3b, r0	; 59
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <init_leds>:
#include "../include/led.h"

void init_leds()
{
	// set pin direction to output
	DDRA = 0xFF;
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	81 b9       	out	0x01, r24	; 1
	// turn all leds off - Active low
	PORTA = 0xFF;
 3a2:	82 b9       	out	0x02, r24	; 2
 3a4:	08 95       	ret

000003a6 <mv_to_c>:
static void (*cb)(uint8_t deg_c) = 0;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
 3a6:	9c 01       	movw	r18, r24
 3a8:	24 5f       	subi	r18, 0xF4	; 244
 3aa:	31 40       	sbci	r19, 0x01	; 1
 3ac:	ad ec       	ldi	r26, 0xCD	; 205
 3ae:	bc ec       	ldi	r27, 0xCC	; 204
 3b0:	c7 d1       	rcall	.+910    	; 0x740 <__umulhisi3>
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
}
 3be:	08 95       	ret

000003c0 <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
 3c0:	bc 01       	movw	r22, r24
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	cb d0       	rcall	.+406    	; 0x55e <__floatunsisf>
 3c8:	2a e1       	ldi	r18, 0x1A	; 26
 3ca:	37 e6       	ldi	r19, 0x67	; 103
 3cc:	4c e9       	ldi	r20, 0x9C	; 156
 3ce:	50 e4       	ldi	r21, 0x40	; 64
 3d0:	2c d1       	rcall	.+600    	; 0x62a <__mulsf3>
 3d2:	99 d0       	rcall	.+306    	; 0x506 <__fixunssfsi>
}
 3d4:	cb 01       	movw	r24, r22
 3d6:	08 95       	ret

000003d8 <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
 3d8:	9c 01       	movw	r18, r24
	// **** General config *****
	
	// Set PK7 direction as input (TMP36 Vout)
	DDRK &= ~_BV(v_out);
 3da:	e7 e0       	ldi	r30, 0x07	; 7
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	80 81       	ld	r24, Z
 3e0:	8f 77       	andi	r24, 0x7F	; 127
 3e2:	80 83       	st	Z, r24
	
	// Set PG0 direction as output (TMP36 Enable)
	DDRG |= _BV(enable);  
 3e4:	83 b3       	in	r24, 0x13	; 19
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	83 bb       	out	0x13, r24	; 19

	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
 3ea:	ec e7       	ldi	r30, 0x7C	; 124
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	80 64       	ori	r24, 0x40	; 64
 3f2:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
 3f4:	80 81       	ld	r24, Z
 3f6:	87 60       	ori	r24, 0x07	; 7
 3f8:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 3fa:	ab e7       	ldi	r26, 0x7B	; 123
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	8c 91       	ld	r24, X
 400:	88 60       	ori	r24, 0x08	; 8
 402:	8c 93       	st	X, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
 404:	ea e7       	ldi	r30, 0x7A	; 122
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	86 60       	ori	r24, 0x06	; 6
 40c:	80 83       	st	Z, r24

	// Enable ADC  
	ADCSRA |= _BV(ADEN);
 40e:	80 81       	ld	r24, Z
 410:	80 68       	ori	r24, 0x80	; 128
 412:	80 83       	st	Z, r24
	// ****** General config end *************
	
	// ****** Interrupt and auto trigger ****
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
 414:	80 81       	ld	r24, Z
 416:	88 60       	ori	r24, 0x08	; 8
 418:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
 41a:	80 81       	ld	r24, Z
 41c:	80 62       	ori	r24, 0x20	; 32
 41e:	80 83       	st	Z, r24
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 420:	8c 91       	ld	r24, X
 422:	85 60       	ori	r24, 0x05	; 5
 424:	8c 93       	st	X, r24
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1B |= _BV(WGM12);
 426:	e1 e8       	ldi	r30, 0x81	; 129
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	90 81       	ld	r25, Z
 42c:	98 60       	ori	r25, 0x08	; 8
 42e:	90 83       	st	Z, r25
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
 430:	a0 e8       	ldi	r26, 0x80	; 128
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	9c 91       	ld	r25, X
 436:	90 61       	ori	r25, 0x10	; 16
 438:	9c 93       	st	X, r25
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
 43a:	90 81       	ld	r25, Z
 43c:	94 60       	ori	r25, 0x04	; 4
 43e:	90 83       	st	Z, r25
	
	// Enable Timer Interrupt
	TIMSK1 |= _BV(OCIE1B);
 440:	ef e6       	ldi	r30, 0x6F	; 111
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	90 81       	ld	r25, Z
 446:	94 60       	ori	r25, 0x04	; 4
 448:	90 83       	st	Z, r25

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
 44a:	81 e1       	ldi	r24, 0x11	; 17
 44c:	9a e7       	ldi	r25, 0x7A	; 122
 44e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 452:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
 456:	21 15       	cp	r18, r1
 458:	31 05       	cpc	r19, r1
 45a:	21 f0       	breq	.+8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		cb = callback;
 45c:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <__data_end+0x1>
 460:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <__data_end>
	
	// Enable TMP36
	PORTG |= _BV(enable);
 464:	84 b3       	in	r24, 0x14	; 20
 466:	81 60       	ori	r24, 0x01	; 1
 468:	84 bb       	out	0x14, r24	; 20
	
	// Start Conversion.
	ADCSRA |= _BV(ADSC);
 46a:	ea e7       	ldi	r30, 0x7A	; 122
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	80 64       	ori	r24, 0x40	; 64
 472:	80 83       	st	Z, r24
 474:	08 95       	ret

00000476 <__vector_29>:
}

// AD Interrupt callback.
ISR(ADC_vect)
{
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	0b b6       	in	r0, 0x3b	; 59
 482:	0f 92       	push	r0
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
 4a0:	c0 91 14 02 	lds	r28, 0x0214	; 0x800214 <__data_end>
 4a4:	d0 91 15 02 	lds	r29, 0x0215	; 0x800215 <__data_end+0x1>
 4a8:	20 97       	sbiw	r28, 0x00	; 0
 4aa:	41 f0       	breq	.+16     	; 0x4bc <__vector_29+0x46>
		cb(mv_to_c(adc_to_mv(ADC)));
 4ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 4b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 4b4:	85 df       	rcall	.-246    	; 0x3c0 <adc_to_mv>
 4b6:	77 df       	rcall	.-274    	; 0x3a6 <mv_to_c>
 4b8:	fe 01       	movw	r30, r28
 4ba:	19 95       	eicall
	
	// ADC interrupt flag is high!
	// Clear ADC interrupt flag.
	ADCSRA |= ~_BV(ADIF);
 4bc:	ea e7       	ldi	r30, 0x7A	; 122
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	8f 6e       	ori	r24, 0xEF	; 239
 4c4:	80 83       	st	Z, r24
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0b be       	out	0x3b, r0	; 59
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <new_measurement>:
// Offset 17 = led 1-8 @ 18-25 deg C.
#define offset 17
static uint8_t temp = 0;
static uint16_t xn = 0123;
static void new_measurement(uint8_t deg_c)
{
 4f0:	08 95       	ret

000004f2 <main>:
}


int main(void)
{
	init_leds();
 4f2:	55 df       	rcall	.-342    	; 0x39e <init_leds>
	tmp36_init(new_measurement);
 4f4:	88 e7       	ldi	r24, 0x78	; 120
 4f6:	92 e0       	ldi	r25, 0x02	; 2
	init_display();
 4f8:	6f df       	rcall	.-290    	; 0x3d8 <tmp36_init>
 4fa:	e3 de       	rcall	.-570    	; 0x2c2 <init_display>
	// Enable interrupt globally.
	sei();
	
    while (1) 
    {
		printint_4u(1234);
 4fc:	78 94       	sei
 4fe:	82 ed       	ldi	r24, 0xD2	; 210
 500:	94 e0       	ldi	r25, 0x04	; 4
 502:	36 de       	rcall	.-916    	; 0x170 <printint_4u>
 504:	fc cf       	rjmp	.-8      	; 0x4fe <main+0xc>

00000506 <__fixunssfsi>:
 506:	70 d0       	rcall	.+224    	; 0x5e8 <__fp_splitA>
 508:	88 f0       	brcs	.+34     	; 0x52c <__fixunssfsi+0x26>
 50a:	9f 57       	subi	r25, 0x7F	; 127
 50c:	90 f0       	brcs	.+36     	; 0x532 <__fixunssfsi+0x2c>
 50e:	b9 2f       	mov	r27, r25
 510:	99 27       	eor	r25, r25
 512:	b7 51       	subi	r27, 0x17	; 23
 514:	a0 f0       	brcs	.+40     	; 0x53e <__fixunssfsi+0x38>
 516:	d1 f0       	breq	.+52     	; 0x54c <__fixunssfsi+0x46>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	88 1f       	adc	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	1a f0       	brmi	.+6      	; 0x528 <__fixunssfsi+0x22>
 522:	ba 95       	dec	r27
 524:	c9 f7       	brne	.-14     	; 0x518 <__fixunssfsi+0x12>
 526:	12 c0       	rjmp	.+36     	; 0x54c <__fixunssfsi+0x46>
 528:	b1 30       	cpi	r27, 0x01	; 1
 52a:	81 f0       	breq	.+32     	; 0x54c <__fixunssfsi+0x46>
 52c:	77 d0       	rcall	.+238    	; 0x61c <__fp_zero>
 52e:	b1 e0       	ldi	r27, 0x01	; 1
 530:	08 95       	ret
 532:	74 c0       	rjmp	.+232    	; 0x61c <__fp_zero>
 534:	67 2f       	mov	r22, r23
 536:	78 2f       	mov	r23, r24
 538:	88 27       	eor	r24, r24
 53a:	b8 5f       	subi	r27, 0xF8	; 248
 53c:	39 f0       	breq	.+14     	; 0x54c <__fixunssfsi+0x46>
 53e:	b9 3f       	cpi	r27, 0xF9	; 249
 540:	cc f3       	brlt	.-14     	; 0x534 <__fixunssfsi+0x2e>
 542:	86 95       	lsr	r24
 544:	77 95       	ror	r23
 546:	67 95       	ror	r22
 548:	b3 95       	inc	r27
 54a:	d9 f7       	brne	.-10     	; 0x542 <__fixunssfsi+0x3c>
 54c:	3e f4       	brtc	.+14     	; 0x55c <__fixunssfsi+0x56>
 54e:	90 95       	com	r25
 550:	80 95       	com	r24
 552:	70 95       	com	r23
 554:	61 95       	neg	r22
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	8f 4f       	sbci	r24, 0xFF	; 255
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	08 95       	ret

0000055e <__floatunsisf>:
 55e:	e8 94       	clt
 560:	09 c0       	rjmp	.+18     	; 0x574 <__floatsisf+0x12>

00000562 <__floatsisf>:
 562:	97 fb       	bst	r25, 7
 564:	3e f4       	brtc	.+14     	; 0x574 <__floatsisf+0x12>
 566:	90 95       	com	r25
 568:	80 95       	com	r24
 56a:	70 95       	com	r23
 56c:	61 95       	neg	r22
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	8f 4f       	sbci	r24, 0xFF	; 255
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	99 23       	and	r25, r25
 576:	a9 f0       	breq	.+42     	; 0x5a2 <__floatsisf+0x40>
 578:	f9 2f       	mov	r31, r25
 57a:	96 e9       	ldi	r25, 0x96	; 150
 57c:	bb 27       	eor	r27, r27
 57e:	93 95       	inc	r25
 580:	f6 95       	lsr	r31
 582:	87 95       	ror	r24
 584:	77 95       	ror	r23
 586:	67 95       	ror	r22
 588:	b7 95       	ror	r27
 58a:	f1 11       	cpse	r31, r1
 58c:	f8 cf       	rjmp	.-16     	; 0x57e <__floatsisf+0x1c>
 58e:	fa f4       	brpl	.+62     	; 0x5ce <__floatsisf+0x6c>
 590:	bb 0f       	add	r27, r27
 592:	11 f4       	brne	.+4      	; 0x598 <__floatsisf+0x36>
 594:	60 ff       	sbrs	r22, 0
 596:	1b c0       	rjmp	.+54     	; 0x5ce <__floatsisf+0x6c>
 598:	6f 5f       	subi	r22, 0xFF	; 255
 59a:	7f 4f       	sbci	r23, 0xFF	; 255
 59c:	8f 4f       	sbci	r24, 0xFF	; 255
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	16 c0       	rjmp	.+44     	; 0x5ce <__floatsisf+0x6c>
 5a2:	88 23       	and	r24, r24
 5a4:	11 f0       	breq	.+4      	; 0x5aa <__floatsisf+0x48>
 5a6:	96 e9       	ldi	r25, 0x96	; 150
 5a8:	11 c0       	rjmp	.+34     	; 0x5cc <__floatsisf+0x6a>
 5aa:	77 23       	and	r23, r23
 5ac:	21 f0       	breq	.+8      	; 0x5b6 <__floatsisf+0x54>
 5ae:	9e e8       	ldi	r25, 0x8E	; 142
 5b0:	87 2f       	mov	r24, r23
 5b2:	76 2f       	mov	r23, r22
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <__floatsisf+0x5e>
 5b6:	66 23       	and	r22, r22
 5b8:	71 f0       	breq	.+28     	; 0x5d6 <__floatsisf+0x74>
 5ba:	96 e8       	ldi	r25, 0x86	; 134
 5bc:	86 2f       	mov	r24, r22
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	2a f0       	brmi	.+10     	; 0x5ce <__floatsisf+0x6c>
 5c4:	9a 95       	dec	r25
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	88 1f       	adc	r24, r24
 5cc:	da f7       	brpl	.-10     	; 0x5c4 <__floatsisf+0x62>
 5ce:	88 0f       	add	r24, r24
 5d0:	96 95       	lsr	r25
 5d2:	87 95       	ror	r24
 5d4:	97 f9       	bld	r25, 7
 5d6:	08 95       	ret

000005d8 <__fp_split3>:
 5d8:	57 fd       	sbrc	r21, 7
 5da:	90 58       	subi	r25, 0x80	; 128
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	59 f0       	breq	.+22     	; 0x5f8 <__fp_splitA+0x10>
 5e2:	5f 3f       	cpi	r21, 0xFF	; 255
 5e4:	71 f0       	breq	.+28     	; 0x602 <__fp_splitA+0x1a>
 5e6:	47 95       	ror	r20

000005e8 <__fp_splitA>:
 5e8:	88 0f       	add	r24, r24
 5ea:	97 fb       	bst	r25, 7
 5ec:	99 1f       	adc	r25, r25
 5ee:	61 f0       	breq	.+24     	; 0x608 <__fp_splitA+0x20>
 5f0:	9f 3f       	cpi	r25, 0xFF	; 255
 5f2:	79 f0       	breq	.+30     	; 0x612 <__fp_splitA+0x2a>
 5f4:	87 95       	ror	r24
 5f6:	08 95       	ret
 5f8:	12 16       	cp	r1, r18
 5fa:	13 06       	cpc	r1, r19
 5fc:	14 06       	cpc	r1, r20
 5fe:	55 1f       	adc	r21, r21
 600:	f2 cf       	rjmp	.-28     	; 0x5e6 <__fp_split3+0xe>
 602:	46 95       	lsr	r20
 604:	f1 df       	rcall	.-30     	; 0x5e8 <__fp_splitA>
 606:	08 c0       	rjmp	.+16     	; 0x618 <__fp_splitA+0x30>
 608:	16 16       	cp	r1, r22
 60a:	17 06       	cpc	r1, r23
 60c:	18 06       	cpc	r1, r24
 60e:	99 1f       	adc	r25, r25
 610:	f1 cf       	rjmp	.-30     	; 0x5f4 <__fp_splitA+0xc>
 612:	86 95       	lsr	r24
 614:	71 05       	cpc	r23, r1
 616:	61 05       	cpc	r22, r1
 618:	08 94       	sec
 61a:	08 95       	ret

0000061c <__fp_zero>:
 61c:	e8 94       	clt

0000061e <__fp_szero>:
 61e:	bb 27       	eor	r27, r27
 620:	66 27       	eor	r22, r22
 622:	77 27       	eor	r23, r23
 624:	cb 01       	movw	r24, r22
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

0000062a <__mulsf3>:
 62a:	0b d0       	rcall	.+22     	; 0x642 <__mulsf3x>
 62c:	78 c0       	rjmp	.+240    	; 0x71e <__fp_round>
 62e:	69 d0       	rcall	.+210    	; 0x702 <__fp_pscA>
 630:	28 f0       	brcs	.+10     	; 0x63c <__mulsf3+0x12>
 632:	6e d0       	rcall	.+220    	; 0x710 <__fp_pscB>
 634:	18 f0       	brcs	.+6      	; 0x63c <__mulsf3+0x12>
 636:	95 23       	and	r25, r21
 638:	09 f0       	breq	.+2      	; 0x63c <__mulsf3+0x12>
 63a:	5a c0       	rjmp	.+180    	; 0x6f0 <__fp_inf>
 63c:	5f c0       	rjmp	.+190    	; 0x6fc <__fp_nan>
 63e:	11 24       	eor	r1, r1
 640:	ee cf       	rjmp	.-36     	; 0x61e <__fp_szero>

00000642 <__mulsf3x>:
 642:	ca df       	rcall	.-108    	; 0x5d8 <__fp_split3>
 644:	a0 f3       	brcs	.-24     	; 0x62e <__mulsf3+0x4>

00000646 <__mulsf3_pse>:
 646:	95 9f       	mul	r25, r21
 648:	d1 f3       	breq	.-12     	; 0x63e <__mulsf3+0x14>
 64a:	95 0f       	add	r25, r21
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	55 1f       	adc	r21, r21
 650:	62 9f       	mul	r22, r18
 652:	f0 01       	movw	r30, r0
 654:	72 9f       	mul	r23, r18
 656:	bb 27       	eor	r27, r27
 658:	f0 0d       	add	r31, r0
 65a:	b1 1d       	adc	r27, r1
 65c:	63 9f       	mul	r22, r19
 65e:	aa 27       	eor	r26, r26
 660:	f0 0d       	add	r31, r0
 662:	b1 1d       	adc	r27, r1
 664:	aa 1f       	adc	r26, r26
 666:	64 9f       	mul	r22, r20
 668:	66 27       	eor	r22, r22
 66a:	b0 0d       	add	r27, r0
 66c:	a1 1d       	adc	r26, r1
 66e:	66 1f       	adc	r22, r22
 670:	82 9f       	mul	r24, r18
 672:	22 27       	eor	r18, r18
 674:	b0 0d       	add	r27, r0
 676:	a1 1d       	adc	r26, r1
 678:	62 1f       	adc	r22, r18
 67a:	73 9f       	mul	r23, r19
 67c:	b0 0d       	add	r27, r0
 67e:	a1 1d       	adc	r26, r1
 680:	62 1f       	adc	r22, r18
 682:	83 9f       	mul	r24, r19
 684:	a0 0d       	add	r26, r0
 686:	61 1d       	adc	r22, r1
 688:	22 1f       	adc	r18, r18
 68a:	74 9f       	mul	r23, r20
 68c:	33 27       	eor	r19, r19
 68e:	a0 0d       	add	r26, r0
 690:	61 1d       	adc	r22, r1
 692:	23 1f       	adc	r18, r19
 694:	84 9f       	mul	r24, r20
 696:	60 0d       	add	r22, r0
 698:	21 1d       	adc	r18, r1
 69a:	82 2f       	mov	r24, r18
 69c:	76 2f       	mov	r23, r22
 69e:	6a 2f       	mov	r22, r26
 6a0:	11 24       	eor	r1, r1
 6a2:	9f 57       	subi	r25, 0x7F	; 127
 6a4:	50 40       	sbci	r21, 0x00	; 0
 6a6:	8a f0       	brmi	.+34     	; 0x6ca <__mulsf3_pse+0x84>
 6a8:	e1 f0       	breq	.+56     	; 0x6e2 <__mulsf3_pse+0x9c>
 6aa:	88 23       	and	r24, r24
 6ac:	4a f0       	brmi	.+18     	; 0x6c0 <__mulsf3_pse+0x7a>
 6ae:	ee 0f       	add	r30, r30
 6b0:	ff 1f       	adc	r31, r31
 6b2:	bb 1f       	adc	r27, r27
 6b4:	66 1f       	adc	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	91 50       	subi	r25, 0x01	; 1
 6bc:	50 40       	sbci	r21, 0x00	; 0
 6be:	a9 f7       	brne	.-22     	; 0x6aa <__mulsf3_pse+0x64>
 6c0:	9e 3f       	cpi	r25, 0xFE	; 254
 6c2:	51 05       	cpc	r21, r1
 6c4:	70 f0       	brcs	.+28     	; 0x6e2 <__mulsf3_pse+0x9c>
 6c6:	14 c0       	rjmp	.+40     	; 0x6f0 <__fp_inf>
 6c8:	aa cf       	rjmp	.-172    	; 0x61e <__fp_szero>
 6ca:	5f 3f       	cpi	r21, 0xFF	; 255
 6cc:	ec f3       	brlt	.-6      	; 0x6c8 <__mulsf3_pse+0x82>
 6ce:	98 3e       	cpi	r25, 0xE8	; 232
 6d0:	dc f3       	brlt	.-10     	; 0x6c8 <__mulsf3_pse+0x82>
 6d2:	86 95       	lsr	r24
 6d4:	77 95       	ror	r23
 6d6:	67 95       	ror	r22
 6d8:	b7 95       	ror	r27
 6da:	f7 95       	ror	r31
 6dc:	e7 95       	ror	r30
 6de:	9f 5f       	subi	r25, 0xFF	; 255
 6e0:	c1 f7       	brne	.-16     	; 0x6d2 <__mulsf3_pse+0x8c>
 6e2:	fe 2b       	or	r31, r30
 6e4:	88 0f       	add	r24, r24
 6e6:	91 1d       	adc	r25, r1
 6e8:	96 95       	lsr	r25
 6ea:	87 95       	ror	r24
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret

000006f0 <__fp_inf>:
 6f0:	97 f9       	bld	r25, 7
 6f2:	9f 67       	ori	r25, 0x7F	; 127
 6f4:	80 e8       	ldi	r24, 0x80	; 128
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	08 95       	ret

000006fc <__fp_nan>:
 6fc:	9f ef       	ldi	r25, 0xFF	; 255
 6fe:	80 ec       	ldi	r24, 0xC0	; 192
 700:	08 95       	ret

00000702 <__fp_pscA>:
 702:	00 24       	eor	r0, r0
 704:	0a 94       	dec	r0
 706:	16 16       	cp	r1, r22
 708:	17 06       	cpc	r1, r23
 70a:	18 06       	cpc	r1, r24
 70c:	09 06       	cpc	r0, r25
 70e:	08 95       	ret

00000710 <__fp_pscB>:
 710:	00 24       	eor	r0, r0
 712:	0a 94       	dec	r0
 714:	12 16       	cp	r1, r18
 716:	13 06       	cpc	r1, r19
 718:	14 06       	cpc	r1, r20
 71a:	05 06       	cpc	r0, r21
 71c:	08 95       	ret

0000071e <__fp_round>:
 71e:	09 2e       	mov	r0, r25
 720:	03 94       	inc	r0
 722:	00 0c       	add	r0, r0
 724:	11 f4       	brne	.+4      	; 0x72a <__fp_round+0xc>
 726:	88 23       	and	r24, r24
 728:	52 f0       	brmi	.+20     	; 0x73e <__fp_round+0x20>
 72a:	bb 0f       	add	r27, r27
 72c:	40 f4       	brcc	.+16     	; 0x73e <__fp_round+0x20>
 72e:	bf 2b       	or	r27, r31
 730:	11 f4       	brne	.+4      	; 0x736 <__fp_round+0x18>
 732:	60 ff       	sbrs	r22, 0
 734:	04 c0       	rjmp	.+8      	; 0x73e <__fp_round+0x20>
 736:	6f 5f       	subi	r22, 0xFF	; 255
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	08 95       	ret

00000740 <__umulhisi3>:
 740:	a2 9f       	mul	r26, r18
 742:	b0 01       	movw	r22, r0
 744:	b3 9f       	mul	r27, r19
 746:	c0 01       	movw	r24, r0
 748:	a3 9f       	mul	r26, r19
 74a:	70 0d       	add	r23, r0
 74c:	81 1d       	adc	r24, r1
 74e:	11 24       	eor	r1, r1
 750:	91 1d       	adc	r25, r1
 752:	b2 9f       	mul	r27, r18
 754:	70 0d       	add	r23, r0
 756:	81 1d       	adc	r24, r1
 758:	11 24       	eor	r1, r1
 75a:	91 1d       	adc	r25, r1
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>
