
assignment_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  000007a4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800214  00800214  0000084c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000118c  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef0  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000847  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00003260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ac  00000000  00000000  00003ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003f95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	1e c2       	rjmp	.+1084   	; 0x4b2 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4e c1       	rjmp	.+668    	; 0x346 <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ea       	ldi	r30, 0xA4	; 164
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 31       	cpi	r26, 0x17	; 23
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	09 d2       	rcall	.+1042   	; 0x532 <main>
 120:	3f c3       	rjmp	.+1662   	; 0x7a0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <setrefreshrate>:


void setrefreshrate()
{
	// Set timer toggle on compare match
	TCCR4A |= _BV(COM4A0);
 124:	e0 ea       	ldi	r30, 0xA0	; 160
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	
	// Set prescaler 8
	TCCR4B |= _BV(CS41);
 12e:	e1 ea       	ldi	r30, 0xA1	; 161
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
	
	// Set to Clear timer on compare match (CTC mode)
	TCCR4B |= _BV(WGM42);
 138:	80 81       	ld	r24, Z
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	80 83       	st	Z, r24
	
	// Enable Timer interrupt
	TIMSK4 |= _BV(OCIE4A);
 13e:	e2 e7       	ldi	r30, 0x72	; 114
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
	
	// Set timer frequency 60Hz/digit (16000000 / (2*240*8))-1 = 4165.6
	OCR4A = 4166;
 148:	86 e4       	ldi	r24, 0x46	; 70
 14a:	90 e1       	ldi	r25, 0x10	; 16
 14c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 150:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 154:	08 95       	ret

00000156 <init_display>:
}


void init_display(){
	// Set PF0-PF3 to output (digits)
	DDRF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
 156:	80 b3       	in	r24, 0x10	; 16
 158:	8f 60       	ori	r24, 0x0F	; 15
 15a:	80 bb       	out	0x10, r24	; 16
	
	//--!!!! SPI Change: !!!!!--
	
	// Setup CPOL functionality to sample at rising edge.
	SPCR &= ~ (_BV(CPOL) | _BV(CPHA));
 15c:	8c b5       	in	r24, 0x2c	; 44
 15e:	83 7f       	andi	r24, 0xF3	; 243
 160:	8c bd       	out	0x2c, r24	; 44
	
	// DORD 0 OR 1: start from least significant bit or opposite.
	SPCR |=_BV(DORD);
 162:	8c b5       	in	r24, 0x2c	; 44
 164:	80 62       	ori	r24, 0x20	; 32
 166:	8c bd       	out	0x2c, r24	; 44
	
	SPCR |= _BV(MSTR);
 168:	8c b5       	in	r24, 0x2c	; 44
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8c bd       	out	0x2c, r24	; 44
	
	// set SCK frequency to Fosc/128
	SPCR |= _BV(SPR1) | _BV(SPR0);
 16e:	8c b5       	in	r24, 0x2c	; 44
 170:	83 60       	ori	r24, 0x03	; 3
 172:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~_BV(SPI2X);
 174:	8d b5       	in	r24, 0x2d	; 45
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	8d bd       	out	0x2d, r24	; 45
	
	// Enable SPI
	SPCR |= _BV(SPE);
 17a:	8c b5       	in	r24, 0x2c	; 44
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	8c bd       	out	0x2c, r24	; 44
	 
	//--!!!! SPI Change: !!!!!--
	
	// Set SI to output
	DDRB |= _BV(SI);
 180:	84 b1       	in	r24, 0x04	; 4
 182:	84 60       	ori	r24, 0x04	; 4
 184:	84 b9       	out	0x04, r24	; 4
	
	// Set SCK to output
	
	DDRB |= _BV(SCK);
 186:	84 b1       	in	r24, 0x04	; 4
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	84 b9       	out	0x04, r24	; 4
	
	// Set RCK to output
	
	DDRB |= _BV(RCK);
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	84 b9       	out	0x04, r24	; 4
	
	
	// Initializes Timer and interrupt
	setrefreshrate();
 192:	c8 cf       	rjmp	.-112    	; 0x124 <setrefreshrate>
 194:	08 95       	ret

00000196 <convert_digit>:
}

uint8_t convert_digit(uint8_t segment)
{
	uint8_t val = digits[segment];
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	ec 5f       	subi	r30, 0xFC	; 252
 19e:	fd 4f       	sbci	r31, 0xFD	; 253
 1a0:	e0 81       	ld	r30, Z
	
	// Turns off digit display if value = 0 and is first display.
	if (segment == 0 && val == 0){
 1a2:	81 11       	cpse	r24, r1
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <convert_digit+0x14>
 1a6:	ee 23       	and	r30, r30
 1a8:	01 f1       	breq	.+64     	; 0x1ea <convert_digit+0x54>
		return segValues[10];
	}
	// Turns off digit display if value = 0 and display before = 0.
	else if (segment == 1 && val == 0){
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	49 f4       	brne	.+18     	; 0x1c0 <convert_digit+0x2a>
 1ae:	e1 11       	cpse	r30, r1
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <convert_digit+0x2a>
		if (digits[segment - 1] == 0) {
 1b2:	d9 01       	movw	r26, r18
 1b4:	ad 5f       	subi	r26, 0xFD	; 253
 1b6:	bd 4f       	sbci	r27, 0xFD	; 253
 1b8:	8c 91       	ld	r24, X
 1ba:	81 11       	cpse	r24, r1
 1bc:	11 c0       	rjmp	.+34     	; 0x1e0 <convert_digit+0x4a>
 1be:	17 c0       	rjmp	.+46     	; 0x1ee <convert_digit+0x58>
			return segValues[10];
		}
		// Turns off digit display if value = 0 and 2 displays before are both 0.
		} else if ( segment == 2 && val == 0){
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	71 f4       	brne	.+28     	; 0x1e0 <convert_digit+0x4a>
 1c4:	e1 11       	cpse	r30, r1
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <convert_digit+0x4a>
		if (digits[segment -1] == 0 && digits[segment -2] == 0){
 1c8:	d9 01       	movw	r26, r18
 1ca:	ad 5f       	subi	r26, 0xFD	; 253
 1cc:	bd 4f       	sbci	r27, 0xFD	; 253
 1ce:	8c 91       	ld	r24, X
 1d0:	81 11       	cpse	r24, r1
 1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <convert_digit+0x4a>
 1d4:	d9 01       	movw	r26, r18
 1d6:	ae 5f       	subi	r26, 0xFE	; 254
 1d8:	bd 4f       	sbci	r27, 0xFD	; 253
 1da:	8c 91       	ld	r24, X
 1dc:	88 23       	and	r24, r24
 1de:	49 f0       	breq	.+18     	; 0x1f2 <convert_digit+0x5c>
			return segValues[10];
		}
		
		
}
return segValues[digits[segment]];
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	e7 5f       	subi	r30, 0xF7	; 247
 1e4:	fd 4f       	sbci	r31, 0xFD	; 253
 1e6:	80 81       	ld	r24, Z
 1e8:	08 95       	ret
{
	uint8_t val = digits[segment];
	
	// Turns off digit display if value = 0 and is first display.
	if (segment == 0 && val == 0){
		return segValues[10];
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	08 95       	ret
	}
	// Turns off digit display if value = 0 and display before = 0.
	else if (segment == 1 && val == 0){
		if (digits[segment - 1] == 0) {
			return segValues[10];
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	08 95       	ret
		}
		// Turns off digit display if value = 0 and 2 displays before are both 0.
		} else if ( segment == 2 && val == 0){
		if (digits[segment -1] == 0 && digits[segment -2] == 0){
			return segValues[10];
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
		}
		
		
}
return segValues[digits[segment]];
	}
 1f4:	08 95       	ret

000001f6 <convert>:
void convert(){
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
	for (uint8_t i = 0; i < 4; i++){
 1fc:	c0 e0       	ldi	r28, 0x00	; 0
 1fe:	09 c0       	rjmp	.+18     	; 0x212 <convert+0x1c>
		display[i] = convert_digit(i);
 200:	0c 2f       	mov	r16, r28
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	8c 2f       	mov	r24, r28
 206:	c7 df       	rcall	.-114    	; 0x196 <convert_digit>
 208:	f8 01       	movw	r30, r16
 20a:	e0 50       	subi	r30, 0x00	; 0
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	80 83       	st	Z, r24
		
}
return segValues[digits[segment]];
	}
void convert(){
	for (uint8_t i = 0; i < 4; i++){
 210:	cf 5f       	subi	r28, 0xFF	; 255
 212:	c4 30       	cpi	r28, 0x04	; 4
 214:	a8 f3       	brcs	.-22     	; 0x200 <convert+0xa>
	
	//display[0]=segValues[digits[0]];
	//display[1]=segValues[digits[1]];
	//display[2]=segValues[digits[2]];
	//display[3]=segValues[digits[3]];
}
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	08 95       	ret

0000021e <printint_4u>:
	
	
void printint_4u(uint16_t value){
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ac 01       	movw	r20, r24
	
	// Seperating digits
	digits[3] = value%10;
 224:	9c 01       	movw	r18, r24
 226:	ad ec       	ldi	r26, 0xCD	; 205
 228:	bc ec       	ldi	r27, 0xCC	; 204
 22a:	ab d2       	rcall	.+1366   	; 0x782 <__umulhisi3>
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	9c 01       	movw	r18, r24
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	82 0f       	add	r24, r18
 24c:	93 1f       	adc	r25, r19
 24e:	9a 01       	movw	r18, r20
 250:	28 1b       	sub	r18, r24
 252:	39 0b       	sbc	r19, r25
 254:	e4 e0       	ldi	r30, 0x04	; 4
 256:	f2 e0       	ldi	r31, 0x02	; 2
 258:	23 83       	std	Z+3, r18	; 0x03
	value = value/10;
 25a:	9a 01       	movw	r18, r20
 25c:	92 d2       	rcall	.+1316   	; 0x782 <__umulhisi3>
 25e:	ec 01       	movw	r28, r24
 260:	d6 95       	lsr	r29
 262:	c7 95       	ror	r28
 264:	d6 95       	lsr	r29
 266:	c7 95       	ror	r28
 268:	d6 95       	lsr	r29
 26a:	c7 95       	ror	r28
	digits[2] = value%10;
 26c:	9e 01       	movw	r18, r28
 26e:	89 d2       	rcall	.+1298   	; 0x782 <__umulhisi3>
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	96 95       	lsr	r25
 27a:	87 95       	ror	r24
 27c:	9c 01       	movw	r18, r24
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	82 0f       	add	r24, r18
 290:	93 1f       	adc	r25, r19
 292:	9e 01       	movw	r18, r28
 294:	28 1b       	sub	r18, r24
 296:	39 0b       	sbc	r19, r25
 298:	22 83       	std	Z+2, r18	; 0x02
 29a:	9a 01       	movw	r18, r20
	value = value/10;
 29c:	36 95       	lsr	r19
 29e:	27 95       	ror	r18
 2a0:	36 95       	lsr	r19
 2a2:	27 95       	ror	r18
 2a4:	ab e7       	ldi	r26, 0x7B	; 123
 2a6:	b4 e1       	ldi	r27, 0x14	; 20
 2a8:	6c d2       	rcall	.+1240   	; 0x782 <__umulhisi3>
 2aa:	ec 01       	movw	r28, r24
 2ac:	d6 95       	lsr	r29
 2ae:	c7 95       	ror	r28
 2b0:	9e 01       	movw	r18, r28
	digits[1] = value%10;
 2b2:	ad ec       	ldi	r26, 0xCD	; 205
 2b4:	bc ec       	ldi	r27, 0xCC	; 204
 2b6:	65 d2       	rcall	.+1226   	; 0x782 <__umulhisi3>
 2b8:	96 95       	lsr	r25
 2ba:	87 95       	ror	r24
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	9c 01       	movw	r18, r24
 2c6:	22 0f       	add	r18, r18
 2c8:	33 1f       	adc	r19, r19
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	82 0f       	add	r24, r18
 2d8:	93 1f       	adc	r25, r19
 2da:	9e 01       	movw	r18, r28
 2dc:	28 1b       	sub	r18, r24
 2de:	39 0b       	sbc	r19, r25
 2e0:	21 83       	std	Z+1, r18	; 0x01
 2e2:	9a 01       	movw	r18, r20
 2e4:	36 95       	lsr	r19
	value = value/10;
 2e6:	27 95       	ror	r18
 2e8:	36 95       	lsr	r19
 2ea:	27 95       	ror	r18
 2ec:	36 95       	lsr	r19
 2ee:	27 95       	ror	r18
 2f0:	a5 ec       	ldi	r26, 0xC5	; 197
 2f2:	b0 e2       	ldi	r27, 0x20	; 32
 2f4:	46 d2       	rcall	.+1164   	; 0x782 <__umulhisi3>
 2f6:	ac 01       	movw	r20, r24
 2f8:	52 95       	swap	r21
 2fa:	42 95       	swap	r20
 2fc:	4f 70       	andi	r20, 0x0F	; 15
 2fe:	45 27       	eor	r20, r21
 300:	5f 70       	andi	r21, 0x0F	; 15
 302:	45 27       	eor	r20, r21
 304:	9a 01       	movw	r18, r20
	digits[0] = value%10;
 306:	ad ec       	ldi	r26, 0xCD	; 205
 308:	bc ec       	ldi	r27, 0xCC	; 204
 30a:	3b d2       	rcall	.+1142   	; 0x782 <__umulhisi3>
 30c:	96 95       	lsr	r25
 30e:	87 95       	ror	r24
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	96 95       	lsr	r25
 316:	87 95       	ror	r24
 318:	9c 01       	movw	r18, r24
 31a:	22 0f       	add	r18, r18
 31c:	33 1f       	adc	r19, r19
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	82 0f       	add	r24, r18
 32c:	93 1f       	adc	r25, r19
 32e:	9a 01       	movw	r18, r20
 330:	28 1b       	sub	r18, r24
 332:	39 0b       	sbc	r19, r25
 334:	20 83       	st	Z, r18
 336:	5f df       	rcall	.-322    	; 0x1f6 <convert>
	
	convert();
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
}
 33c:	08 95       	ret

0000033e <cleardisplay>:
 33e:	81 b3       	in	r24, 0x11	; 17
 340:	8f 60       	ori	r24, 0x0F	; 15



void cleardisplay(){
	// Turn off digit displays
	PORTF |= _BV(D1) | _BV(D2) | _BV(D3)| _BV(D4);
 342:	81 bb       	out	0x11, r24	; 17
 344:	08 95       	ret

00000346 <__vector_42>:
}


ISR(TIMER4_COMPA_vect){	
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	0b b6       	in	r0, 0x3b	; 59
 352:	0f 92       	push	r0
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	4f 93       	push	r20
 35a:	5f 93       	push	r21
 35c:	6f 93       	push	r22
 35e:	7f 93       	push	r23
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	af 93       	push	r26
 366:	bf 93       	push	r27
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
	
	
	
	
	
	cleardisplay();
 36c:	e8 df       	rcall	.-48     	; 0x33e <cleardisplay>
		// Clock to state output
	PORTB |= _BV(RCK);
 36e:	85 b1       	in	r24, 0x05	; 5
 370:	81 60       	ori	r24, 0x01	; 1
 372:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~_BV(RCK);
 374:	85 b1       	in	r24, 0x05	; 5
 376:	8e 7f       	andi	r24, 0xFE	; 254
 378:	85 b9       	out	0x05, r24	; 5
		
		
	PORTF &= ~(_BV(segment));
 37a:	21 b3       	in	r18, 0x11	; 17
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	00 90 08 02 	lds	r0, 0x0208	; 0x800208 <segment>
 384:	02 c0       	rjmp	.+4      	; 0x38a <__vector_42+0x44>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <__vector_42+0x40>
 38e:	80 95       	com	r24
 390:	82 23       	and	r24, r18
 392:	81 bb       	out	0x11, r24	; 17
	segment++;
 394:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <segment>
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <segment>
		
		
	if(segment==4){
 39e:	84 30       	cpi	r24, 0x04	; 4
 3a0:	11 f4       	brne	.+4      	; 0x3a6 <__vector_42+0x60>
		segment = 0;
 3a2:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <segment>
	}
	SPDR = display[segment];
 3a6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <segment>
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	e0 50       	subi	r30, 0x00	; 0
 3ae:	fe 4f       	sbci	r31, 0xFE	; 254
 3b0:	80 81       	ld	r24, Z
 3b2:	8e bd       	out	0x2e, r24	; 46
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0b be       	out	0x3b, r0	; 59
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <init_leds>:
#include "../include/led.h"

void init_leds()
{
	// set pin direction to output
	DDRA = 0xFF;
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	81 b9       	out	0x01, r24	; 1
	// turn all leds off - Active low
	PORTA = 0xFF;
 3de:	82 b9       	out	0x02, r24	; 2
 3e0:	08 95       	ret

000003e2 <mv_to_c>:
static void (*cb)(uint8_t deg_c) = 0;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
 3e2:	9c 01       	movw	r18, r24
 3e4:	24 5f       	subi	r18, 0xF4	; 244
 3e6:	31 40       	sbci	r19, 0x01	; 1
 3e8:	ad ec       	ldi	r26, 0xCD	; 205
 3ea:	bc ec       	ldi	r27, 0xCC	; 204
 3ec:	ca d1       	rcall	.+916    	; 0x782 <__umulhisi3>
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
}
 3fa:	08 95       	ret

000003fc <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
 3fc:	bc 01       	movw	r22, r24
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	ce d0       	rcall	.+412    	; 0x5a0 <__floatunsisf>
 404:	2a e1       	ldi	r18, 0x1A	; 26
 406:	37 e6       	ldi	r19, 0x67	; 103
 408:	4c e9       	ldi	r20, 0x9C	; 156
 40a:	50 e4       	ldi	r21, 0x40	; 64
 40c:	2f d1       	rcall	.+606    	; 0x66c <__mulsf3>
 40e:	9c d0       	rcall	.+312    	; 0x548 <__fixunssfsi>
}
 410:	cb 01       	movw	r24, r22
 412:	08 95       	ret

00000414 <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
 414:	9c 01       	movw	r18, r24
	// **** General config *****
	
	// Set PK7 direction as input (TMP36 Vout)
	DDRK &= ~_BV(v_out);
 416:	e7 e0       	ldi	r30, 0x07	; 7
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	80 81       	ld	r24, Z
 41c:	8f 77       	andi	r24, 0x7F	; 127
 41e:	80 83       	st	Z, r24
	
	// Set PG0 direction as output (TMP36 Enable)
	DDRG |= _BV(enable);  
 420:	83 b3       	in	r24, 0x13	; 19
 422:	81 60       	ori	r24, 0x01	; 1
 424:	83 bb       	out	0x13, r24	; 19

	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
 426:	ec e7       	ldi	r30, 0x7C	; 124
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	80 64       	ori	r24, 0x40	; 64
 42e:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
 430:	80 81       	ld	r24, Z
 432:	87 60       	ori	r24, 0x07	; 7
 434:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 436:	ab e7       	ldi	r26, 0x7B	; 123
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	8c 91       	ld	r24, X
 43c:	88 60       	ori	r24, 0x08	; 8
 43e:	8c 93       	st	X, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
 440:	ea e7       	ldi	r30, 0x7A	; 122
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	86 60       	ori	r24, 0x06	; 6
 448:	80 83       	st	Z, r24

	// Enable ADC  
	ADCSRA |= _BV(ADEN);
 44a:	80 81       	ld	r24, Z
 44c:	80 68       	ori	r24, 0x80	; 128
 44e:	80 83       	st	Z, r24
	// ****** General config end *************
	
	// ****** Interrupt and auto trigger ****
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
 450:	80 81       	ld	r24, Z
 452:	88 60       	ori	r24, 0x08	; 8
 454:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
 456:	80 81       	ld	r24, Z
 458:	80 62       	ori	r24, 0x20	; 32
 45a:	80 83       	st	Z, r24
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 45c:	8c 91       	ld	r24, X
 45e:	85 60       	ori	r24, 0x05	; 5
 460:	8c 93       	st	X, r24
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1B |= _BV(WGM12);
 462:	e1 e8       	ldi	r30, 0x81	; 129
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	90 81       	ld	r25, Z
 468:	98 60       	ori	r25, 0x08	; 8
 46a:	90 83       	st	Z, r25
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
 46c:	a0 e8       	ldi	r26, 0x80	; 128
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	9c 91       	ld	r25, X
 472:	90 61       	ori	r25, 0x10	; 16
 474:	9c 93       	st	X, r25
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
 476:	90 81       	ld	r25, Z
 478:	94 60       	ori	r25, 0x04	; 4
 47a:	90 83       	st	Z, r25
	
	// Enable Timer Interrupt
	TIMSK1 |= _BV(OCIE1B);
 47c:	ef e6       	ldi	r30, 0x6F	; 111
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	90 81       	ld	r25, Z
 482:	94 60       	ori	r25, 0x04	; 4
 484:	90 83       	st	Z, r25

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
 486:	81 e1       	ldi	r24, 0x11	; 17
 488:	9a e7       	ldi	r25, 0x7A	; 122
 48a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 48e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
 492:	21 15       	cp	r18, r1
 494:	31 05       	cpc	r19, r1
 496:	21 f0       	breq	.+8      	; 0x4a0 <tmp36_init+0x8c>
		cb = callback;
 498:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <__data_end+0x1>
 49c:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <__data_end>
	
	// Enable TMP36
	PORTG |= _BV(enable);
 4a0:	84 b3       	in	r24, 0x14	; 20
 4a2:	81 60       	ori	r24, 0x01	; 1
 4a4:	84 bb       	out	0x14, r24	; 20
	
	// Start Conversion.
	ADCSRA |= _BV(ADSC);
 4a6:	ea e7       	ldi	r30, 0x7A	; 122
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	80 64       	ori	r24, 0x40	; 64
 4ae:	80 83       	st	Z, r24
 4b0:	08 95       	ret

000004b2 <__vector_29>:
}

// AD Interrupt callback.
ISR(ADC_vect)
{
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	0b b6       	in	r0, 0x3b	; 59
 4be:	0f 92       	push	r0
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
 4dc:	c0 91 14 02 	lds	r28, 0x0214	; 0x800214 <__data_end>
 4e0:	d0 91 15 02 	lds	r29, 0x0215	; 0x800215 <__data_end+0x1>
 4e4:	20 97       	sbiw	r28, 0x00	; 0
 4e6:	41 f0       	breq	.+16     	; 0x4f8 <__vector_29+0x46>
		cb(mv_to_c(adc_to_mv(ADC)));
 4e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 4ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 4f0:	85 df       	rcall	.-246    	; 0x3fc <adc_to_mv>
 4f2:	77 df       	rcall	.-274    	; 0x3e2 <mv_to_c>
 4f4:	fe 01       	movw	r30, r28
 4f6:	19 95       	eicall
	
	// ADC interrupt flag is high!
	// Clear ADC interrupt flag.
	ADCSRA |= ~_BV(ADIF);
 4f8:	ea e7       	ldi	r30, 0x7A	; 122
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	8f 6e       	ori	r24, 0xEF	; 239
 500:	80 83       	st	Z, r24
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	bf 91       	pop	r27
 50c:	af 91       	pop	r26
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	7f 91       	pop	r23
 514:	6f 91       	pop	r22
 516:	5f 91       	pop	r21
 518:	4f 91       	pop	r20
 51a:	3f 91       	pop	r19
 51c:	2f 91       	pop	r18
 51e:	0f 90       	pop	r0
 520:	0b be       	out	0x3b, r0	; 59
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <new_measurement>:
#define offset 17
static uint8_t temp = 0;
static uint16_t xn = 0123;
static void new_measurement(uint8_t deg_c)
{
	temp = deg_c;
 52c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <temp>
 530:	08 95       	ret

00000532 <main>:
}


int main(void)
{
	init_leds();
 532:	53 df       	rcall	.-346    	; 0x3da <init_leds>
	tmp36_init(new_measurement);
 534:	86 e9       	ldi	r24, 0x96	; 150
 536:	92 e0       	ldi	r25, 0x02	; 2
	init_display();
 538:	6d df       	rcall	.-294    	; 0x414 <tmp36_init>
 53a:	0d de       	rcall	.-998    	; 0x156 <init_display>
	
	// Enable interrupt globally.
	sei();
 53c:	78 94       	sei
	
    while (1) 
    {
		printint_4u(temp);
 53e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <temp>
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	6c de       	rcall	.-808    	; 0x21e <printint_4u>
 546:	fb cf       	rjmp	.-10     	; 0x53e <main+0xc>

00000548 <__fixunssfsi>:
 548:	70 d0       	rcall	.+224    	; 0x62a <__fp_splitA>
 54a:	88 f0       	brcs	.+34     	; 0x56e <__fixunssfsi+0x26>
 54c:	9f 57       	subi	r25, 0x7F	; 127
 54e:	90 f0       	brcs	.+36     	; 0x574 <__fixunssfsi+0x2c>
 550:	b9 2f       	mov	r27, r25
 552:	99 27       	eor	r25, r25
 554:	b7 51       	subi	r27, 0x17	; 23
 556:	a0 f0       	brcs	.+40     	; 0x580 <__fixunssfsi+0x38>
 558:	d1 f0       	breq	.+52     	; 0x58e <__fixunssfsi+0x46>
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	1a f0       	brmi	.+6      	; 0x56a <__fixunssfsi+0x22>
 564:	ba 95       	dec	r27
 566:	c9 f7       	brne	.-14     	; 0x55a <__fixunssfsi+0x12>
 568:	12 c0       	rjmp	.+36     	; 0x58e <__fixunssfsi+0x46>
 56a:	b1 30       	cpi	r27, 0x01	; 1
 56c:	81 f0       	breq	.+32     	; 0x58e <__fixunssfsi+0x46>
 56e:	77 d0       	rcall	.+238    	; 0x65e <__fp_zero>
 570:	b1 e0       	ldi	r27, 0x01	; 1
 572:	08 95       	ret
 574:	74 c0       	rjmp	.+232    	; 0x65e <__fp_zero>
 576:	67 2f       	mov	r22, r23
 578:	78 2f       	mov	r23, r24
 57a:	88 27       	eor	r24, r24
 57c:	b8 5f       	subi	r27, 0xF8	; 248
 57e:	39 f0       	breq	.+14     	; 0x58e <__fixunssfsi+0x46>
 580:	b9 3f       	cpi	r27, 0xF9	; 249
 582:	cc f3       	brlt	.-14     	; 0x576 <__fixunssfsi+0x2e>
 584:	86 95       	lsr	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b3 95       	inc	r27
 58c:	d9 f7       	brne	.-10     	; 0x584 <__fixunssfsi+0x3c>
 58e:	3e f4       	brtc	.+14     	; 0x59e <__fixunssfsi+0x56>
 590:	90 95       	com	r25
 592:	80 95       	com	r24
 594:	70 95       	com	r23
 596:	61 95       	neg	r22
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	08 95       	ret

000005a0 <__floatunsisf>:
 5a0:	e8 94       	clt
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <__floatsisf+0x12>

000005a4 <__floatsisf>:
 5a4:	97 fb       	bst	r25, 7
 5a6:	3e f4       	brtc	.+14     	; 0x5b6 <__floatsisf+0x12>
 5a8:	90 95       	com	r25
 5aa:	80 95       	com	r24
 5ac:	70 95       	com	r23
 5ae:	61 95       	neg	r22
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	8f 4f       	sbci	r24, 0xFF	; 255
 5b4:	9f 4f       	sbci	r25, 0xFF	; 255
 5b6:	99 23       	and	r25, r25
 5b8:	a9 f0       	breq	.+42     	; 0x5e4 <__floatsisf+0x40>
 5ba:	f9 2f       	mov	r31, r25
 5bc:	96 e9       	ldi	r25, 0x96	; 150
 5be:	bb 27       	eor	r27, r27
 5c0:	93 95       	inc	r25
 5c2:	f6 95       	lsr	r31
 5c4:	87 95       	ror	r24
 5c6:	77 95       	ror	r23
 5c8:	67 95       	ror	r22
 5ca:	b7 95       	ror	r27
 5cc:	f1 11       	cpse	r31, r1
 5ce:	f8 cf       	rjmp	.-16     	; 0x5c0 <__floatsisf+0x1c>
 5d0:	fa f4       	brpl	.+62     	; 0x610 <__floatsisf+0x6c>
 5d2:	bb 0f       	add	r27, r27
 5d4:	11 f4       	brne	.+4      	; 0x5da <__floatsisf+0x36>
 5d6:	60 ff       	sbrs	r22, 0
 5d8:	1b c0       	rjmp	.+54     	; 0x610 <__floatsisf+0x6c>
 5da:	6f 5f       	subi	r22, 0xFF	; 255
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	16 c0       	rjmp	.+44     	; 0x610 <__floatsisf+0x6c>
 5e4:	88 23       	and	r24, r24
 5e6:	11 f0       	breq	.+4      	; 0x5ec <__floatsisf+0x48>
 5e8:	96 e9       	ldi	r25, 0x96	; 150
 5ea:	11 c0       	rjmp	.+34     	; 0x60e <__floatsisf+0x6a>
 5ec:	77 23       	and	r23, r23
 5ee:	21 f0       	breq	.+8      	; 0x5f8 <__floatsisf+0x54>
 5f0:	9e e8       	ldi	r25, 0x8E	; 142
 5f2:	87 2f       	mov	r24, r23
 5f4:	76 2f       	mov	r23, r22
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <__floatsisf+0x5e>
 5f8:	66 23       	and	r22, r22
 5fa:	71 f0       	breq	.+28     	; 0x618 <__floatsisf+0x74>
 5fc:	96 e8       	ldi	r25, 0x86	; 134
 5fe:	86 2f       	mov	r24, r22
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	2a f0       	brmi	.+10     	; 0x610 <__floatsisf+0x6c>
 606:	9a 95       	dec	r25
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	da f7       	brpl	.-10     	; 0x606 <__floatsisf+0x62>
 610:	88 0f       	add	r24, r24
 612:	96 95       	lsr	r25
 614:	87 95       	ror	r24
 616:	97 f9       	bld	r25, 7
 618:	08 95       	ret

0000061a <__fp_split3>:
 61a:	57 fd       	sbrc	r21, 7
 61c:	90 58       	subi	r25, 0x80	; 128
 61e:	44 0f       	add	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	59 f0       	breq	.+22     	; 0x63a <__fp_splitA+0x10>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	71 f0       	breq	.+28     	; 0x644 <__fp_splitA+0x1a>
 628:	47 95       	ror	r20

0000062a <__fp_splitA>:
 62a:	88 0f       	add	r24, r24
 62c:	97 fb       	bst	r25, 7
 62e:	99 1f       	adc	r25, r25
 630:	61 f0       	breq	.+24     	; 0x64a <__fp_splitA+0x20>
 632:	9f 3f       	cpi	r25, 0xFF	; 255
 634:	79 f0       	breq	.+30     	; 0x654 <__fp_splitA+0x2a>
 636:	87 95       	ror	r24
 638:	08 95       	ret
 63a:	12 16       	cp	r1, r18
 63c:	13 06       	cpc	r1, r19
 63e:	14 06       	cpc	r1, r20
 640:	55 1f       	adc	r21, r21
 642:	f2 cf       	rjmp	.-28     	; 0x628 <__fp_split3+0xe>
 644:	46 95       	lsr	r20
 646:	f1 df       	rcall	.-30     	; 0x62a <__fp_splitA>
 648:	08 c0       	rjmp	.+16     	; 0x65a <__fp_splitA+0x30>
 64a:	16 16       	cp	r1, r22
 64c:	17 06       	cpc	r1, r23
 64e:	18 06       	cpc	r1, r24
 650:	99 1f       	adc	r25, r25
 652:	f1 cf       	rjmp	.-30     	; 0x636 <__fp_splitA+0xc>
 654:	86 95       	lsr	r24
 656:	71 05       	cpc	r23, r1
 658:	61 05       	cpc	r22, r1
 65a:	08 94       	sec
 65c:	08 95       	ret

0000065e <__fp_zero>:
 65e:	e8 94       	clt

00000660 <__fp_szero>:
 660:	bb 27       	eor	r27, r27
 662:	66 27       	eor	r22, r22
 664:	77 27       	eor	r23, r23
 666:	cb 01       	movw	r24, r22
 668:	97 f9       	bld	r25, 7
 66a:	08 95       	ret

0000066c <__mulsf3>:
 66c:	0b d0       	rcall	.+22     	; 0x684 <__mulsf3x>
 66e:	78 c0       	rjmp	.+240    	; 0x760 <__fp_round>
 670:	69 d0       	rcall	.+210    	; 0x744 <__fp_pscA>
 672:	28 f0       	brcs	.+10     	; 0x67e <__mulsf3+0x12>
 674:	6e d0       	rcall	.+220    	; 0x752 <__fp_pscB>
 676:	18 f0       	brcs	.+6      	; 0x67e <__mulsf3+0x12>
 678:	95 23       	and	r25, r21
 67a:	09 f0       	breq	.+2      	; 0x67e <__mulsf3+0x12>
 67c:	5a c0       	rjmp	.+180    	; 0x732 <__fp_inf>
 67e:	5f c0       	rjmp	.+190    	; 0x73e <__fp_nan>
 680:	11 24       	eor	r1, r1
 682:	ee cf       	rjmp	.-36     	; 0x660 <__fp_szero>

00000684 <__mulsf3x>:
 684:	ca df       	rcall	.-108    	; 0x61a <__fp_split3>
 686:	a0 f3       	brcs	.-24     	; 0x670 <__mulsf3+0x4>

00000688 <__mulsf3_pse>:
 688:	95 9f       	mul	r25, r21
 68a:	d1 f3       	breq	.-12     	; 0x680 <__mulsf3+0x14>
 68c:	95 0f       	add	r25, r21
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	55 1f       	adc	r21, r21
 692:	62 9f       	mul	r22, r18
 694:	f0 01       	movw	r30, r0
 696:	72 9f       	mul	r23, r18
 698:	bb 27       	eor	r27, r27
 69a:	f0 0d       	add	r31, r0
 69c:	b1 1d       	adc	r27, r1
 69e:	63 9f       	mul	r22, r19
 6a0:	aa 27       	eor	r26, r26
 6a2:	f0 0d       	add	r31, r0
 6a4:	b1 1d       	adc	r27, r1
 6a6:	aa 1f       	adc	r26, r26
 6a8:	64 9f       	mul	r22, r20
 6aa:	66 27       	eor	r22, r22
 6ac:	b0 0d       	add	r27, r0
 6ae:	a1 1d       	adc	r26, r1
 6b0:	66 1f       	adc	r22, r22
 6b2:	82 9f       	mul	r24, r18
 6b4:	22 27       	eor	r18, r18
 6b6:	b0 0d       	add	r27, r0
 6b8:	a1 1d       	adc	r26, r1
 6ba:	62 1f       	adc	r22, r18
 6bc:	73 9f       	mul	r23, r19
 6be:	b0 0d       	add	r27, r0
 6c0:	a1 1d       	adc	r26, r1
 6c2:	62 1f       	adc	r22, r18
 6c4:	83 9f       	mul	r24, r19
 6c6:	a0 0d       	add	r26, r0
 6c8:	61 1d       	adc	r22, r1
 6ca:	22 1f       	adc	r18, r18
 6cc:	74 9f       	mul	r23, r20
 6ce:	33 27       	eor	r19, r19
 6d0:	a0 0d       	add	r26, r0
 6d2:	61 1d       	adc	r22, r1
 6d4:	23 1f       	adc	r18, r19
 6d6:	84 9f       	mul	r24, r20
 6d8:	60 0d       	add	r22, r0
 6da:	21 1d       	adc	r18, r1
 6dc:	82 2f       	mov	r24, r18
 6de:	76 2f       	mov	r23, r22
 6e0:	6a 2f       	mov	r22, r26
 6e2:	11 24       	eor	r1, r1
 6e4:	9f 57       	subi	r25, 0x7F	; 127
 6e6:	50 40       	sbci	r21, 0x00	; 0
 6e8:	8a f0       	brmi	.+34     	; 0x70c <__mulsf3_pse+0x84>
 6ea:	e1 f0       	breq	.+56     	; 0x724 <__mulsf3_pse+0x9c>
 6ec:	88 23       	and	r24, r24
 6ee:	4a f0       	brmi	.+18     	; 0x702 <__mulsf3_pse+0x7a>
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	bb 1f       	adc	r27, r27
 6f6:	66 1f       	adc	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	91 50       	subi	r25, 0x01	; 1
 6fe:	50 40       	sbci	r21, 0x00	; 0
 700:	a9 f7       	brne	.-22     	; 0x6ec <__mulsf3_pse+0x64>
 702:	9e 3f       	cpi	r25, 0xFE	; 254
 704:	51 05       	cpc	r21, r1
 706:	70 f0       	brcs	.+28     	; 0x724 <__mulsf3_pse+0x9c>
 708:	14 c0       	rjmp	.+40     	; 0x732 <__fp_inf>
 70a:	aa cf       	rjmp	.-172    	; 0x660 <__fp_szero>
 70c:	5f 3f       	cpi	r21, 0xFF	; 255
 70e:	ec f3       	brlt	.-6      	; 0x70a <__mulsf3_pse+0x82>
 710:	98 3e       	cpi	r25, 0xE8	; 232
 712:	dc f3       	brlt	.-10     	; 0x70a <__mulsf3_pse+0x82>
 714:	86 95       	lsr	r24
 716:	77 95       	ror	r23
 718:	67 95       	ror	r22
 71a:	b7 95       	ror	r27
 71c:	f7 95       	ror	r31
 71e:	e7 95       	ror	r30
 720:	9f 5f       	subi	r25, 0xFF	; 255
 722:	c1 f7       	brne	.-16     	; 0x714 <__mulsf3_pse+0x8c>
 724:	fe 2b       	or	r31, r30
 726:	88 0f       	add	r24, r24
 728:	91 1d       	adc	r25, r1
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__fp_inf>:
 732:	97 f9       	bld	r25, 7
 734:	9f 67       	ori	r25, 0x7F	; 127
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	08 95       	ret

0000073e <__fp_nan>:
 73e:	9f ef       	ldi	r25, 0xFF	; 255
 740:	80 ec       	ldi	r24, 0xC0	; 192
 742:	08 95       	ret

00000744 <__fp_pscA>:
 744:	00 24       	eor	r0, r0
 746:	0a 94       	dec	r0
 748:	16 16       	cp	r1, r22
 74a:	17 06       	cpc	r1, r23
 74c:	18 06       	cpc	r1, r24
 74e:	09 06       	cpc	r0, r25
 750:	08 95       	ret

00000752 <__fp_pscB>:
 752:	00 24       	eor	r0, r0
 754:	0a 94       	dec	r0
 756:	12 16       	cp	r1, r18
 758:	13 06       	cpc	r1, r19
 75a:	14 06       	cpc	r1, r20
 75c:	05 06       	cpc	r0, r21
 75e:	08 95       	ret

00000760 <__fp_round>:
 760:	09 2e       	mov	r0, r25
 762:	03 94       	inc	r0
 764:	00 0c       	add	r0, r0
 766:	11 f4       	brne	.+4      	; 0x76c <__fp_round+0xc>
 768:	88 23       	and	r24, r24
 76a:	52 f0       	brmi	.+20     	; 0x780 <__fp_round+0x20>
 76c:	bb 0f       	add	r27, r27
 76e:	40 f4       	brcc	.+16     	; 0x780 <__fp_round+0x20>
 770:	bf 2b       	or	r27, r31
 772:	11 f4       	brne	.+4      	; 0x778 <__fp_round+0x18>
 774:	60 ff       	sbrs	r22, 0
 776:	04 c0       	rjmp	.+8      	; 0x780 <__fp_round+0x20>
 778:	6f 5f       	subi	r22, 0xFF	; 255
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	08 95       	ret

00000782 <__umulhisi3>:
 782:	a2 9f       	mul	r26, r18
 784:	b0 01       	movw	r22, r0
 786:	b3 9f       	mul	r27, r19
 788:	c0 01       	movw	r24, r0
 78a:	a3 9f       	mul	r26, r19
 78c:	70 0d       	add	r23, r0
 78e:	81 1d       	adc	r24, r1
 790:	11 24       	eor	r1, r1
 792:	91 1d       	adc	r25, r1
 794:	b2 9f       	mul	r27, r18
 796:	70 0d       	add	r23, r0
 798:	81 1d       	adc	r24, r1
 79a:	11 24       	eor	r1, r1
 79c:	91 1d       	adc	r25, r1
 79e:	08 95       	ret

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
