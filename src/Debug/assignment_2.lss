
assignment_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800200  00000922  000009b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000922  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800258  00800258  00000a0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001354  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff3  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c7  00000000  00000000  00002ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006be  00000000  00000000  00003ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fa  00000000  00000000  00004172  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000466c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	dd c2       	rjmp	.+1466   	; 0x630 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	f7 c0       	rjmp	.+494    	; 0x298 <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e2       	ldi	r30, 0x22	; 34
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 35       	cpi	r26, 0x58	; 88
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e5       	ldi	r26, 0x58	; 88
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 35       	cpi	r26, 0x5B	; 91
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	c6 d2       	rcall	.+1420   	; 0x6ac <main>
 120:	fe c3       	rjmp	.+2044   	; 0x91e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <printint_4u>:
	PORTF |= _BV(D1) | _BV(D2) | _BV(D3)| _BV(D4);
}

uint8_t getValue(uint8_t val){
	
}
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ac 01       	movw	r20, r24
 12a:	9c 01       	movw	r18, r24
 12c:	ad ec       	ldi	r26, 0xCD	; 205
 12e:	bc ec       	ldi	r27, 0xCC	; 204
 130:	e7 d3       	rcall	.+1998   	; 0x900 <__umulhisi3>
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	96 95       	lsr	r25
 138:	87 95       	ror	r24
 13a:	96 95       	lsr	r25
 13c:	87 95       	ror	r24
 13e:	9c 01       	movw	r18, r24
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	82 0f       	add	r24, r18
 152:	93 1f       	adc	r25, r19
 154:	9a 01       	movw	r18, r20
 156:	28 1b       	sub	r18, r24
 158:	39 0b       	sbc	r19, r25
 15a:	e0 e0       	ldi	r30, 0x00	; 0
 15c:	f2 e0       	ldi	r31, 0x02	; 2
 15e:	23 83       	std	Z+3, r18	; 0x03
 160:	9a 01       	movw	r18, r20
 162:	ce d3       	rcall	.+1948   	; 0x900 <__umulhisi3>
 164:	ec 01       	movw	r28, r24
 166:	d6 95       	lsr	r29
 168:	c7 95       	ror	r28
 16a:	d6 95       	lsr	r29
 16c:	c7 95       	ror	r28
 16e:	d6 95       	lsr	r29
 170:	c7 95       	ror	r28
 172:	9e 01       	movw	r18, r28
 174:	c5 d3       	rcall	.+1930   	; 0x900 <__umulhisi3>
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	9c 01       	movw	r18, r24
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	82 0f       	add	r24, r18
 196:	93 1f       	adc	r25, r19
 198:	9e 01       	movw	r18, r28
 19a:	28 1b       	sub	r18, r24
 19c:	39 0b       	sbc	r19, r25
 19e:	22 83       	std	Z+2, r18	; 0x02
 1a0:	9a 01       	movw	r18, r20
 1a2:	36 95       	lsr	r19
 1a4:	27 95       	ror	r18
 1a6:	36 95       	lsr	r19
 1a8:	27 95       	ror	r18
 1aa:	ab e7       	ldi	r26, 0x7B	; 123
 1ac:	b4 e1       	ldi	r27, 0x14	; 20
 1ae:	a8 d3       	rcall	.+1872   	; 0x900 <__umulhisi3>
 1b0:	ec 01       	movw	r28, r24
 1b2:	d6 95       	lsr	r29
 1b4:	c7 95       	ror	r28
 1b6:	9e 01       	movw	r18, r28
 1b8:	ad ec       	ldi	r26, 0xCD	; 205
 1ba:	bc ec       	ldi	r27, 0xCC	; 204
 1bc:	a1 d3       	rcall	.+1858   	; 0x900 <__umulhisi3>
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	96 95       	lsr	r25
 1c4:	87 95       	ror	r24
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	9c 01       	movw	r18, r24
 1cc:	22 0f       	add	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	82 0f       	add	r24, r18
 1de:	93 1f       	adc	r25, r19
 1e0:	9e 01       	movw	r18, r28
 1e2:	28 1b       	sub	r18, r24
 1e4:	39 0b       	sbc	r19, r25
 1e6:	21 83       	std	Z+1, r18	; 0x01
 1e8:	9a 01       	movw	r18, r20
 1ea:	36 95       	lsr	r19
 1ec:	27 95       	ror	r18
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	a5 ec       	ldi	r26, 0xC5	; 197
 1f8:	b0 e2       	ldi	r27, 0x20	; 32
 1fa:	82 d3       	rcall	.+1796   	; 0x900 <__umulhisi3>
 1fc:	ac 01       	movw	r20, r24
 1fe:	52 95       	swap	r21
 200:	42 95       	swap	r20
 202:	4f 70       	andi	r20, 0x0F	; 15
 204:	45 27       	eor	r20, r21
 206:	5f 70       	andi	r21, 0x0F	; 15
 208:	45 27       	eor	r20, r21
 20a:	9a 01       	movw	r18, r20
 20c:	ad ec       	ldi	r26, 0xCD	; 205
 20e:	bc ec       	ldi	r27, 0xCC	; 204
 210:	77 d3       	rcall	.+1774   	; 0x900 <__umulhisi3>
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	9c 01       	movw	r18, r24
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	82 0f       	add	r24, r18
 232:	93 1f       	adc	r25, r19
 234:	9a 01       	movw	r18, r20
 236:	28 1b       	sub	r18, r24
 238:	39 0b       	sbc	r19, r25
 23a:	20 83       	st	Z, r18
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <setrefreshrate>:
 242:	e0 ea       	ldi	r30, 0xA0	; 160
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
 24c:	e1 ea       	ldi	r30, 0xA1	; 161
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	82 60       	ori	r24, 0x02	; 2
 254:	80 83       	st	Z, r24
 256:	80 81       	ld	r24, Z
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	80 83       	st	Z, r24
 25c:	e2 e7       	ldi	r30, 0x72	; 114
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	82 60       	ori	r24, 0x02	; 2
 264:	80 83       	st	Z, r24
 266:	86 e4       	ldi	r24, 0x46	; 70
 268:	90 e1       	ldi	r25, 0x10	; 16
 26a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 26e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 272:	08 95       	ret

00000274 <init_display>:
 274:	80 b3       	in	r24, 0x10	; 16
 276:	8f 60       	ori	r24, 0x0F	; 15
 278:	80 bb       	out	0x10, r24	; 16
 27a:	84 b1       	in	r24, 0x04	; 4
 27c:	84 60       	ori	r24, 0x04	; 4
 27e:	84 b9       	out	0x04, r24	; 4
 280:	84 b1       	in	r24, 0x04	; 4
 282:	82 60       	ori	r24, 0x02	; 2
 284:	84 b9       	out	0x04, r24	; 4
 286:	84 b1       	in	r24, 0x04	; 4
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	84 b9       	out	0x04, r24	; 4
 28c:	da cf       	rjmp	.-76     	; 0x242 <setrefreshrate>
 28e:	08 95       	ret

00000290 <cleardisplay>:
 290:	81 b3       	in	r24, 0x11	; 17
 292:	8f 60       	ori	r24, 0x0F	; 15
 294:	81 bb       	out	0x11, r24	; 17
 296:	08 95       	ret

00000298 <__vector_42>:

ISR(TIMER4_COMPA_vect){	
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	0b b6       	in	r0, 0x3b	; 59
 2a4:	0f 92       	push	r0
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	for(uint8_t i =0; i<8;i++){
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	48 c0       	rjmp	.+144    	; 0x352 <__vector_42+0xba>
		uint8_t val = digits[segment];
 2c2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end>
 2c6:	48 2f       	mov	r20, r24
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	fa 01       	movw	r30, r20
 2cc:	e0 50       	subi	r30, 0x00	; 0
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	e0 81       	ld	r30, Z
		
		if (segment == 0 && val == 0){
 2d2:	81 11       	cpse	r24, r1
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_42+0x42>
 2d6:	ee 23       	and	r30, r30
 2d8:	e1 f0       	breq	.+56     	; 0x312 <__vector_42+0x7a>
			val = 10;
		}
		else if (segment == 1 && val == 0){
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	49 f4       	brne	.+18     	; 0x2f0 <__vector_42+0x58>
 2de:	e1 11       	cpse	r30, r1
 2e0:	07 c0       	rjmp	.+14     	; 0x2f0 <__vector_42+0x58>
			if (digits[segment - 1] == 0) {
 2e2:	da 01       	movw	r26, r20
 2e4:	a1 50       	subi	r26, 0x01	; 1
 2e6:	be 4f       	sbci	r27, 0xFE	; 254
 2e8:	8c 91       	ld	r24, X
 2ea:	88 23       	and	r24, r24
 2ec:	a1 f0       	breq	.+40     	; 0x316 <__vector_42+0x7e>
 2ee:	16 c0       	rjmp	.+44     	; 0x31c <__vector_42+0x84>
				val = 10;
			}
		} else if ( segment == 2 && val == 0){
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	a1 f4       	brne	.+40     	; 0x31c <__vector_42+0x84>
 2f4:	e1 11       	cpse	r30, r1
 2f6:	12 c0       	rjmp	.+36     	; 0x31c <__vector_42+0x84>
			if (digits[segment -1] == 0 && digits[segment -2] == 0){
 2f8:	da 01       	movw	r26, r20
 2fa:	a1 50       	subi	r26, 0x01	; 1
 2fc:	be 4f       	sbci	r27, 0xFE	; 254
 2fe:	8c 91       	ld	r24, X
 300:	81 11       	cpse	r24, r1
 302:	0c c0       	rjmp	.+24     	; 0x31c <__vector_42+0x84>
 304:	da 01       	movw	r26, r20
 306:	a2 50       	subi	r26, 0x02	; 2
 308:	be 4f       	sbci	r27, 0xFE	; 254
 30a:	8c 91       	ld	r24, X
 30c:	88 23       	and	r24, r24
 30e:	29 f0       	breq	.+10     	; 0x31a <__vector_42+0x82>
 310:	05 c0       	rjmp	.+10     	; 0x31c <__vector_42+0x84>
ISR(TIMER4_COMPA_vect){	
	for(uint8_t i =0; i<8;i++){
		uint8_t val = digits[segment];
		
		if (segment == 0 && val == 0){
			val = 10;
 312:	ea e0       	ldi	r30, 0x0A	; 10
 314:	03 c0       	rjmp	.+6      	; 0x31c <__vector_42+0x84>
		}
		else if (segment == 1 && val == 0){
			if (digits[segment - 1] == 0) {
				val = 10;
 316:	ea e0       	ldi	r30, 0x0A	; 10
 318:	01 c0       	rjmp	.+2      	; 0x31c <__vector_42+0x84>
			}
		} else if ( segment == 2 && val == 0){
			if (digits[segment -1] == 0 && digits[segment -2] == 0){
				val = 10;
 31a:	ea e0       	ldi	r30, 0x0A	; 10
			}
		}
		
	
		// Convert digit to display code.
		if(segValues[val]>>i & 1){
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ec 5f       	subi	r30, 0xFC	; 252
 320:	fd 4f       	sbci	r31, 0xFD	; 253
 322:	80 81       	ld	r24, Z
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 2e       	mov	r0, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <__vector_42+0x96>
 32a:	95 95       	asr	r25
 32c:	87 95       	ror	r24
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <__vector_42+0x92>
 332:	80 ff       	sbrs	r24, 0
 334:	04 c0       	rjmp	.+8      	; 0x33e <__vector_42+0xa6>
			PORTB |=_BV(SI);
 336:	85 b1       	in	r24, 0x05	; 5
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	85 b9       	out	0x05, r24	; 5
 33c:	03 c0       	rjmp	.+6      	; 0x344 <__vector_42+0xac>
			}else{
			PORTB &= ~_BV(SI);
 33e:	85 b1       	in	r24, 0x05	; 5
 340:	8b 7f       	andi	r24, 0xFB	; 251
 342:	85 b9       	out	0x05, r24	; 5
		}
		PORTB |= _BV(SCK);
 344:	85 b1       	in	r24, 0x05	; 5
 346:	82 60       	ori	r24, 0x02	; 2
 348:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~_BV(SCK);
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	8d 7f       	andi	r24, 0xFD	; 253
 34e:	85 b9       	out	0x05, r24	; 5
uint8_t getValue(uint8_t val){
	
}

ISR(TIMER4_COMPA_vect){	
	for(uint8_t i =0; i<8;i++){
 350:	2f 5f       	subi	r18, 0xFF	; 255
 352:	28 30       	cpi	r18, 0x08	; 8
 354:	08 f4       	brcc	.+2      	; 0x358 <__vector_42+0xc0>
 356:	b5 cf       	rjmp	.-150    	; 0x2c2 <__vector_42+0x2a>
		}
		PORTB |= _BV(SCK);
		PORTB &= ~_BV(SCK);
	}
		
	cleardisplay();
 358:	9b df       	rcall	.-202    	; 0x290 <cleardisplay>
		
	PORTB |= _BV(RCK);
 35a:	85 b1       	in	r24, 0x05	; 5
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~_BV(RCK);
 360:	85 b1       	in	r24, 0x05	; 5
 362:	8e 7f       	andi	r24, 0xFE	; 254
 364:	85 b9       	out	0x05, r24	; 5
		
		
	PORTF &= ~(_BV(segment));
 366:	21 b3       	in	r18, 0x11	; 17
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	00 90 58 02 	lds	r0, 0x0258	; 0x800258 <__data_end>
 370:	02 c0       	rjmp	.+4      	; 0x376 <__vector_42+0xde>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <__vector_42+0xda>
 37a:	80 95       	com	r24
 37c:	82 23       	and	r24, r18
 37e:	81 bb       	out	0x11, r24	; 17
	segment++;
 380:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end>
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
		
	if(segment==4){
 38a:	84 30       	cpi	r24, 0x04	; 4
 38c:	11 f4       	brne	.+4      	; 0x392 <__vector_42+0xfa>
		segment = 0;
 38e:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <__data_end>
	}
}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0b be       	out	0x3b, r0	; 59
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <init_leds>:
#include "../include/led.h"

void init_leds()
{
	// set pin direction to output
	DDRA = 0xFF;
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	81 b9       	out	0x01, r24	; 1
	// turn all leds off - Active low
	PORTA = 0xFF;
 3bc:	82 b9       	out	0x02, r24	; 2
 3be:	08 95       	ret

000003c0 <init_matrix_keyboard>:
	{&DDRL, &PINL, &PORTL, PL1}  //Col 4
};

void init_matrix_keyboard(){
	// Rows as Output
	for(uint8_t i=0; i<4; i++){
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	22 c0       	rjmp	.+68     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		*(keypad[i].ddr) |= _BV(keypad[i].bit);
 3c4:	82 2f       	mov	r24, r18
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	fc 01       	movw	r30, r24
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	e8 1b       	sub	r30, r24
 3d8:	f9 0b       	sbc	r31, r25
 3da:	e1 5e       	subi	r30, 0xE1	; 225
 3dc:	fd 4f       	sbci	r31, 0xFD	; 253
 3de:	a0 81       	ld	r26, Z
 3e0:	b1 81       	ldd	r27, Z+1	; 0x01
 3e2:	3c 91       	ld	r19, X
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	06 80       	ldd	r0, Z+6	; 0x06
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <init_matrix_keyboard+0x30>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <init_matrix_keyboard+0x2c>
 3f4:	93 2f       	mov	r25, r19
 3f6:	98 2b       	or	r25, r24
 3f8:	9c 93       	st	X, r25
		*(keypad[i].port) |= _BV(keypad[i].bit);
 3fa:	04 80       	ldd	r0, Z+4	; 0x04
 3fc:	f5 81       	ldd	r31, Z+5	; 0x05
 3fe:	e0 2d       	mov	r30, r0
 400:	90 81       	ld	r25, Z
 402:	89 2b       	or	r24, r25
 404:	80 83       	st	Z, r24
	{&DDRL, &PINL, &PORTL, PL1}  //Col 4
};

void init_matrix_keyboard(){
	// Rows as Output
	for(uint8_t i=0; i<4; i++){
 406:	2f 5f       	subi	r18, 0xFF	; 255
 408:	24 30       	cpi	r18, 0x04	; 4
 40a:	e0 f2       	brcs	.-72     	; 0x3c4 <init_matrix_keyboard+0x4>
 40c:	24 e0       	ldi	r18, 0x04	; 4
 40e:	23 c0       	rjmp	.+70     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		*(keypad[i].port) |= _BV(keypad[i].bit);
	}
	// Collumns as Input
	for (uint8_t a=4; a<8; a++)
	{
		*(keypad[a].ddr) &= ~_BV(keypad[a].bit);
 410:	82 2f       	mov	r24, r18
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	fc 01       	movw	r30, r24
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	ee 0f       	add	r30, r30
 420:	ff 1f       	adc	r31, r31
 422:	e8 1b       	sub	r30, r24
 424:	f9 0b       	sbc	r31, r25
 426:	e1 5e       	subi	r30, 0xE1	; 225
 428:	fd 4f       	sbci	r31, 0xFD	; 253
 42a:	a0 81       	ld	r26, Z
 42c:	b1 81       	ldd	r27, Z+1	; 0x01
 42e:	3c 91       	ld	r19, X
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	06 80       	ldd	r0, Z+6	; 0x06
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	0a 94       	dec	r0
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	98 2f       	mov	r25, r24
 442:	90 95       	com	r25
 444:	93 23       	and	r25, r19
 446:	9c 93       	st	X, r25
		*(keypad[a].port) |= _BV(keypad[a].bit);
 448:	04 80       	ldd	r0, Z+4	; 0x04
 44a:	f5 81       	ldd	r31, Z+5	; 0x05
 44c:	e0 2d       	mov	r30, r0
 44e:	90 81       	ld	r25, Z
 450:	89 2b       	or	r24, r25
 452:	80 83       	st	Z, r24
	for(uint8_t i=0; i<4; i++){
		*(keypad[i].ddr) |= _BV(keypad[i].bit);
		*(keypad[i].port) |= _BV(keypad[i].bit);
	}
	// Collumns as Input
	for (uint8_t a=4; a<8; a++)
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	28 30       	cpi	r18, 0x08	; 8
 458:	d8 f2       	brcs	.-74     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		*(keypad[a].ddr) &= ~_BV(keypad[a].bit);
		*(keypad[a].port) |= _BV(keypad[a].bit);
	}
}
 45a:	08 95       	ret

0000045c <getxkey>:
{4,5,6,11},
{7,8,9,12},
{13,0,14,15}};

int8_t getxkey(){
	for (uint8_t b =0; b<4; b++)
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	7b c0       	rjmp	.+246    	; 0x556 <getxkey+0xfa>
	{
		// Set row to low (0)
		*(keypad[b].port) &= ~_BV(keypad[b].bit);
 460:	63 2f       	mov	r22, r19
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	db 01       	movw	r26, r22
 466:	aa 0f       	add	r26, r26
 468:	bb 1f       	adc	r27, r27
 46a:	aa 0f       	add	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	aa 0f       	add	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	a6 1b       	sub	r26, r22
 474:	b7 0b       	sbc	r27, r23
 476:	a1 5e       	subi	r26, 0xE1	; 225
 478:	bd 4f       	sbci	r27, 0xFD	; 253
 47a:	14 96       	adiw	r26, 0x04	; 4
 47c:	ed 91       	ld	r30, X+
 47e:	fc 91       	ld	r31, X
 480:	15 97       	sbiw	r26, 0x05	; 5
 482:	20 81       	ld	r18, Z
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	16 96       	adiw	r26, 0x06	; 6
 48a:	0c 90       	ld	r0, X
 48c:	02 c0       	rjmp	.+4      	; 0x492 <getxkey+0x36>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <getxkey+0x32>
 496:	80 95       	com	r24
 498:	82 23       	and	r24, r18
 49a:	80 83       	st	Z, r24
		for (uint8_t c =4; c<8; c++)
 49c:	24 e0       	ldi	r18, 0x04	; 4
 49e:	3f c0       	rjmp	.+126    	; 0x51e <getxkey+0xc2>
		{
			if((*(keypad[c].pin) & _BV(keypad[c].bit))==0){
 4a0:	42 2f       	mov	r20, r18
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	fa 01       	movw	r30, r20
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	e4 1b       	sub	r30, r20
 4b4:	f5 0b       	sbc	r31, r21
 4b6:	e1 5e       	subi	r30, 0xE1	; 225
 4b8:	fd 4f       	sbci	r31, 0xFD	; 253
 4ba:	a2 81       	ldd	r26, Z+2	; 0x02
 4bc:	b3 81       	ldd	r27, Z+3	; 0x03
 4be:	8c 91       	ld	r24, X
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	06 80       	ldd	r0, Z+6	; 0x06
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <getxkey+0x6e>
 4c6:	95 95       	asr	r25
 4c8:	87 95       	ror	r24
 4ca:	0a 94       	dec	r0
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <getxkey+0x6a>
 4ce:	80 fd       	sbrc	r24, 0
 4d0:	25 c0       	rjmp	.+74     	; 0x51c <getxkey+0xc0>
				// set row to high (1)
				*(keypad[b].port) |= _BV(keypad[b].bit);
 4d2:	fb 01       	movw	r30, r22
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	ee 0f       	add	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	e6 1b       	sub	r30, r22
 4e2:	f7 0b       	sbc	r31, r23
 4e4:	e1 5e       	subi	r30, 0xE1	; 225
 4e6:	fd 4f       	sbci	r31, 0xFD	; 253
 4e8:	a4 81       	ldd	r26, Z+4	; 0x04
 4ea:	b5 81       	ldd	r27, Z+5	; 0x05
 4ec:	2c 91       	ld	r18, X
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	06 80       	ldd	r0, Z+6	; 0x06
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <getxkey+0x9e>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	0a 94       	dec	r0
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <getxkey+0x9a>
 4fe:	82 2b       	or	r24, r18
 500:	8c 93       	st	X, r24
				return val[b][c-4];
 502:	44 50       	subi	r20, 0x04	; 4
 504:	51 09       	sbc	r21, r1
 506:	fb 01       	movw	r30, r22
 508:	ee 0f       	add	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	ee 0f       	add	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	e1 5f       	subi	r30, 0xF1	; 241
 512:	fd 4f       	sbci	r31, 0xFD	; 253
 514:	e4 0f       	add	r30, r20
 516:	f5 1f       	adc	r31, r21
 518:	80 81       	ld	r24, Z
 51a:	08 95       	ret
int8_t getxkey(){
	for (uint8_t b =0; b<4; b++)
	{
		// Set row to low (0)
		*(keypad[b].port) &= ~_BV(keypad[b].bit);
		for (uint8_t c =4; c<8; c++)
 51c:	2f 5f       	subi	r18, 0xFF	; 255
 51e:	28 30       	cpi	r18, 0x08	; 8
 520:	08 f4       	brcc	.+2      	; 0x524 <getxkey+0xc8>
 522:	be cf       	rjmp	.-132    	; 0x4a0 <getxkey+0x44>
			
			
			
		}
		// set row to high (1)
		*(keypad[b].port) |= _BV(keypad[b].bit);
 524:	fb 01       	movw	r30, r22
 526:	ee 0f       	add	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	e6 1b       	sub	r30, r22
 534:	f7 0b       	sbc	r31, r23
 536:	e1 5e       	subi	r30, 0xE1	; 225
 538:	fd 4f       	sbci	r31, 0xFD	; 253
 53a:	a4 81       	ldd	r26, Z+4	; 0x04
 53c:	b5 81       	ldd	r27, Z+5	; 0x05
 53e:	2c 91       	ld	r18, X
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	06 80       	ldd	r0, Z+6	; 0x06
 546:	02 c0       	rjmp	.+4      	; 0x54c <getxkey+0xf0>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	0a 94       	dec	r0
 54e:	e2 f7       	brpl	.-8      	; 0x548 <getxkey+0xec>
 550:	82 2b       	or	r24, r18
 552:	8c 93       	st	X, r24
{4,5,6,11},
{7,8,9,12},
{13,0,14,15}};

int8_t getxkey(){
	for (uint8_t b =0; b<4; b++)
 554:	3f 5f       	subi	r19, 0xFF	; 255
 556:	34 30       	cpi	r19, 0x04	; 4
 558:	08 f4       	brcc	.+2      	; 0x55c <getxkey+0x100>
 55a:	82 cf       	rjmp	.-252    	; 0x460 <getxkey+0x4>
		}
		// set row to high (1)
		*(keypad[b].port) |= _BV(keypad[b].bit);
	}
	
	return 127;
 55c:	8f e7       	ldi	r24, 0x7F	; 127
}
 55e:	08 95       	ret

00000560 <mv_to_c>:
static void (*cb)(uint8_t deg_c) = 0;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
 560:	9c 01       	movw	r18, r24
 562:	24 5f       	subi	r18, 0xF4	; 244
 564:	31 40       	sbci	r19, 0x01	; 1
 566:	ad ec       	ldi	r26, 0xCD	; 205
 568:	bc ec       	ldi	r27, 0xCC	; 204
 56a:	ca d1       	rcall	.+916    	; 0x900 <__umulhisi3>
 56c:	96 95       	lsr	r25
 56e:	87 95       	ror	r24
 570:	96 95       	lsr	r25
 572:	87 95       	ror	r24
 574:	96 95       	lsr	r25
 576:	87 95       	ror	r24
}
 578:	08 95       	ret

0000057a <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
 57a:	bc 01       	movw	r22, r24
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	ce d0       	rcall	.+412    	; 0x71e <__floatunsisf>
 582:	2a e1       	ldi	r18, 0x1A	; 26
 584:	37 e6       	ldi	r19, 0x67	; 103
 586:	4c e9       	ldi	r20, 0x9C	; 156
 588:	50 e4       	ldi	r21, 0x40	; 64
 58a:	2f d1       	rcall	.+606    	; 0x7ea <__mulsf3>
 58c:	9c d0       	rcall	.+312    	; 0x6c6 <__fixunssfsi>
}
 58e:	cb 01       	movw	r24, r22
 590:	08 95       	ret

00000592 <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
 592:	9c 01       	movw	r18, r24
	// **** General config *****
	
	// Set PK7 direction as input (TMP36 Vout)
	DDRK &= ~_BV(v_out);
 594:	e7 e0       	ldi	r30, 0x07	; 7
 596:	f1 e0       	ldi	r31, 0x01	; 1
 598:	80 81       	ld	r24, Z
 59a:	8f 77       	andi	r24, 0x7F	; 127
 59c:	80 83       	st	Z, r24
	
	// Set PG0 direction as output (TMP36 Enable)
	DDRG |= _BV(enable);  
 59e:	83 b3       	in	r24, 0x13	; 19
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	83 bb       	out	0x13, r24	; 19

	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
 5a4:	ec e7       	ldi	r30, 0x7C	; 124
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	80 64       	ori	r24, 0x40	; 64
 5ac:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
 5ae:	80 81       	ld	r24, Z
 5b0:	87 60       	ori	r24, 0x07	; 7
 5b2:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 5b4:	ab e7       	ldi	r26, 0x7B	; 123
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	8c 91       	ld	r24, X
 5ba:	88 60       	ori	r24, 0x08	; 8
 5bc:	8c 93       	st	X, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
 5be:	ea e7       	ldi	r30, 0x7A	; 122
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	86 60       	ori	r24, 0x06	; 6
 5c6:	80 83       	st	Z, r24

	// Enable ADC  
	ADCSRA |= _BV(ADEN);
 5c8:	80 81       	ld	r24, Z
 5ca:	80 68       	ori	r24, 0x80	; 128
 5cc:	80 83       	st	Z, r24
	// ****** General config end *************
	
	// ****** Interrupt and auto trigger ****
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
 5ce:	80 81       	ld	r24, Z
 5d0:	88 60       	ori	r24, 0x08	; 8
 5d2:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
 5d4:	80 81       	ld	r24, Z
 5d6:	80 62       	ori	r24, 0x20	; 32
 5d8:	80 83       	st	Z, r24
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 5da:	8c 91       	ld	r24, X
 5dc:	85 60       	ori	r24, 0x05	; 5
 5de:	8c 93       	st	X, r24
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1A |= _BV(WGM12);
 5e0:	e0 e8       	ldi	r30, 0x80	; 128
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	90 81       	ld	r25, Z
 5e6:	98 60       	ori	r25, 0x08	; 8
 5e8:	90 83       	st	Z, r25
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
 5ea:	90 81       	ld	r25, Z
 5ec:	90 61       	ori	r25, 0x10	; 16
 5ee:	90 83       	st	Z, r25
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
 5f0:	e1 e8       	ldi	r30, 0x81	; 129
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	90 81       	ld	r25, Z
 5f6:	94 60       	ori	r25, 0x04	; 4
 5f8:	90 83       	st	Z, r25
	
	// Enable Timer Interrupt
	TIMSK1 |= _BV(OCIE1B);
 5fa:	ef e6       	ldi	r30, 0x6F	; 111
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	90 81       	ld	r25, Z
 600:	94 60       	ori	r25, 0x04	; 4
 602:	90 83       	st	Z, r25

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
 604:	81 e1       	ldi	r24, 0x11	; 17
 606:	9a e7       	ldi	r25, 0x7A	; 122
 608:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 60c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
 610:	21 15       	cp	r18, r1
 612:	31 05       	cpc	r19, r1
 614:	21 f0       	breq	.+8      	; 0x61e <tmp36_init+0x8c>
		cb = callback;
 616:	30 93 5a 02 	sts	0x025A, r19	; 0x80025a <cb+0x1>
 61a:	20 93 59 02 	sts	0x0259, r18	; 0x800259 <cb>
	
	// Enable TMP36
	PORTG |= _BV(enable);
 61e:	84 b3       	in	r24, 0x14	; 20
 620:	81 60       	ori	r24, 0x01	; 1
 622:	84 bb       	out	0x14, r24	; 20
	
	// Start Conversion.
	ADCSRA |= _BV(ADSC);
 624:	ea e7       	ldi	r30, 0x7A	; 122
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	80 64       	ori	r24, 0x40	; 64
 62c:	80 83       	st	Z, r24
 62e:	08 95       	ret

00000630 <__vector_29>:
}

// AD Interrupt callback.
ISR(ADC_vect)
{
 630:	1f 92       	push	r1
 632:	0f 92       	push	r0
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	0f 92       	push	r0
 638:	11 24       	eor	r1, r1
 63a:	0b b6       	in	r0, 0x3b	; 59
 63c:	0f 92       	push	r0
 63e:	2f 93       	push	r18
 640:	3f 93       	push	r19
 642:	4f 93       	push	r20
 644:	5f 93       	push	r21
 646:	6f 93       	push	r22
 648:	7f 93       	push	r23
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	af 93       	push	r26
 650:	bf 93       	push	r27
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	ef 93       	push	r30
 658:	ff 93       	push	r31
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
 65a:	c0 91 59 02 	lds	r28, 0x0259	; 0x800259 <cb>
 65e:	d0 91 5a 02 	lds	r29, 0x025A	; 0x80025a <cb+0x1>
 662:	20 97       	sbiw	r28, 0x00	; 0
 664:	41 f0       	breq	.+16     	; 0x676 <__vector_29+0x46>
		cb(mv_to_c(adc_to_mv(ADC)));
 666:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 66a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 66e:	85 df       	rcall	.-246    	; 0x57a <adc_to_mv>
 670:	77 df       	rcall	.-274    	; 0x560 <mv_to_c>
 672:	fe 01       	movw	r30, r28
 674:	19 95       	eicall
	
	// ADC interrupt flag is high!
	// Clear ADC interrupt flag.
	ADCSRA |= ~_BV(ADIF);
 676:	ea e7       	ldi	r30, 0x7A	; 122
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	8f 6e       	ori	r24, 0xEF	; 239
 67e:	80 83       	st	Z, r24
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	bf 91       	pop	r27
 68a:	af 91       	pop	r26
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	7f 91       	pop	r23
 692:	6f 91       	pop	r22
 694:	5f 91       	pop	r21
 696:	4f 91       	pop	r20
 698:	3f 91       	pop	r19
 69a:	2f 91       	pop	r18
 69c:	0f 90       	pop	r0
 69e:	0b be       	out	0x3b, r0	; 59
 6a0:	0f 90       	pop	r0
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	0f 90       	pop	r0
 6a6:	1f 90       	pop	r1
 6a8:	18 95       	reti

000006aa <new_measurement>:
// Offset 17 = led 1-8 @ 18-25 deg C.
#define offset 17
static uint8_t temp = 0;

static void new_measurement(uint8_t deg_c)
{
 6aa:	08 95       	ret

000006ac <main>:
}


int main(void)
{
	init_leds();
 6ac:	85 de       	rcall	.-758    	; 0x3b8 <init_leds>
	tmp36_init(new_measurement);
 6ae:	85 e5       	ldi	r24, 0x55	; 85
 6b0:	93 e0       	ldi	r25, 0x03	; 3
	init_display();
 6b2:	6f df       	rcall	.-290    	; 0x592 <tmp36_init>
	init_matrix_keyboard();
 6b4:	df dd       	rcall	.-1090   	; 0x274 <init_display>
 6b6:	84 de       	rcall	.-760    	; 0x3c0 <init_matrix_keyboard>
	
	// Enable interrupt globally.
	sei();
 6b8:	78 94       	sei
	int8_t bob = 0;
	
    while (1) 
    {
		bob = getxkey();
 6ba:	d0 de       	rcall	.-608    	; 0x45c <getxkey>
		//_delay_ms(500);
		printint_4u(bob);
 6bc:	08 2e       	mov	r0, r24
 6be:	00 0c       	add	r0, r0
 6c0:	99 0b       	sbc	r25, r25
 6c2:	30 dd       	rcall	.-1440   	; 0x124 <printint_4u>
 6c4:	fa cf       	rjmp	.-12     	; 0x6ba <main+0xe>

000006c6 <__fixunssfsi>:
 6c6:	70 d0       	rcall	.+224    	; 0x7a8 <__fp_splitA>
 6c8:	88 f0       	brcs	.+34     	; 0x6ec <__fixunssfsi+0x26>
 6ca:	9f 57       	subi	r25, 0x7F	; 127
 6cc:	90 f0       	brcs	.+36     	; 0x6f2 <__fixunssfsi+0x2c>
 6ce:	b9 2f       	mov	r27, r25
 6d0:	99 27       	eor	r25, r25
 6d2:	b7 51       	subi	r27, 0x17	; 23
 6d4:	a0 f0       	brcs	.+40     	; 0x6fe <__fixunssfsi+0x38>
 6d6:	d1 f0       	breq	.+52     	; 0x70c <__fixunssfsi+0x46>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	1a f0       	brmi	.+6      	; 0x6e8 <__fixunssfsi+0x22>
 6e2:	ba 95       	dec	r27
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__fixunssfsi+0x12>
 6e6:	12 c0       	rjmp	.+36     	; 0x70c <__fixunssfsi+0x46>
 6e8:	b1 30       	cpi	r27, 0x01	; 1
 6ea:	81 f0       	breq	.+32     	; 0x70c <__fixunssfsi+0x46>
 6ec:	77 d0       	rcall	.+238    	; 0x7dc <__fp_zero>
 6ee:	b1 e0       	ldi	r27, 0x01	; 1
 6f0:	08 95       	ret
 6f2:	74 c0       	rjmp	.+232    	; 0x7dc <__fp_zero>
 6f4:	67 2f       	mov	r22, r23
 6f6:	78 2f       	mov	r23, r24
 6f8:	88 27       	eor	r24, r24
 6fa:	b8 5f       	subi	r27, 0xF8	; 248
 6fc:	39 f0       	breq	.+14     	; 0x70c <__fixunssfsi+0x46>
 6fe:	b9 3f       	cpi	r27, 0xF9	; 249
 700:	cc f3       	brlt	.-14     	; 0x6f4 <__fixunssfsi+0x2e>
 702:	86 95       	lsr	r24
 704:	77 95       	ror	r23
 706:	67 95       	ror	r22
 708:	b3 95       	inc	r27
 70a:	d9 f7       	brne	.-10     	; 0x702 <__fixunssfsi+0x3c>
 70c:	3e f4       	brtc	.+14     	; 0x71c <__fixunssfsi+0x56>
 70e:	90 95       	com	r25
 710:	80 95       	com	r24
 712:	70 95       	com	r23
 714:	61 95       	neg	r22
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	08 95       	ret

0000071e <__floatunsisf>:
 71e:	e8 94       	clt
 720:	09 c0       	rjmp	.+18     	; 0x734 <__floatsisf+0x12>

00000722 <__floatsisf>:
 722:	97 fb       	bst	r25, 7
 724:	3e f4       	brtc	.+14     	; 0x734 <__floatsisf+0x12>
 726:	90 95       	com	r25
 728:	80 95       	com	r24
 72a:	70 95       	com	r23
 72c:	61 95       	neg	r22
 72e:	7f 4f       	sbci	r23, 0xFF	; 255
 730:	8f 4f       	sbci	r24, 0xFF	; 255
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	99 23       	and	r25, r25
 736:	a9 f0       	breq	.+42     	; 0x762 <__floatsisf+0x40>
 738:	f9 2f       	mov	r31, r25
 73a:	96 e9       	ldi	r25, 0x96	; 150
 73c:	bb 27       	eor	r27, r27
 73e:	93 95       	inc	r25
 740:	f6 95       	lsr	r31
 742:	87 95       	ror	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	b7 95       	ror	r27
 74a:	f1 11       	cpse	r31, r1
 74c:	f8 cf       	rjmp	.-16     	; 0x73e <__floatsisf+0x1c>
 74e:	fa f4       	brpl	.+62     	; 0x78e <__floatsisf+0x6c>
 750:	bb 0f       	add	r27, r27
 752:	11 f4       	brne	.+4      	; 0x758 <__floatsisf+0x36>
 754:	60 ff       	sbrs	r22, 0
 756:	1b c0       	rjmp	.+54     	; 0x78e <__floatsisf+0x6c>
 758:	6f 5f       	subi	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	16 c0       	rjmp	.+44     	; 0x78e <__floatsisf+0x6c>
 762:	88 23       	and	r24, r24
 764:	11 f0       	breq	.+4      	; 0x76a <__floatsisf+0x48>
 766:	96 e9       	ldi	r25, 0x96	; 150
 768:	11 c0       	rjmp	.+34     	; 0x78c <__floatsisf+0x6a>
 76a:	77 23       	and	r23, r23
 76c:	21 f0       	breq	.+8      	; 0x776 <__floatsisf+0x54>
 76e:	9e e8       	ldi	r25, 0x8E	; 142
 770:	87 2f       	mov	r24, r23
 772:	76 2f       	mov	r23, r22
 774:	05 c0       	rjmp	.+10     	; 0x780 <__floatsisf+0x5e>
 776:	66 23       	and	r22, r22
 778:	71 f0       	breq	.+28     	; 0x796 <__floatsisf+0x74>
 77a:	96 e8       	ldi	r25, 0x86	; 134
 77c:	86 2f       	mov	r24, r22
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	2a f0       	brmi	.+10     	; 0x78e <__floatsisf+0x6c>
 784:	9a 95       	dec	r25
 786:	66 0f       	add	r22, r22
 788:	77 1f       	adc	r23, r23
 78a:	88 1f       	adc	r24, r24
 78c:	da f7       	brpl	.-10     	; 0x784 <__floatsisf+0x62>
 78e:	88 0f       	add	r24, r24
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <__fp_split3>:
 798:	57 fd       	sbrc	r21, 7
 79a:	90 58       	subi	r25, 0x80	; 128
 79c:	44 0f       	add	r20, r20
 79e:	55 1f       	adc	r21, r21
 7a0:	59 f0       	breq	.+22     	; 0x7b8 <__fp_splitA+0x10>
 7a2:	5f 3f       	cpi	r21, 0xFF	; 255
 7a4:	71 f0       	breq	.+28     	; 0x7c2 <__fp_splitA+0x1a>
 7a6:	47 95       	ror	r20

000007a8 <__fp_splitA>:
 7a8:	88 0f       	add	r24, r24
 7aa:	97 fb       	bst	r25, 7
 7ac:	99 1f       	adc	r25, r25
 7ae:	61 f0       	breq	.+24     	; 0x7c8 <__fp_splitA+0x20>
 7b0:	9f 3f       	cpi	r25, 0xFF	; 255
 7b2:	79 f0       	breq	.+30     	; 0x7d2 <__fp_splitA+0x2a>
 7b4:	87 95       	ror	r24
 7b6:	08 95       	ret
 7b8:	12 16       	cp	r1, r18
 7ba:	13 06       	cpc	r1, r19
 7bc:	14 06       	cpc	r1, r20
 7be:	55 1f       	adc	r21, r21
 7c0:	f2 cf       	rjmp	.-28     	; 0x7a6 <__fp_split3+0xe>
 7c2:	46 95       	lsr	r20
 7c4:	f1 df       	rcall	.-30     	; 0x7a8 <__fp_splitA>
 7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <__fp_splitA+0x30>
 7c8:	16 16       	cp	r1, r22
 7ca:	17 06       	cpc	r1, r23
 7cc:	18 06       	cpc	r1, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	f1 cf       	rjmp	.-30     	; 0x7b4 <__fp_splitA+0xc>
 7d2:	86 95       	lsr	r24
 7d4:	71 05       	cpc	r23, r1
 7d6:	61 05       	cpc	r22, r1
 7d8:	08 94       	sec
 7da:	08 95       	ret

000007dc <__fp_zero>:
 7dc:	e8 94       	clt

000007de <__fp_szero>:
 7de:	bb 27       	eor	r27, r27
 7e0:	66 27       	eor	r22, r22
 7e2:	77 27       	eor	r23, r23
 7e4:	cb 01       	movw	r24, r22
 7e6:	97 f9       	bld	r25, 7
 7e8:	08 95       	ret

000007ea <__mulsf3>:
 7ea:	0b d0       	rcall	.+22     	; 0x802 <__mulsf3x>
 7ec:	78 c0       	rjmp	.+240    	; 0x8de <__fp_round>
 7ee:	69 d0       	rcall	.+210    	; 0x8c2 <__fp_pscA>
 7f0:	28 f0       	brcs	.+10     	; 0x7fc <__mulsf3+0x12>
 7f2:	6e d0       	rcall	.+220    	; 0x8d0 <__fp_pscB>
 7f4:	18 f0       	brcs	.+6      	; 0x7fc <__mulsf3+0x12>
 7f6:	95 23       	and	r25, r21
 7f8:	09 f0       	breq	.+2      	; 0x7fc <__mulsf3+0x12>
 7fa:	5a c0       	rjmp	.+180    	; 0x8b0 <__fp_inf>
 7fc:	5f c0       	rjmp	.+190    	; 0x8bc <__fp_nan>
 7fe:	11 24       	eor	r1, r1
 800:	ee cf       	rjmp	.-36     	; 0x7de <__fp_szero>

00000802 <__mulsf3x>:
 802:	ca df       	rcall	.-108    	; 0x798 <__fp_split3>
 804:	a0 f3       	brcs	.-24     	; 0x7ee <__mulsf3+0x4>

00000806 <__mulsf3_pse>:
 806:	95 9f       	mul	r25, r21
 808:	d1 f3       	breq	.-12     	; 0x7fe <__mulsf3+0x14>
 80a:	95 0f       	add	r25, r21
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	55 1f       	adc	r21, r21
 810:	62 9f       	mul	r22, r18
 812:	f0 01       	movw	r30, r0
 814:	72 9f       	mul	r23, r18
 816:	bb 27       	eor	r27, r27
 818:	f0 0d       	add	r31, r0
 81a:	b1 1d       	adc	r27, r1
 81c:	63 9f       	mul	r22, r19
 81e:	aa 27       	eor	r26, r26
 820:	f0 0d       	add	r31, r0
 822:	b1 1d       	adc	r27, r1
 824:	aa 1f       	adc	r26, r26
 826:	64 9f       	mul	r22, r20
 828:	66 27       	eor	r22, r22
 82a:	b0 0d       	add	r27, r0
 82c:	a1 1d       	adc	r26, r1
 82e:	66 1f       	adc	r22, r22
 830:	82 9f       	mul	r24, r18
 832:	22 27       	eor	r18, r18
 834:	b0 0d       	add	r27, r0
 836:	a1 1d       	adc	r26, r1
 838:	62 1f       	adc	r22, r18
 83a:	73 9f       	mul	r23, r19
 83c:	b0 0d       	add	r27, r0
 83e:	a1 1d       	adc	r26, r1
 840:	62 1f       	adc	r22, r18
 842:	83 9f       	mul	r24, r19
 844:	a0 0d       	add	r26, r0
 846:	61 1d       	adc	r22, r1
 848:	22 1f       	adc	r18, r18
 84a:	74 9f       	mul	r23, r20
 84c:	33 27       	eor	r19, r19
 84e:	a0 0d       	add	r26, r0
 850:	61 1d       	adc	r22, r1
 852:	23 1f       	adc	r18, r19
 854:	84 9f       	mul	r24, r20
 856:	60 0d       	add	r22, r0
 858:	21 1d       	adc	r18, r1
 85a:	82 2f       	mov	r24, r18
 85c:	76 2f       	mov	r23, r22
 85e:	6a 2f       	mov	r22, r26
 860:	11 24       	eor	r1, r1
 862:	9f 57       	subi	r25, 0x7F	; 127
 864:	50 40       	sbci	r21, 0x00	; 0
 866:	8a f0       	brmi	.+34     	; 0x88a <__mulsf3_pse+0x84>
 868:	e1 f0       	breq	.+56     	; 0x8a2 <__mulsf3_pse+0x9c>
 86a:	88 23       	and	r24, r24
 86c:	4a f0       	brmi	.+18     	; 0x880 <__mulsf3_pse+0x7a>
 86e:	ee 0f       	add	r30, r30
 870:	ff 1f       	adc	r31, r31
 872:	bb 1f       	adc	r27, r27
 874:	66 1f       	adc	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	91 50       	subi	r25, 0x01	; 1
 87c:	50 40       	sbci	r21, 0x00	; 0
 87e:	a9 f7       	brne	.-22     	; 0x86a <__mulsf3_pse+0x64>
 880:	9e 3f       	cpi	r25, 0xFE	; 254
 882:	51 05       	cpc	r21, r1
 884:	70 f0       	brcs	.+28     	; 0x8a2 <__mulsf3_pse+0x9c>
 886:	14 c0       	rjmp	.+40     	; 0x8b0 <__fp_inf>
 888:	aa cf       	rjmp	.-172    	; 0x7de <__fp_szero>
 88a:	5f 3f       	cpi	r21, 0xFF	; 255
 88c:	ec f3       	brlt	.-6      	; 0x888 <__mulsf3_pse+0x82>
 88e:	98 3e       	cpi	r25, 0xE8	; 232
 890:	dc f3       	brlt	.-10     	; 0x888 <__mulsf3_pse+0x82>
 892:	86 95       	lsr	r24
 894:	77 95       	ror	r23
 896:	67 95       	ror	r22
 898:	b7 95       	ror	r27
 89a:	f7 95       	ror	r31
 89c:	e7 95       	ror	r30
 89e:	9f 5f       	subi	r25, 0xFF	; 255
 8a0:	c1 f7       	brne	.-16     	; 0x892 <__mulsf3_pse+0x8c>
 8a2:	fe 2b       	or	r31, r30
 8a4:	88 0f       	add	r24, r24
 8a6:	91 1d       	adc	r25, r1
 8a8:	96 95       	lsr	r25
 8aa:	87 95       	ror	r24
 8ac:	97 f9       	bld	r25, 7
 8ae:	08 95       	ret

000008b0 <__fp_inf>:
 8b0:	97 f9       	bld	r25, 7
 8b2:	9f 67       	ori	r25, 0x7F	; 127
 8b4:	80 e8       	ldi	r24, 0x80	; 128
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	08 95       	ret

000008bc <__fp_nan>:
 8bc:	9f ef       	ldi	r25, 0xFF	; 255
 8be:	80 ec       	ldi	r24, 0xC0	; 192
 8c0:	08 95       	ret

000008c2 <__fp_pscA>:
 8c2:	00 24       	eor	r0, r0
 8c4:	0a 94       	dec	r0
 8c6:	16 16       	cp	r1, r22
 8c8:	17 06       	cpc	r1, r23
 8ca:	18 06       	cpc	r1, r24
 8cc:	09 06       	cpc	r0, r25
 8ce:	08 95       	ret

000008d0 <__fp_pscB>:
 8d0:	00 24       	eor	r0, r0
 8d2:	0a 94       	dec	r0
 8d4:	12 16       	cp	r1, r18
 8d6:	13 06       	cpc	r1, r19
 8d8:	14 06       	cpc	r1, r20
 8da:	05 06       	cpc	r0, r21
 8dc:	08 95       	ret

000008de <__fp_round>:
 8de:	09 2e       	mov	r0, r25
 8e0:	03 94       	inc	r0
 8e2:	00 0c       	add	r0, r0
 8e4:	11 f4       	brne	.+4      	; 0x8ea <__fp_round+0xc>
 8e6:	88 23       	and	r24, r24
 8e8:	52 f0       	brmi	.+20     	; 0x8fe <__fp_round+0x20>
 8ea:	bb 0f       	add	r27, r27
 8ec:	40 f4       	brcc	.+16     	; 0x8fe <__fp_round+0x20>
 8ee:	bf 2b       	or	r27, r31
 8f0:	11 f4       	brne	.+4      	; 0x8f6 <__fp_round+0x18>
 8f2:	60 ff       	sbrs	r22, 0
 8f4:	04 c0       	rjmp	.+8      	; 0x8fe <__fp_round+0x20>
 8f6:	6f 5f       	subi	r22, 0xFF	; 255
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	08 95       	ret

00000900 <__umulhisi3>:
 900:	a2 9f       	mul	r26, r18
 902:	b0 01       	movw	r22, r0
 904:	b3 9f       	mul	r27, r19
 906:	c0 01       	movw	r24, r0
 908:	a3 9f       	mul	r26, r19
 90a:	70 0d       	add	r23, r0
 90c:	81 1d       	adc	r24, r1
 90e:	11 24       	eor	r1, r1
 910:	91 1d       	adc	r25, r1
 912:	b2 9f       	mul	r27, r18
 914:	70 0d       	add	r23, r0
 916:	81 1d       	adc	r24, r1
 918:	11 24       	eor	r1, r1
 91a:	91 1d       	adc	r25, r1
 91c:	08 95       	ret

0000091e <_exit>:
 91e:	f8 94       	cli

00000920 <__stop_program>:
 920:	ff cf       	rjmp	.-2      	; 0x920 <__stop_program>
