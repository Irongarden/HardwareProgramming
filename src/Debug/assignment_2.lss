
assignment_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800200  00000b5a  00000bee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800256  00800256  00000c44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ab0  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a6  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd9  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00004944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f1  00000000  00000000  00004c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ce  00000000  00000000  000053f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005cc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	43 c3       	rjmp	.+1670   	; 0x6fc <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	0a c1       	rjmp	.+532    	; 0x2be <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e5       	ldi	r30, 0x5A	; 90
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 35       	cpi	r26, 0x56	; 86
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e5       	ldi	r26, 0x56	; 86
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 36       	cpi	r26, 0x69	; 105
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	db d3       	rcall	.+1974   	; 0x8d6 <main>
 120:	1a c5       	rjmp	.+2612   	; 0xb56 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <set_refresh_rate>:
static uint8_t display[SEGMENTS] = {0x0, 0x0, 0x0, 0x0};

static void set_refresh_rate() 
{
	// Set timer toggle on compare match
	//TCCR4A |= _BV(COM4A0);
 124:	e0 ea       	ldi	r30, 0xA0	; 160
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	
	// Set prescaler 8
	TCCR4B |= _BV(CS41);
 12e:	e1 ea       	ldi	r30, 0xA1	; 161
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
	
	// Set to Clear timer on compare match (CTC mode)
	TCCR4B |= _BV(WGM42);
 138:	80 81       	ld	r24, Z
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	80 83       	st	Z, r24
	
	// Enable Timer interrupt
	TIMSK4 |= _BV(OCIE4A);
 13e:	e2 e7       	ldi	r30, 0x72	; 114
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
	
	// Set timer frequency 60Hz/digit (16000000 / (2*60*4*8))-1 = 4165.6
	OCR4A = 4166;
 148:	86 e4       	ldi	r24, 0x46	; 70
 14a:	90 e1       	ldi	r25, 0x10	; 16
 14c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 150:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 154:	08 95       	ret

00000156 <get_display_code>:
// Returns display code equivalent to digit value.
// If a zero is found, it will determine if it should return code equivalent to 0 or turn off the segment based on values in more significant segments.
static uint8_t get_display_code(uint8_t segment)
{
	// Least significant segment is allowed to be zero.
	if (segment == SEGMENTS - 1)
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	51 f4       	brne	.+20     	; 0x16e <get_display_code+0x18>
		return display_code[digits[segment]];
 15a:	e8 2f       	mov	r30, r24
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e6 5a       	subi	r30, 0xA6	; 166
 160:	fd 4f       	sbci	r31, 0xFD	; 253
 162:	e0 81       	ld	r30, Z
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	ed 5f       	subi	r30, 0xFD	; 253
 168:	fd 4f       	sbci	r31, 0xFD	; 253
 16a:	80 81       	ld	r24, Z
 16c:	08 95       	ret
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
 16e:	e8 2f       	mov	r30, r24
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e6 5a       	subi	r30, 0xA6	; 166
 174:	fd 4f       	sbci	r31, 0xFD	; 253
 176:	e0 81       	ld	r30, Z
 178:	e1 11       	cpse	r30, r1
 17a:	04 c0       	rjmp	.+8      	; 0x184 <get_display_code+0x2e>
 17c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 180:	81 11       	cpse	r24, r1
 182:	0a c0       	rjmp	.+20     	; 0x198 <get_display_code+0x42>
		return display_code[10];
	
	// First time a non-zero value is found leading zeros will be false. 
	// This effectively returns less significant zeros to display code equivalent to zero instead of having them turned off.
	if (leading_zeros)
 184:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 188:	81 11       	cpse	r24, r1
		leading_zeros = 0;
 18a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ed 5f       	subi	r30, 0xFD	; 253
 192:	fd 4f       	sbci	r31, 0xFD	; 253
 194:	80 81       	ld	r24, Z
 196:	08 95       	ret
	if (segment == SEGMENTS - 1)
		return display_code[digits[segment]];
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
		return display_code[10];
 198:	8f ef       	ldi	r24, 0xFF	; 255
	if (leading_zeros)
		leading_zeros = 0;

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
}
 19a:	08 95       	ret

0000019c <set_display_code>:

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
	leading_zeros = 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	for (uint8_t i = 0; i < SEGMENTS; i++) 
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	09 c0       	rjmp	.+18     	; 0x1be <set_display_code+0x22>
		display[i] = get_display_code(i);
 1ac:	0c 2f       	mov	r16, r28
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	8c 2f       	mov	r24, r28
 1b2:	d1 df       	rcall	.-94     	; 0x156 <get_display_code>
 1b4:	f8 01       	movw	r30, r16
 1b6:	ea 5a       	subi	r30, 0xAA	; 170
 1b8:	fd 4f       	sbci	r31, 0xFD	; 253
 1ba:	80 83       	st	Z, r24
}

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
	leading_zeros = 1;
	for (uint8_t i = 0; i < SEGMENTS; i++) 
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	c4 30       	cpi	r28, 0x04	; 4
 1c0:	a8 f3       	brcs	.-22     	; 0x1ac <set_display_code+0x10>
		display[i] = get_display_code(i);
}
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <split_digits>:

// Splits number into separate digits.
static void split_digits(uint16_t value, uint8_t digit) {
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	fc 01       	movw	r30, r24
	
	// Base case - Done.
	if (digit == 0)
 1d0:	61 11       	cpse	r22, r1
 1d2:	1f c0       	rjmp	.+62     	; 0x212 <split_digits+0x48>
		digits[digit] = value % 10;
 1d4:	46 2f       	mov	r20, r22
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	9c 01       	movw	r18, r24
 1da:	ad ec       	ldi	r26, 0xCD	; 205
 1dc:	bc ec       	ldi	r27, 0xCC	; 204
 1de:	ac d4       	rcall	.+2392   	; 0xb38 <__umulhisi3>
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	9c 01       	movw	r18, r24
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	82 0f       	add	r24, r18
 200:	93 1f       	adc	r25, r19
 202:	9f 01       	movw	r18, r30
 204:	28 1b       	sub	r18, r24
 206:	39 0b       	sbc	r19, r25
 208:	fa 01       	movw	r30, r20
 20a:	e6 5a       	subi	r30, 0xA6	; 166
 20c:	fd 4f       	sbci	r31, 0xFD	; 253
 20e:	20 83       	st	Z, r18
 210:	29 c0       	rjmp	.+82     	; 0x264 <split_digits+0x9a>
 212:	46 2f       	mov	r20, r22
	else {
		digits[digit] = value % 10;
 214:	c6 2f       	mov	r28, r22
 216:	d0 e0       	ldi	r29, 0x00	; 0
 218:	9c 01       	movw	r18, r24
 21a:	ad ec       	ldi	r26, 0xCD	; 205
 21c:	bc ec       	ldi	r27, 0xCC	; 204
 21e:	8c d4       	rcall	.+2328   	; 0xb38 <__umulhisi3>
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	9c 01       	movw	r18, r24
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	82 0f       	add	r24, r18
 240:	93 1f       	adc	r25, r19
 242:	9f 01       	movw	r18, r30
 244:	28 1b       	sub	r18, r24
 246:	39 0b       	sbc	r19, r25
 248:	c6 5a       	subi	r28, 0xA6	; 166
 24a:	dd 4f       	sbci	r29, 0xFD	; 253
 24c:	28 83       	st	Y, r18
		value = value / 10;
 24e:	9f 01       	movw	r18, r30
 250:	73 d4       	rcall	.+2278   	; 0xb38 <__umulhisi3>
 252:	6f ef       	ldi	r22, 0xFF	; 255
		
		// Recurse until done.
		digit--;
 254:	64 0f       	add	r22, r20
 256:	96 95       	lsr	r25
		split_digits(value, digit);
 258:	87 95       	ror	r24
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	b3 df       	rcall	.-154    	; 0x1ca <split_digits>
 264:	df 91       	pop	r29
	}
}
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <init_display>:
 26a:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <communication>
void init_display(communication_t mode) {
	// Set communication mode.
	communication = mode;
	
	// Set PF0-PF3 to output (digits)
	DDRF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
 26e:	80 b3       	in	r24, 0x10	; 16
 270:	8f 60       	ori	r24, 0x0F	; 15
 272:	80 bb       	out	0x10, r24	; 16
	
	// Set SI to output
	DDRB |= _BV(SI);
 274:	84 b1       	in	r24, 0x04	; 4
 276:	84 60       	ori	r24, 0x04	; 4
 278:	84 b9       	out	0x04, r24	; 4
	
	// Set SCK to output
	DDRB |= _BV(SCK);
 27a:	84 b1       	in	r24, 0x04	; 4
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	84 b9       	out	0x04, r24	; 4
	
	// Set RCK to output
	DDRB |= _BV(RCK);
 280:	84 b1       	in	r24, 0x04	; 4
 282:	81 60       	ori	r24, 0x01	; 1
 284:	84 b9       	out	0x04, r24	; 4
	
	if (communication == SPI) {
 286:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <communication>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	91 f4       	brne	.+36     	; 0x2b2 <init_display+0x48>
		// Setup CPOL functionality to sample at rising edge. Setup falling
		SPCR &= ~ (_BV(CPOL) | _BV(CPHA));
 28e:	8c b5       	in	r24, 0x2c	; 44
 290:	83 7f       	andi	r24, 0xF3	; 243
 292:	8c bd       	out	0x2c, r24	; 44
	
		// DORD 0 OR 1: start from least significant bit or opposite.
		SPCR |=_BV(DORD);
 294:	8c b5       	in	r24, 0x2c	; 44
 296:	80 62       	ori	r24, 0x20	; 32
 298:	8c bd       	out	0x2c, r24	; 44
	
		// Set Master.
		SPCR |= _BV(MSTR);
 29a:	8c b5       	in	r24, 0x2c	; 44
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	8c bd       	out	0x2c, r24	; 44
	
		// Set SCK frequency to Fosc/128.
		SPCR |= _BV(SPR1) | _BV(SPR0);
 2a0:	8c b5       	in	r24, 0x2c	; 44
 2a2:	83 60       	ori	r24, 0x03	; 3
 2a4:	8c bd       	out	0x2c, r24	; 44
		SPSR &= ~_BV(SPI2X);
 2a6:	8d b5       	in	r24, 0x2d	; 45
 2a8:	8e 7f       	andi	r24, 0xFE	; 254
 2aa:	8d bd       	out	0x2d, r24	; 45
	
		// Enable SPI.
		SPCR |= _BV(SPE);
 2ac:	8c b5       	in	r24, 0x2c	; 44
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	8c bd       	out	0x2c, r24	; 44
	}
	
	// Initializes timer and interrupt
	set_refresh_rate();
 2b2:	38 cf       	rjmp	.-400    	; 0x124 <set_refresh_rate>
 2b4:	08 95       	ret

000002b6 <printint_4u>:

// Input from application
void printint_4u(uint16_t value) 
{
	// Split digits from least significant value.
	split_digits(value, SEGMENTS - 1);
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	88 df       	rcall	.-240    	; 0x1ca <split_digits>
	set_display_code();
 2ba:	70 cf       	rjmp	.-288    	; 0x19c <set_display_code>
 2bc:	08 95       	ret

000002be <__vector_42>:
 2be:	1f 92       	push	r1
}

ISR(TIMER4_COMPA_vect)
{		
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0b b6       	in	r0, 0x3b	; 59
 2ca:	0f 92       	push	r0
 2cc:	2f 93       	push	r18
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	// Turn off all segments
	PORTF |= _BV(D1) | _BV(D2) | _BV(D3)| _BV(D4);
 2d6:	81 b3       	in	r24, 0x11	; 17
 2d8:	8f 60       	ori	r24, 0x0F	; 15
 2da:	81 bb       	out	0x11, r24	; 17
	
	// Move into storage register.
	PORTB |= _BV(RCK);
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~_BV(RCK);
 2e2:	85 b1       	in	r24, 0x05	; 5
 2e4:	8e 7f       	andi	r24, 0xFE	; 254
 2e6:	85 b9       	out	0x05, r24	; 5
		
	// Turn on current segment.
	PORTF &= ~(_BV(current_segment));
 2e8:	21 b3       	in	r18, 0x11	; 17
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	00 90 5e 02 	lds	r0, 0x025E	; 0x80025e <current_segment>
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <__vector_42+0x3a>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <__vector_42+0x36>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	81 bb       	out	0x11, r24	; 17
	
	// Increment to next segment.
	current_segment++;
 302:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <current_segment>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <current_segment>
		
	// Loops around to first segment again.
	if(current_segment == SEGMENTS)
 30c:	84 30       	cpi	r24, 0x04	; 4
 30e:	11 f4       	brne	.+4      	; 0x314 <__vector_42+0x56>
		current_segment = 0;
 310:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <current_segment>
		
	if (communication == SPI)
 314:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <communication>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	31 f5       	brne	.+76     	; 0x368 <__vector_42+0xaa>
		SPDR = display[current_segment];
 31c:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <current_segment>
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	ea 5a       	subi	r30, 0xAA	; 170
 324:	fd 4f       	sbci	r31, 0xFD	; 253
 326:	80 81       	ld	r24, Z
 328:	8e bd       	out	0x2e, r24	; 46
 32a:	21 c0       	rjmp	.+66     	; 0x36e <__vector_42+0xb0>
	else 
		// Shift display code into register.
		for(uint8_t i = 0; i < 8; i++)
		{
			// bitwise right shift to onto serial input.
			if (display[current_segment] >> i & 1)
 32c:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <current_segment>
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ea 5a       	subi	r30, 0xAA	; 170
 334:	fd 4f       	sbci	r31, 0xFD	; 253
 336:	80 81       	ld	r24, Z
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 2e       	mov	r0, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_42+0x84>
 33e:	95 95       	asr	r25
 340:	87 95       	ror	r24
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <__vector_42+0x80>
 346:	80 ff       	sbrs	r24, 0
 348:	04 c0       	rjmp	.+8      	; 0x352 <__vector_42+0x94>
			PORTB |=_BV(SI);
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	84 60       	ori	r24, 0x04	; 4
 34e:	85 b9       	out	0x05, r24	; 5
 350:	03 c0       	rjmp	.+6      	; 0x358 <__vector_42+0x9a>
			else
			PORTB &= ~_BV(SI);
 352:	85 b1       	in	r24, 0x05	; 5
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	85 b9       	out	0x05, r24	; 5
			
			// Shift into register.
			PORTB |= _BV(SCK);
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	82 60       	ori	r24, 0x02	; 2
 35c:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~_BV(SCK);
 35e:	85 b1       	in	r24, 0x05	; 5
 360:	8d 7f       	andi	r24, 0xFD	; 253
 362:	85 b9       	out	0x05, r24	; 5
		
	if (communication == SPI)
		SPDR = display[current_segment];
	else 
		// Shift display code into register.
		for(uint8_t i = 0; i < 8; i++)
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	01 c0       	rjmp	.+2      	; 0x36a <__vector_42+0xac>
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	28 30       	cpi	r18, 0x08	; 8
 36c:	f8 f2       	brcs	.-66     	; 0x32c <__vector_42+0x6e>
			
			// Shift into register.
			PORTB |= _BV(SCK);
			PORTB &= ~_BV(SCK);
		}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0b be       	out	0x3b, r0	; 59
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <init_keys>:
	/*
	* Setting data direction.
	* Only setting PC0 to PC5 as input on Port C.
	* Only setting PD2 and PD3 as input on Port D.
	*/
	DDRC &= ~(_BV(PC0) | _BV(PC1) | _BV(PC2) | _BV(PC3) | _BV(PC4) | _BV(PC5));
 386:	87 b1       	in	r24, 0x07	; 7
 388:	80 7c       	andi	r24, 0xC0	; 192
 38a:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~(_BV(PD2) | _BV(PD3));
 38c:	8a b1       	in	r24, 0x0a	; 10
 38e:	83 7f       	andi	r24, 0xF3	; 243
 390:	8a b9       	out	0x0a, r24	; 10
	/*
	* Setting pull up resistor.
	* Only setting PC0 to PC5 as input on Port C.
	* Only setting PD2 and PD3 as input on Port D.
	*/
	PORTC |= _BV(PC0) | _BV(PC1) | _BV(PC2) | _BV(PC3) | _BV(PC4) | _BV(PC5);
 392:	88 b1       	in	r24, 0x08	; 8
 394:	8f 63       	ori	r24, 0x3F	; 63
 396:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PD2) | _BV(PD3);
 398:	8b b1       	in	r24, 0x0b	; 11
 39a:	8c 60       	ori	r24, 0x0C	; 12
 39c:	8b b9       	out	0x0b, r24	; 11
 39e:	08 95       	ret

000003a0 <get_key>:
* Subtracting 1 from the key numbers <= 6 mapping them to port C 0-5.
* Subtracting 5 from the key numbers > 6 mapping them to port D 2 and 3.
*/
uint8_t get_key(uint8_t key_no)
{
	if (key_no > 0 && key_no < 9)
 3a0:	9f ef       	ldi	r25, 0xFF	; 255
 3a2:	98 0f       	add	r25, r24
 3a4:	98 30       	cpi	r25, 0x08	; 8
 3a6:	10 f5       	brcc	.+68     	; 0x3ec <get_key+0x4c>
	{
		if (key_no <= 6) 
 3a8:	87 30       	cpi	r24, 0x07	; 7
 3aa:	80 f4       	brcc	.+32     	; 0x3cc <get_key+0x2c>
		{
			// Port C.
			return ((PINC & _BV(key_no - 1)) == 0);
 3ac:	96 b1       	in	r25, 0x06	; 6
 3ae:	28 2f       	mov	r18, r24
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	31 09       	sbc	r19, r1
 3b6:	89 2f       	mov	r24, r25
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <get_key+0x20>
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	2a 95       	dec	r18
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <get_key+0x1c>
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	82 27       	eor	r24, r18
 3c8:	81 70       	andi	r24, 0x01	; 1
 3ca:	08 95       	ret
		}
		else 
		{
			// port D.
			return ((PIND & _BV(key_no - 5)) == 0);
 3cc:	99 b1       	in	r25, 0x09	; 9
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	25 50       	subi	r18, 0x05	; 5
 3d4:	31 09       	sbc	r19, r1
 3d6:	89 2f       	mov	r24, r25
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <get_key+0x40>
 3dc:	95 95       	asr	r25
 3de:	87 95       	ror	r24
 3e0:	2a 95       	dec	r18
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <get_key+0x3c>
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	82 27       	eor	r24, r18
 3e8:	81 70       	andi	r24, 0x01	; 1
 3ea:	08 95       	ret
		}
	}
	return 0;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
}
 3ee:	08 95       	ret

000003f0 <scan_key>:

/*
* Iterates keys, returns number of first found key 1-8.
*/
uint8_t scan_key()
{
 3f0:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8; i++)
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	05 c0       	rjmp	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		if (get_key(i + 1) == 1)
 3f6:	cf 5f       	subi	r28, 0xFF	; 255
 3f8:	8c 2f       	mov	r24, r28
 3fa:	d2 df       	rcall	.-92     	; 0x3a0 <get_key>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	21 f0       	breq	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
/*
* Iterates keys, returns number of first found key 1-8.
*/
uint8_t scan_key()
{
	for(uint8_t i = 0; i < 8; i++)
 400:	c8 30       	cpi	r28, 0x08	; 8
 402:	c8 f3       	brcs	.-14     	; 0x3f6 <scan_key+0x6>
		if (get_key(i + 1) == 1)
		{
			return i + 1;
		}
	}
	return 0;
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
{
	for(uint8_t i = 0; i < 8; i++)
	{
		if (get_key(i + 1) == 1)
		{
			return i + 1;
 408:	8c 2f       	mov	r24, r28
		}
	}
	return 0;
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <init_leds>:
#include "../include/led.h"

void init_leds()
{
	// set pin direction to output
	DDRA = 0xFF;
 40e:	8f ef       	ldi	r24, 0xFF	; 255
 410:	81 b9       	out	0x01, r24	; 1
	// turn all leds off - Active low
	PORTA = 0xFF;
 412:	82 b9       	out	0x02, r24	; 2
 414:	08 95       	ret

00000416 <set_led>:
}


void set_led(uint8_t led_no, uint8_t state)
{
	if (led_no > 0 && led_no < 9)
 416:	9f ef       	ldi	r25, 0xFF	; 255
 418:	98 0f       	add	r25, r24
 41a:	98 30       	cpi	r25, 0x08	; 8
 41c:	00 f5       	brcc	.+64     	; 0x45e <set_led+0x48>
	{
		if (state == ON)
 41e:	61 30       	cpi	r22, 0x01	; 1
 420:	81 f4       	brne	.+32     	; 0x442 <set_led+0x2c>
		{
			// Set port low.
			PORTA &= ~_BV(led_no - 1);
 422:	42 b1       	in	r20, 0x02	; 2
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	b9 01       	movw	r22, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <set_led+0x1e>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	8a 95       	dec	r24
 436:	e2 f7       	brpl	.-8      	; 0x430 <set_led+0x1a>
 438:	cb 01       	movw	r24, r22
 43a:	80 95       	com	r24
 43c:	84 23       	and	r24, r20
 43e:	82 b9       	out	0x02, r24	; 2
 440:	08 95       	ret
		}
		else
		{
			// Set port high.
			PORTA |= _BV(led_no - 1);
 442:	42 b1       	in	r20, 0x02	; 2
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	b9 01       	movw	r22, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <set_led+0x3e>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	8a 95       	dec	r24
 456:	e2 f7       	brpl	.-8      	; 0x450 <set_led+0x3a>
 458:	cb 01       	movw	r24, r22
 45a:	84 2b       	or	r24, r20
 45c:	82 b9       	out	0x02, r24	; 2
 45e:	08 95       	ret

00000460 <lightbar>:

/*
* Turns on all leds <= level og turns all off itteratively.
*/
void lightbar(uint8_t level) 
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
	if (level >= 0 && level <= 8)
 464:	89 30       	cpi	r24, 0x09	; 9
 466:	60 f0       	brcs	.+24     	; 0x480 <lightbar+0x20>
 468:	0f c0       	rjmp	.+30     	; 0x488 <lightbar+0x28>
	{
		for(uint8_t i = 1; i <= 8; i++)
		{
			if (i <= level) 
 46a:	dc 17       	cp	r29, r28
 46c:	20 f0       	brcs	.+8      	; 0x476 <lightbar+0x16>
			{
				set_led(i, ON);
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	8c 2f       	mov	r24, r28
 472:	d1 df       	rcall	.-94     	; 0x416 <set_led>
 474:	03 c0       	rjmp	.+6      	; 0x47c <lightbar+0x1c>
			}
			else
			{
				set_led(i, OFF);	
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	8c 2f       	mov	r24, r28
 47a:	cd df       	rcall	.-102    	; 0x416 <set_led>
*/
void lightbar(uint8_t level) 
{
	if (level >= 0 && level <= 8)
	{
		for(uint8_t i = 1; i <= 8; i++)
 47c:	cf 5f       	subi	r28, 0xFF	; 255
 47e:	02 c0       	rjmp	.+4      	; 0x484 <lightbar+0x24>
 480:	d8 2f       	mov	r29, r24
 482:	c1 e0       	ldi	r28, 0x01	; 1
 484:	c9 30       	cpi	r28, 0x09	; 9
 486:	88 f3       	brcs	.-30     	; 0x46a <lightbar+0xa>
			{
				set_led(i, OFF);	
			}
		}
	}
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <init_matrix_keyboard>:
};

// Initiation of matrix keyboard, setting rows to output and columns as input.
void init_matrix_keyboard(){
	// Rows as Output
	for(uint8_t i=0; i<4; i++){
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	22 c0       	rjmp	.+68     	; 0x4d6 <init_matrix_keyboard+0x48>
		*(keypad[i].ddr) |= _BV(keypad[i].bit);
 492:	82 2f       	mov	r24, r18
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	fc 01       	movw	r30, r24
 498:	ee 0f       	add	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	e8 1b       	sub	r30, r24
 4a6:	f9 0b       	sbc	r31, r25
 4a8:	e2 5e       	subi	r30, 0xE2	; 226
 4aa:	fd 4f       	sbci	r31, 0xFD	; 253
 4ac:	a0 81       	ld	r26, Z
 4ae:	b1 81       	ldd	r27, Z+1	; 0x01
 4b0:	3c 91       	ld	r19, X
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	06 80       	ldd	r0, Z+6	; 0x06
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <init_matrix_keyboard+0x30>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <init_matrix_keyboard+0x2c>
 4c2:	93 2f       	mov	r25, r19
 4c4:	98 2b       	or	r25, r24
 4c6:	9c 93       	st	X, r25
		*(keypad[i].port) |= _BV(keypad[i].bit);
 4c8:	04 80       	ldd	r0, Z+4	; 0x04
 4ca:	f5 81       	ldd	r31, Z+5	; 0x05
 4cc:	e0 2d       	mov	r30, r0
 4ce:	90 81       	ld	r25, Z
 4d0:	89 2b       	or	r24, r25
 4d2:	80 83       	st	Z, r24
};

// Initiation of matrix keyboard, setting rows to output and columns as input.
void init_matrix_keyboard(){
	// Rows as Output
	for(uint8_t i=0; i<4; i++){
 4d4:	2f 5f       	subi	r18, 0xFF	; 255
 4d6:	24 30       	cpi	r18, 0x04	; 4
 4d8:	e0 f2       	brcs	.-72     	; 0x492 <init_matrix_keyboard+0x4>
 4da:	24 e0       	ldi	r18, 0x04	; 4
 4dc:	23 c0       	rjmp	.+70     	; 0x524 <init_matrix_keyboard+0x96>
		*(keypad[i].port) |= _BV(keypad[i].bit);
	}
	// Columns as Input
	for (uint8_t a=4; a<8; a++)
	{
		*(keypad[a].ddr) &= ~_BV(keypad[a].bit);
 4de:	82 2f       	mov	r24, r18
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fc 01       	movw	r30, r24
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	ee 0f       	add	r30, r30
 4ea:	ff 1f       	adc	r31, r31
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	e8 1b       	sub	r30, r24
 4f2:	f9 0b       	sbc	r31, r25
 4f4:	e2 5e       	subi	r30, 0xE2	; 226
 4f6:	fd 4f       	sbci	r31, 0xFD	; 253
 4f8:	a0 81       	ld	r26, Z
 4fa:	b1 81       	ldd	r27, Z+1	; 0x01
 4fc:	3c 91       	ld	r19, X
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	06 80       	ldd	r0, Z+6	; 0x06
 504:	02 c0       	rjmp	.+4      	; 0x50a <init_matrix_keyboard+0x7c>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	0a 94       	dec	r0
 50c:	e2 f7       	brpl	.-8      	; 0x506 <init_matrix_keyboard+0x78>
 50e:	98 2f       	mov	r25, r24
 510:	90 95       	com	r25
 512:	93 23       	and	r25, r19
 514:	9c 93       	st	X, r25
		*(keypad[a].port) |= _BV(keypad[a].bit);
 516:	04 80       	ldd	r0, Z+4	; 0x04
 518:	f5 81       	ldd	r31, Z+5	; 0x05
 51a:	e0 2d       	mov	r30, r0
 51c:	90 81       	ld	r25, Z
 51e:	89 2b       	or	r24, r25
 520:	80 83       	st	Z, r24
	for(uint8_t i=0; i<4; i++){
		*(keypad[i].ddr) |= _BV(keypad[i].bit);
		*(keypad[i].port) |= _BV(keypad[i].bit);
	}
	// Columns as Input
	for (uint8_t a=4; a<8; a++)
 522:	2f 5f       	subi	r18, 0xFF	; 255
 524:	28 30       	cpi	r18, 0x08	; 8
 526:	d8 f2       	brcs	.-74     	; 0x4de <init_matrix_keyboard+0x50>
	{
		*(keypad[a].ddr) &= ~_BV(keypad[a].bit);
		*(keypad[a].port) |= _BV(keypad[a].bit);
	}
}
 528:	08 95       	ret

0000052a <getxkey>:
{13,0,14,15}};


// Function returning the value of pressed key from val array. 
int8_t getxkey(){
	for (uint8_t b =0; b<4; b++)
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	7b c0       	rjmp	.+246    	; 0x624 <getxkey+0xfa>
	{
		// Set row to low (0)
		*(keypad[b].port) &= ~_BV(keypad[b].bit);
 52e:	63 2f       	mov	r22, r19
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	db 01       	movw	r26, r22
 534:	aa 0f       	add	r26, r26
 536:	bb 1f       	adc	r27, r27
 538:	aa 0f       	add	r26, r26
 53a:	bb 1f       	adc	r27, r27
 53c:	aa 0f       	add	r26, r26
 53e:	bb 1f       	adc	r27, r27
 540:	a6 1b       	sub	r26, r22
 542:	b7 0b       	sbc	r27, r23
 544:	a2 5e       	subi	r26, 0xE2	; 226
 546:	bd 4f       	sbci	r27, 0xFD	; 253
 548:	14 96       	adiw	r26, 0x04	; 4
 54a:	ed 91       	ld	r30, X+
 54c:	fc 91       	ld	r31, X
 54e:	15 97       	sbiw	r26, 0x05	; 5
 550:	20 81       	ld	r18, Z
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	16 96       	adiw	r26, 0x06	; 6
 558:	0c 90       	ld	r0, X
 55a:	02 c0       	rjmp	.+4      	; 0x560 <getxkey+0x36>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	0a 94       	dec	r0
 562:	e2 f7       	brpl	.-8      	; 0x55c <getxkey+0x32>
 564:	80 95       	com	r24
 566:	82 23       	and	r24, r18
 568:	80 83       	st	Z, r24
		for (uint8_t c =4; c<8; c++)
 56a:	24 e0       	ldi	r18, 0x04	; 4
 56c:	3f c0       	rjmp	.+126    	; 0x5ec <getxkey+0xc2>
		{
			if((*(keypad[c].pin) & _BV(keypad[c].bit))==0){
 56e:	42 2f       	mov	r20, r18
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	fa 01       	movw	r30, r20
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	e4 1b       	sub	r30, r20
 582:	f5 0b       	sbc	r31, r21
 584:	e2 5e       	subi	r30, 0xE2	; 226
 586:	fd 4f       	sbci	r31, 0xFD	; 253
 588:	a2 81       	ldd	r26, Z+2	; 0x02
 58a:	b3 81       	ldd	r27, Z+3	; 0x03
 58c:	8c 91       	ld	r24, X
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	06 80       	ldd	r0, Z+6	; 0x06
 592:	02 c0       	rjmp	.+4      	; 0x598 <getxkey+0x6e>
 594:	95 95       	asr	r25
 596:	87 95       	ror	r24
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <getxkey+0x6a>
 59c:	80 fd       	sbrc	r24, 0
 59e:	25 c0       	rjmp	.+74     	; 0x5ea <getxkey+0xc0>
				// set row to high (1)
				*(keypad[b].port) |= _BV(keypad[b].bit);
 5a0:	fb 01       	movw	r30, r22
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	ee 0f       	add	r30, r30
 5a8:	ff 1f       	adc	r31, r31
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	e6 1b       	sub	r30, r22
 5b0:	f7 0b       	sbc	r31, r23
 5b2:	e2 5e       	subi	r30, 0xE2	; 226
 5b4:	fd 4f       	sbci	r31, 0xFD	; 253
 5b6:	a4 81       	ldd	r26, Z+4	; 0x04
 5b8:	b5 81       	ldd	r27, Z+5	; 0x05
 5ba:	2c 91       	ld	r18, X
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	06 80       	ldd	r0, Z+6	; 0x06
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <getxkey+0x9e>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <getxkey+0x9a>
 5cc:	82 2b       	or	r24, r18
 5ce:	8c 93       	st	X, r24
				return val[b][c-4];
 5d0:	44 50       	subi	r20, 0x04	; 4
 5d2:	51 09       	sbc	r21, r1
 5d4:	fb 01       	movw	r30, r22
 5d6:	ee 0f       	add	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	e2 5f       	subi	r30, 0xF2	; 242
 5e0:	fd 4f       	sbci	r31, 0xFD	; 253
 5e2:	e4 0f       	add	r30, r20
 5e4:	f5 1f       	adc	r31, r21
 5e6:	80 81       	ld	r24, Z
 5e8:	08 95       	ret
int8_t getxkey(){
	for (uint8_t b =0; b<4; b++)
	{
		// Set row to low (0)
		*(keypad[b].port) &= ~_BV(keypad[b].bit);
		for (uint8_t c =4; c<8; c++)
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	28 30       	cpi	r18, 0x08	; 8
 5ee:	08 f4       	brcc	.+2      	; 0x5f2 <getxkey+0xc8>
 5f0:	be cf       	rjmp	.-132    	; 0x56e <getxkey+0x44>
			
			
			
		}
		// set row to high (1)
		*(keypad[b].port) |= _BV(keypad[b].bit);
 5f2:	fb 01       	movw	r30, r22
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31
 5f8:	ee 0f       	add	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	e6 1b       	sub	r30, r22
 602:	f7 0b       	sbc	r31, r23
 604:	e2 5e       	subi	r30, 0xE2	; 226
 606:	fd 4f       	sbci	r31, 0xFD	; 253
 608:	a4 81       	ldd	r26, Z+4	; 0x04
 60a:	b5 81       	ldd	r27, Z+5	; 0x05
 60c:	2c 91       	ld	r18, X
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	06 80       	ldd	r0, Z+6	; 0x06
 614:	02 c0       	rjmp	.+4      	; 0x61a <getxkey+0xf0>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <getxkey+0xec>
 61e:	82 2b       	or	r24, r18
 620:	8c 93       	st	X, r24
{13,0,14,15}};


// Function returning the value of pressed key from val array. 
int8_t getxkey(){
	for (uint8_t b =0; b<4; b++)
 622:	3f 5f       	subi	r19, 0xFF	; 255
 624:	34 30       	cpi	r19, 0x04	; 4
 626:	08 f4       	brcc	.+2      	; 0x62a <getxkey+0x100>
 628:	82 cf       	rjmp	.-252    	; 0x52e <getxkey+0x4>
		}
		// set row to high (1)
		*(keypad[b].port) |= _BV(keypad[b].bit);
	}
	
	return 127;
 62a:	8f e7       	ldi	r24, 0x7F	; 127
}
 62c:	08 95       	ret

0000062e <mv_to_c>:
static void (*cb)(uint8_t deg_c) = 0;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
 62e:	9c 01       	movw	r18, r24
 630:	24 5f       	subi	r18, 0xF4	; 244
 632:	31 40       	sbci	r19, 0x01	; 1
 634:	ad ec       	ldi	r26, 0xCD	; 205
 636:	bc ec       	ldi	r27, 0xCC	; 204
 638:	7f d2       	rcall	.+1278   	; 0xb38 <__umulhisi3>
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	96 95       	lsr	r25
 644:	87 95       	ror	r24
}
 646:	08 95       	ret

00000648 <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
 648:	bc 01       	movw	r22, r24
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	83 d1       	rcall	.+774    	; 0x956 <__floatunsisf>
 650:	2a e1       	ldi	r18, 0x1A	; 26
 652:	37 e6       	ldi	r19, 0x67	; 103
 654:	4c e9       	ldi	r20, 0x9C	; 156
 656:	50 e4       	ldi	r21, 0x40	; 64
 658:	e4 d1       	rcall	.+968    	; 0xa22 <__mulsf3>
 65a:	51 d1       	rcall	.+674    	; 0x8fe <__fixunssfsi>
}
 65c:	cb 01       	movw	r24, r22
 65e:	08 95       	ret

00000660 <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
 660:	9c 01       	movw	r18, r24
	// **** General config *****
	
	// Set PK7 direction as input (TMP36 Vout)
	DDRK &= ~_BV(v_out);
 662:	e7 e0       	ldi	r30, 0x07	; 7
 664:	f1 e0       	ldi	r31, 0x01	; 1
 666:	80 81       	ld	r24, Z
 668:	8f 77       	andi	r24, 0x7F	; 127
 66a:	80 83       	st	Z, r24
	
	// Set PG0 direction as output (TMP36 Enable)
	DDRG |= _BV(enable);  
 66c:	83 b3       	in	r24, 0x13	; 19
 66e:	81 60       	ori	r24, 0x01	; 1
 670:	83 bb       	out	0x13, r24	; 19

	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
 672:	ec e7       	ldi	r30, 0x7C	; 124
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	80 64       	ori	r24, 0x40	; 64
 67a:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
 67c:	80 81       	ld	r24, Z
 67e:	87 60       	ori	r24, 0x07	; 7
 680:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 682:	eb e7       	ldi	r30, 0x7B	; 123
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	80 81       	ld	r24, Z
 688:	88 60       	ori	r24, 0x08	; 8
 68a:	80 83       	st	Z, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
 68c:	aa e7       	ldi	r26, 0x7A	; 122
 68e:	b0 e0       	ldi	r27, 0x00	; 0
 690:	9c 91       	ld	r25, X
 692:	96 60       	ori	r25, 0x06	; 6
 694:	9c 93       	st	X, r25
	
	// ****** Interrupt and auto trigger ****
	
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 696:	90 81       	ld	r25, Z
 698:	95 60       	ori	r25, 0x05	; 5
 69a:	90 83       	st	Z, r25
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
 69c:	e0 e8       	ldi	r30, 0x80	; 128
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	90 81       	ld	r25, Z
 6a2:	90 61       	ori	r25, 0x10	; 16
 6a4:	90 83       	st	Z, r25
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
 6a6:	e1 e8       	ldi	r30, 0x81	; 129
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	90 81       	ld	r25, Z
 6ac:	94 60       	ori	r25, 0x04	; 4
 6ae:	90 83       	st	Z, r25
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1B |= _BV(WGM12);
 6b0:	90 81       	ld	r25, Z
 6b2:	98 60       	ori	r25, 0x08	; 8
 6b4:	90 83       	st	Z, r25
	

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
 6b6:	81 e1       	ldi	r24, 0x11	; 17
 6b8:	9a e7       	ldi	r25, 0x7A	; 122
 6ba:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 6be:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	OCR1A = 31249;
 6c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 6c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
 6ca:	21 15       	cp	r18, r1
 6cc:	31 05       	cpc	r19, r1
 6ce:	21 f0       	breq	.+8      	; 0x6d8 <tmp36_init+0x78>
		cb = callback;
 6d0:	30 93 61 02 	sts	0x0261, r19	; 0x800261 <cb+0x1>
 6d4:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <cb>
		
	// Enable Timer Interrupt
	//TIMSK1 |= _BV(OCIE1B);
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
 6d8:	ea e7       	ldi	r30, 0x7A	; 122
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	88 60       	ori	r24, 0x08	; 8
 6e0:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
 6e2:	80 81       	ld	r24, Z
 6e4:	80 62       	ori	r24, 0x20	; 32
 6e6:	80 83       	st	Z, r24
	
	// Enable TMP36
	PORTG |= _BV(enable);
 6e8:	84 b3       	in	r24, 0x14	; 20
 6ea:	81 60       	ori	r24, 0x01	; 1
 6ec:	84 bb       	out	0x14, r24	; 20
	
	
	
	// Enable ADC
	ADCSRA |= _BV(ADEN);
 6ee:	80 81       	ld	r24, Z
 6f0:	80 68       	ori	r24, 0x80	; 128
 6f2:	80 83       	st	Z, r24
	
	
	// Start Conversion. AD control and status register
	ADCSRA |= _BV(ADSC);
 6f4:	80 81       	ld	r24, Z
 6f6:	80 64       	ori	r24, 0x40	; 64
 6f8:	80 83       	st	Z, r24
 6fa:	08 95       	ret

000006fc <__vector_29>:
}

// AD Interrupt callback.
ISR(ADC_vect)
{
 6fc:	1f 92       	push	r1
 6fe:	0f 92       	push	r0
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	0f 92       	push	r0
 704:	11 24       	eor	r1, r1
 706:	0b b6       	in	r0, 0x3b	; 59
 708:	0f 92       	push	r0
 70a:	2f 93       	push	r18
 70c:	3f 93       	push	r19
 70e:	4f 93       	push	r20
 710:	5f 93       	push	r21
 712:	6f 93       	push	r22
 714:	7f 93       	push	r23
 716:	8f 93       	push	r24
 718:	9f 93       	push	r25
 71a:	af 93       	push	r26
 71c:	bf 93       	push	r27
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	ef 93       	push	r30
 724:	ff 93       	push	r31
	
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
 726:	c0 91 60 02 	lds	r28, 0x0260	; 0x800260 <cb>
 72a:	d0 91 61 02 	lds	r29, 0x0261	; 0x800261 <cb+0x1>
 72e:	20 97       	sbiw	r28, 0x00	; 0
 730:	41 f0       	breq	.+16     	; 0x742 <__vector_29+0x46>
	
		cb(mv_to_c(adc_to_mv(ADC)));
 732:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 736:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 73a:	86 df       	rcall	.-244    	; 0x648 <adc_to_mv>
 73c:	78 df       	rcall	.-272    	; 0x62e <mv_to_c>
 73e:	fe 01       	movw	r30, r28
 740:	19 95       	eicall
		
	
	TIFR1 |= _BV(OCR1B);
 742:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 746:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <__vector_29+0x58>
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	2a 95       	dec	r18
 756:	e2 f7       	brpl	.-8      	; 0x750 <__vector_29+0x54>
 758:	96 b3       	in	r25, 0x16	; 22
 75a:	89 2b       	or	r24, r25
 75c:	86 bb       	out	0x16, r24	; 22
 75e:	ff 91       	pop	r31
 760:	ef 91       	pop	r30
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	bf 91       	pop	r27
 768:	af 91       	pop	r26
 76a:	9f 91       	pop	r25
 76c:	8f 91       	pop	r24
 76e:	7f 91       	pop	r23
 770:	6f 91       	pop	r22
 772:	5f 91       	pop	r21
 774:	4f 91       	pop	r20
 776:	3f 91       	pop	r19
 778:	2f 91       	pop	r18
 77a:	0f 90       	pop	r0
 77c:	0b be       	out	0x3b, r0	; 59
 77e:	0f 90       	pop	r0
 780:	0f be       	out	0x3f, r0	; 63
 782:	0f 90       	pop	r0
 784:	1f 90       	pop	r1
 786:	18 95       	reti

00000788 <new_measurement>:
	{
		lightbar(level);
	}
	else
	{
		lightbar(8);
 788:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <temp>
 78c:	08 95       	ret

0000078e <array_to_int>:
 78e:	bc 01       	movw	r22, r24
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	12 c0       	rjmp	.+36     	; 0x7bc <array_to_int+0x2e>
 798:	a9 01       	movw	r20, r18
 79a:	44 0f       	add	r20, r20
 79c:	55 1f       	adc	r21, r21
 79e:	22 0f       	add	r18, r18
 7a0:	33 1f       	adc	r19, r19
 7a2:	22 0f       	add	r18, r18
 7a4:	33 1f       	adc	r19, r19
 7a6:	22 0f       	add	r18, r18
 7a8:	33 1f       	adc	r19, r19
 7aa:	24 0f       	add	r18, r20
 7ac:	35 1f       	adc	r19, r21
 7ae:	fb 01       	movw	r30, r22
 7b0:	e9 0f       	add	r30, r25
 7b2:	f1 1d       	adc	r31, r1
 7b4:	40 81       	ld	r20, Z
 7b6:	24 0f       	add	r18, r20
 7b8:	31 1d       	adc	r19, r1
 7ba:	9f 5f       	subi	r25, 0xFF	; 255
 7bc:	94 30       	cpi	r25, 0x04	; 4
 7be:	60 f3       	brcs	.-40     	; 0x798 <array_to_int+0xa>
 7c0:	c9 01       	movw	r24, r18
 7c2:	08 95       	ret

000007c4 <newT>:
 7c4:	4e 30       	cpi	r20, 0x0E	; 14
 7c6:	31 f4       	brne	.+12     	; 0x7d4 <newT+0x10>
 7c8:	e4 e6       	ldi	r30, 0x64	; 100
 7ca:	f2 e0       	ldi	r31, 0x02	; 2
 7cc:	13 82       	std	Z+3, r1	; 0x03
 7ce:	12 82       	std	Z+2, r1	; 0x02
 7d0:	8f e7       	ldi	r24, 0x7F	; 127
 7d2:	08 95       	ret
 7d4:	4d 30       	cpi	r20, 0x0D	; 13
 7d6:	31 f4       	brne	.+12     	; 0x7e4 <newT+0x20>
 7d8:	e4 e6       	ldi	r30, 0x64	; 100
 7da:	f2 e0       	ldi	r31, 0x02	; 2
 7dc:	13 82       	std	Z+3, r1	; 0x03
 7de:	12 82       	std	Z+2, r1	; 0x02
 7e0:	8f e7       	ldi	r24, 0x7F	; 127
 7e2:	08 95       	ret
 7e4:	4a 30       	cpi	r20, 0x0A	; 10
 7e6:	40 f4       	brcc	.+16     	; 0x7f8 <newT+0x34>
 7e8:	e4 e6       	ldi	r30, 0x64	; 100
 7ea:	f2 e0       	ldi	r31, 0x02	; 2
 7ec:	83 81       	ldd	r24, Z+3	; 0x03
 7ee:	82 83       	std	Z+2, r24	; 0x02
 7f0:	43 83       	std	Z+3, r20	; 0x03
 7f2:	cf 01       	movw	r24, r30
 7f4:	cc cf       	rjmp	.-104    	; 0x78e <array_to_int>
 7f6:	08 95       	ret
 7f8:	8f e7       	ldi	r24, 0x7F	; 127
 7fa:	08 95       	ret

000007fc <assignment4>:
	}
}

void assignment4(){
	if(temp>thigh){
 7fc:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <temp>
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <thigh>
 806:	02 2e       	mov	r0, r18
 808:	00 0c       	add	r0, r0
 80a:	33 0b       	sbc	r19, r19
 80c:	28 17       	cp	r18, r24
 80e:	39 07       	cpc	r19, r25
 810:	1c f4       	brge	.+6      	; 0x818 <assignment4+0x1c>
		lightbar(1);
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	25 de       	rcall	.-950    	; 0x460 <lightbar>
 816:	04 c0       	rjmp	.+8      	; 0x820 <assignment4+0x24>
		}else if(temp<tlow){
 818:	43 97       	sbiw	r24, 0x13	; 19
 81a:	14 f4       	brge	.+4      	; 0x820 <assignment4+0x24>
		lightbar(0);
 81c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	keypress = scan_key();
 81e:	20 de       	rcall	.-960    	; 0x460 <lightbar>
 820:	e7 dd       	rcall	.-1074   	; 0x3f0 <scan_key>
	
	
	if(keypress){
 822:	81 11       	cpse	r24, r1
		//_delay_ms(100);
		key = keypress;
 824:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <key>
		//printint_4u(scan_key());
	}
	
	
	switch (key){						// Which key pressed
 828:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <key>
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	59 f0       	breq	.+22     	; 0x846 <assignment4+0x4a>
 830:	83 30       	cpi	r24, 0x03	; 3
 832:	21 f0       	breq	.+8      	; 0x83c <assignment4+0x40>
 834:	81 30       	cpi	r24, 0x01	; 1
 836:	09 f0       	breq	.+2      	; 0x83a <assignment4+0x3e>
 838:	4d c0       	rjmp	.+154    	; 0x8d4 <assignment4+0xd8>
 83a:	2b c0       	rjmp	.+86     	; 0x892 <assignment4+0x96>
		
		case 3:							// Current temp
		
		printint_4u(temp);
 83c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <temp>
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	39 cd       	rjmp	.-1422   	; 0x2b6 <printint_4u>
		break;
 844:	08 95       	ret
		
		case 2:							// High temp
		if(thighNew!=0){
 846:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <thighNew>
 84a:	88 23       	and	r24, r24
			printint_4u(thighNew);
 84c:	29 f0       	breq	.+10     	; 0x858 <assignment4+0x5c>
 84e:	08 2e       	mov	r0, r24
 850:	00 0c       	add	r0, r0
 852:	99 0b       	sbc	r25, r25
 854:	30 dd       	rcall	.-1440   	; 0x2b6 <printint_4u>
 856:	06 c0       	rjmp	.+12     	; 0x864 <assignment4+0x68>
			}else{
			printint_4u(thigh);
 858:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <thigh>
 85c:	08 2e       	mov	r0, r24
 85e:	00 0c       	add	r0, r0
 860:	99 0b       	sbc	r25, r25
		}
		uint8_t k = getxkey();
 862:	29 dd       	rcall	.-1454   	; 0x2b6 <printint_4u>
 864:	62 de       	rcall	.-828    	; 0x52a <getxkey>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 866:	2f ef       	ldi	r18, 0xFF	; 255
 868:	33 ec       	ldi	r19, 0xC3	; 195
 86a:	99 e0       	ldi	r25, 0x09	; 9
 86c:	21 50       	subi	r18, 0x01	; 1
 86e:	30 40       	sbci	r19, 0x00	; 0
 870:	90 40       	sbci	r25, 0x00	; 0
 872:	e1 f7       	brne	.-8      	; 0x86c <assignment4+0x70>
 874:	00 c0       	rjmp	.+0      	; 0x876 <assignment4+0x7a>
 876:	00 00       	nop
		_delay_ms(200);
		
		
		if(k!=127) // if keys are pressed
 878:	8f 37       	cpi	r24, 0x7F	; 127
		{
			
			uint8_t n = newT(thighNew,thigh,k);
 87a:	61 f1       	breq	.+88     	; 0x8d4 <assignment4+0xd8>
 87c:	48 2f       	mov	r20, r24
 87e:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <thigh>
 882:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <thighNew>
 886:	9e df       	rcall	.-196    	; 0x7c4 <newT>
			if(n!=127){
 888:	8f 37       	cpi	r24, 0x7F	; 127
 88a:	21 f1       	breq	.+72     	; 0x8d4 <assignment4+0xd8>
				thighNew =n;
 88c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <thighNew>

		}
		break;
		
		case 1:							// Low temp
		if(tlowNew!=0){
 890:	08 95       	ret
 892:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <tlowNew>
			printint_4u(tlowNew);
 896:	88 23       	and	r24, r24
 898:	29 f0       	breq	.+10     	; 0x8a4 <assignment4+0xa8>
 89a:	08 2e       	mov	r0, r24
 89c:	00 0c       	add	r0, r0
 89e:	99 0b       	sbc	r25, r25
			}else{
			printint_4u(tlow);
 8a0:	0a dd       	rcall	.-1516   	; 0x2b6 <printint_4u>
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <assignment4+0xae>
 8a4:	83 e1       	ldi	r24, 0x13	; 19
 8a6:	90 e0       	ldi	r25, 0x00	; 0
		}
		uint8_t s = getxkey();
 8a8:	06 dd       	rcall	.-1524   	; 0x2b6 <printint_4u>
 8aa:	3f de       	rcall	.-898    	; 0x52a <getxkey>
 8ac:	2f ef       	ldi	r18, 0xFF	; 255
 8ae:	33 ec       	ldi	r19, 0xC3	; 195
 8b0:	99 e0       	ldi	r25, 0x09	; 9
 8b2:	21 50       	subi	r18, 0x01	; 1
 8b4:	30 40       	sbci	r19, 0x00	; 0
 8b6:	90 40       	sbci	r25, 0x00	; 0
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <assignment4+0xb6>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <assignment4+0xc0>
		_delay_ms(200);
		
		
		if(s!=127) // if keys are pressed
 8bc:	00 00       	nop
 8be:	8f 37       	cpi	r24, 0x7F	; 127
		{
			uint8_t x = newT(tlowNew,tlow,s);
 8c0:	49 f0       	breq	.+18     	; 0x8d4 <assignment4+0xd8>
 8c2:	48 2f       	mov	r20, r24
 8c4:	63 e1       	ldi	r22, 0x13	; 19
 8c6:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <tlowNew>
 8ca:	7c df       	rcall	.-264    	; 0x7c4 <newT>
			if(x!=127){
 8cc:	8f 37       	cpi	r24, 0x7F	; 127
 8ce:	11 f0       	breq	.+4      	; 0x8d4 <assignment4+0xd8>
				tlowNew =x;
 8d0:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <tlowNew>
 8d4:	08 95       	ret

000008d6 <main>:
}


int main(void)
{
	init_leds();
 8d6:	9b dd       	rcall	.-1226   	; 0x40e <init_leds>
	tmp36_init(new_measurement);
 8d8:	84 ec       	ldi	r24, 0xC4	; 196
 8da:	93 e0       	ldi	r25, 0x03	; 3
 8dc:	c1 de       	rcall	.-638    	; 0x660 <tmp36_init>
	init_display(SPI);
 8de:	81 e0       	ldi	r24, 0x01	; 1
	init_matrix_keyboard();
 8e0:	c4 dc       	rcall	.-1656   	; 0x26a <init_display>
 8e2:	d5 dd       	rcall	.-1110   	; 0x48e <init_matrix_keyboard>
	init_keys();
 8e4:	50 dd       	rcall	.-1376   	; 0x386 <init_keys>
 8e6:	78 94       	sei
	
	// Enable interrupt globally.
	sei();
 8e8:	2f ef       	ldi	r18, 0xFF	; 255
 8ea:	89 e6       	ldi	r24, 0x69	; 105
 8ec:	98 e1       	ldi	r25, 0x18	; 24
 8ee:	21 50       	subi	r18, 0x01	; 1
 8f0:	80 40       	sbci	r24, 0x00	; 0
 8f2:	90 40       	sbci	r25, 0x00	; 0
 8f4:	e1 f7       	brne	.-8      	; 0x8ee <main+0x18>
 8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <main+0x22>
 8f8:	00 00       	nop
	//printint_4u(0);
    while (1) 
    {
		//assignment1();
		//assignment2();
		assignment4();
 8fa:	80 df       	rcall	.-256    	; 0x7fc <assignment4>
 8fc:	fe cf       	rjmp	.-4      	; 0x8fa <main+0x24>

000008fe <__fixunssfsi>:
 8fe:	70 d0       	rcall	.+224    	; 0x9e0 <__fp_splitA>
 900:	88 f0       	brcs	.+34     	; 0x924 <__fixunssfsi+0x26>
 902:	9f 57       	subi	r25, 0x7F	; 127
 904:	90 f0       	brcs	.+36     	; 0x92a <__fixunssfsi+0x2c>
 906:	b9 2f       	mov	r27, r25
 908:	99 27       	eor	r25, r25
 90a:	b7 51       	subi	r27, 0x17	; 23
 90c:	a0 f0       	brcs	.+40     	; 0x936 <__fixunssfsi+0x38>
 90e:	d1 f0       	breq	.+52     	; 0x944 <__fixunssfsi+0x46>
 910:	66 0f       	add	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	88 1f       	adc	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	1a f0       	brmi	.+6      	; 0x920 <__fixunssfsi+0x22>
 91a:	ba 95       	dec	r27
 91c:	c9 f7       	brne	.-14     	; 0x910 <__fixunssfsi+0x12>
 91e:	12 c0       	rjmp	.+36     	; 0x944 <__fixunssfsi+0x46>
 920:	b1 30       	cpi	r27, 0x01	; 1
 922:	81 f0       	breq	.+32     	; 0x944 <__fixunssfsi+0x46>
 924:	77 d0       	rcall	.+238    	; 0xa14 <__fp_zero>
 926:	b1 e0       	ldi	r27, 0x01	; 1
 928:	08 95       	ret
 92a:	74 c0       	rjmp	.+232    	; 0xa14 <__fp_zero>
 92c:	67 2f       	mov	r22, r23
 92e:	78 2f       	mov	r23, r24
 930:	88 27       	eor	r24, r24
 932:	b8 5f       	subi	r27, 0xF8	; 248
 934:	39 f0       	breq	.+14     	; 0x944 <__fixunssfsi+0x46>
 936:	b9 3f       	cpi	r27, 0xF9	; 249
 938:	cc f3       	brlt	.-14     	; 0x92c <__fixunssfsi+0x2e>
 93a:	86 95       	lsr	r24
 93c:	77 95       	ror	r23
 93e:	67 95       	ror	r22
 940:	b3 95       	inc	r27
 942:	d9 f7       	brne	.-10     	; 0x93a <__fixunssfsi+0x3c>
 944:	3e f4       	brtc	.+14     	; 0x954 <__fixunssfsi+0x56>
 946:	90 95       	com	r25
 948:	80 95       	com	r24
 94a:	70 95       	com	r23
 94c:	61 95       	neg	r22
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	8f 4f       	sbci	r24, 0xFF	; 255
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	08 95       	ret

00000956 <__floatunsisf>:
 956:	e8 94       	clt
 958:	09 c0       	rjmp	.+18     	; 0x96c <__floatsisf+0x12>

0000095a <__floatsisf>:
 95a:	97 fb       	bst	r25, 7
 95c:	3e f4       	brtc	.+14     	; 0x96c <__floatsisf+0x12>
 95e:	90 95       	com	r25
 960:	80 95       	com	r24
 962:	70 95       	com	r23
 964:	61 95       	neg	r22
 966:	7f 4f       	sbci	r23, 0xFF	; 255
 968:	8f 4f       	sbci	r24, 0xFF	; 255
 96a:	9f 4f       	sbci	r25, 0xFF	; 255
 96c:	99 23       	and	r25, r25
 96e:	a9 f0       	breq	.+42     	; 0x99a <__floatsisf+0x40>
 970:	f9 2f       	mov	r31, r25
 972:	96 e9       	ldi	r25, 0x96	; 150
 974:	bb 27       	eor	r27, r27
 976:	93 95       	inc	r25
 978:	f6 95       	lsr	r31
 97a:	87 95       	ror	r24
 97c:	77 95       	ror	r23
 97e:	67 95       	ror	r22
 980:	b7 95       	ror	r27
 982:	f1 11       	cpse	r31, r1
 984:	f8 cf       	rjmp	.-16     	; 0x976 <__floatsisf+0x1c>
 986:	fa f4       	brpl	.+62     	; 0x9c6 <__floatsisf+0x6c>
 988:	bb 0f       	add	r27, r27
 98a:	11 f4       	brne	.+4      	; 0x990 <__floatsisf+0x36>
 98c:	60 ff       	sbrs	r22, 0
 98e:	1b c0       	rjmp	.+54     	; 0x9c6 <__floatsisf+0x6c>
 990:	6f 5f       	subi	r22, 0xFF	; 255
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	16 c0       	rjmp	.+44     	; 0x9c6 <__floatsisf+0x6c>
 99a:	88 23       	and	r24, r24
 99c:	11 f0       	breq	.+4      	; 0x9a2 <__floatsisf+0x48>
 99e:	96 e9       	ldi	r25, 0x96	; 150
 9a0:	11 c0       	rjmp	.+34     	; 0x9c4 <__floatsisf+0x6a>
 9a2:	77 23       	and	r23, r23
 9a4:	21 f0       	breq	.+8      	; 0x9ae <__floatsisf+0x54>
 9a6:	9e e8       	ldi	r25, 0x8E	; 142
 9a8:	87 2f       	mov	r24, r23
 9aa:	76 2f       	mov	r23, r22
 9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <__floatsisf+0x5e>
 9ae:	66 23       	and	r22, r22
 9b0:	71 f0       	breq	.+28     	; 0x9ce <__floatsisf+0x74>
 9b2:	96 e8       	ldi	r25, 0x86	; 134
 9b4:	86 2f       	mov	r24, r22
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	2a f0       	brmi	.+10     	; 0x9c6 <__floatsisf+0x6c>
 9bc:	9a 95       	dec	r25
 9be:	66 0f       	add	r22, r22
 9c0:	77 1f       	adc	r23, r23
 9c2:	88 1f       	adc	r24, r24
 9c4:	da f7       	brpl	.-10     	; 0x9bc <__floatsisf+0x62>
 9c6:	88 0f       	add	r24, r24
 9c8:	96 95       	lsr	r25
 9ca:	87 95       	ror	r24
 9cc:	97 f9       	bld	r25, 7
 9ce:	08 95       	ret

000009d0 <__fp_split3>:
 9d0:	57 fd       	sbrc	r21, 7
 9d2:	90 58       	subi	r25, 0x80	; 128
 9d4:	44 0f       	add	r20, r20
 9d6:	55 1f       	adc	r21, r21
 9d8:	59 f0       	breq	.+22     	; 0x9f0 <__fp_splitA+0x10>
 9da:	5f 3f       	cpi	r21, 0xFF	; 255
 9dc:	71 f0       	breq	.+28     	; 0x9fa <__fp_splitA+0x1a>
 9de:	47 95       	ror	r20

000009e0 <__fp_splitA>:
 9e0:	88 0f       	add	r24, r24
 9e2:	97 fb       	bst	r25, 7
 9e4:	99 1f       	adc	r25, r25
 9e6:	61 f0       	breq	.+24     	; 0xa00 <__fp_splitA+0x20>
 9e8:	9f 3f       	cpi	r25, 0xFF	; 255
 9ea:	79 f0       	breq	.+30     	; 0xa0a <__fp_splitA+0x2a>
 9ec:	87 95       	ror	r24
 9ee:	08 95       	ret
 9f0:	12 16       	cp	r1, r18
 9f2:	13 06       	cpc	r1, r19
 9f4:	14 06       	cpc	r1, r20
 9f6:	55 1f       	adc	r21, r21
 9f8:	f2 cf       	rjmp	.-28     	; 0x9de <__fp_split3+0xe>
 9fa:	46 95       	lsr	r20
 9fc:	f1 df       	rcall	.-30     	; 0x9e0 <__fp_splitA>
 9fe:	08 c0       	rjmp	.+16     	; 0xa10 <__fp_splitA+0x30>
 a00:	16 16       	cp	r1, r22
 a02:	17 06       	cpc	r1, r23
 a04:	18 06       	cpc	r1, r24
 a06:	99 1f       	adc	r25, r25
 a08:	f1 cf       	rjmp	.-30     	; 0x9ec <__fp_splitA+0xc>
 a0a:	86 95       	lsr	r24
 a0c:	71 05       	cpc	r23, r1
 a0e:	61 05       	cpc	r22, r1
 a10:	08 94       	sec
 a12:	08 95       	ret

00000a14 <__fp_zero>:
 a14:	e8 94       	clt

00000a16 <__fp_szero>:
 a16:	bb 27       	eor	r27, r27
 a18:	66 27       	eor	r22, r22
 a1a:	77 27       	eor	r23, r23
 a1c:	cb 01       	movw	r24, r22
 a1e:	97 f9       	bld	r25, 7
 a20:	08 95       	ret

00000a22 <__mulsf3>:
 a22:	0b d0       	rcall	.+22     	; 0xa3a <__mulsf3x>
 a24:	78 c0       	rjmp	.+240    	; 0xb16 <__fp_round>
 a26:	69 d0       	rcall	.+210    	; 0xafa <__fp_pscA>
 a28:	28 f0       	brcs	.+10     	; 0xa34 <__mulsf3+0x12>
 a2a:	6e d0       	rcall	.+220    	; 0xb08 <__fp_pscB>
 a2c:	18 f0       	brcs	.+6      	; 0xa34 <__mulsf3+0x12>
 a2e:	95 23       	and	r25, r21
 a30:	09 f0       	breq	.+2      	; 0xa34 <__mulsf3+0x12>
 a32:	5a c0       	rjmp	.+180    	; 0xae8 <__fp_inf>
 a34:	5f c0       	rjmp	.+190    	; 0xaf4 <__fp_nan>
 a36:	11 24       	eor	r1, r1
 a38:	ee cf       	rjmp	.-36     	; 0xa16 <__fp_szero>

00000a3a <__mulsf3x>:
 a3a:	ca df       	rcall	.-108    	; 0x9d0 <__fp_split3>
 a3c:	a0 f3       	brcs	.-24     	; 0xa26 <__mulsf3+0x4>

00000a3e <__mulsf3_pse>:
 a3e:	95 9f       	mul	r25, r21
 a40:	d1 f3       	breq	.-12     	; 0xa36 <__mulsf3+0x14>
 a42:	95 0f       	add	r25, r21
 a44:	50 e0       	ldi	r21, 0x00	; 0
 a46:	55 1f       	adc	r21, r21
 a48:	62 9f       	mul	r22, r18
 a4a:	f0 01       	movw	r30, r0
 a4c:	72 9f       	mul	r23, r18
 a4e:	bb 27       	eor	r27, r27
 a50:	f0 0d       	add	r31, r0
 a52:	b1 1d       	adc	r27, r1
 a54:	63 9f       	mul	r22, r19
 a56:	aa 27       	eor	r26, r26
 a58:	f0 0d       	add	r31, r0
 a5a:	b1 1d       	adc	r27, r1
 a5c:	aa 1f       	adc	r26, r26
 a5e:	64 9f       	mul	r22, r20
 a60:	66 27       	eor	r22, r22
 a62:	b0 0d       	add	r27, r0
 a64:	a1 1d       	adc	r26, r1
 a66:	66 1f       	adc	r22, r22
 a68:	82 9f       	mul	r24, r18
 a6a:	22 27       	eor	r18, r18
 a6c:	b0 0d       	add	r27, r0
 a6e:	a1 1d       	adc	r26, r1
 a70:	62 1f       	adc	r22, r18
 a72:	73 9f       	mul	r23, r19
 a74:	b0 0d       	add	r27, r0
 a76:	a1 1d       	adc	r26, r1
 a78:	62 1f       	adc	r22, r18
 a7a:	83 9f       	mul	r24, r19
 a7c:	a0 0d       	add	r26, r0
 a7e:	61 1d       	adc	r22, r1
 a80:	22 1f       	adc	r18, r18
 a82:	74 9f       	mul	r23, r20
 a84:	33 27       	eor	r19, r19
 a86:	a0 0d       	add	r26, r0
 a88:	61 1d       	adc	r22, r1
 a8a:	23 1f       	adc	r18, r19
 a8c:	84 9f       	mul	r24, r20
 a8e:	60 0d       	add	r22, r0
 a90:	21 1d       	adc	r18, r1
 a92:	82 2f       	mov	r24, r18
 a94:	76 2f       	mov	r23, r22
 a96:	6a 2f       	mov	r22, r26
 a98:	11 24       	eor	r1, r1
 a9a:	9f 57       	subi	r25, 0x7F	; 127
 a9c:	50 40       	sbci	r21, 0x00	; 0
 a9e:	8a f0       	brmi	.+34     	; 0xac2 <__mulsf3_pse+0x84>
 aa0:	e1 f0       	breq	.+56     	; 0xada <__mulsf3_pse+0x9c>
 aa2:	88 23       	and	r24, r24
 aa4:	4a f0       	brmi	.+18     	; 0xab8 <__mulsf3_pse+0x7a>
 aa6:	ee 0f       	add	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	bb 1f       	adc	r27, r27
 aac:	66 1f       	adc	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	88 1f       	adc	r24, r24
 ab2:	91 50       	subi	r25, 0x01	; 1
 ab4:	50 40       	sbci	r21, 0x00	; 0
 ab6:	a9 f7       	brne	.-22     	; 0xaa2 <__mulsf3_pse+0x64>
 ab8:	9e 3f       	cpi	r25, 0xFE	; 254
 aba:	51 05       	cpc	r21, r1
 abc:	70 f0       	brcs	.+28     	; 0xada <__mulsf3_pse+0x9c>
 abe:	14 c0       	rjmp	.+40     	; 0xae8 <__fp_inf>
 ac0:	aa cf       	rjmp	.-172    	; 0xa16 <__fp_szero>
 ac2:	5f 3f       	cpi	r21, 0xFF	; 255
 ac4:	ec f3       	brlt	.-6      	; 0xac0 <__mulsf3_pse+0x82>
 ac6:	98 3e       	cpi	r25, 0xE8	; 232
 ac8:	dc f3       	brlt	.-10     	; 0xac0 <__mulsf3_pse+0x82>
 aca:	86 95       	lsr	r24
 acc:	77 95       	ror	r23
 ace:	67 95       	ror	r22
 ad0:	b7 95       	ror	r27
 ad2:	f7 95       	ror	r31
 ad4:	e7 95       	ror	r30
 ad6:	9f 5f       	subi	r25, 0xFF	; 255
 ad8:	c1 f7       	brne	.-16     	; 0xaca <__mulsf3_pse+0x8c>
 ada:	fe 2b       	or	r31, r30
 adc:	88 0f       	add	r24, r24
 ade:	91 1d       	adc	r25, r1
 ae0:	96 95       	lsr	r25
 ae2:	87 95       	ror	r24
 ae4:	97 f9       	bld	r25, 7
 ae6:	08 95       	ret

00000ae8 <__fp_inf>:
 ae8:	97 f9       	bld	r25, 7
 aea:	9f 67       	ori	r25, 0x7F	; 127
 aec:	80 e8       	ldi	r24, 0x80	; 128
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	08 95       	ret

00000af4 <__fp_nan>:
 af4:	9f ef       	ldi	r25, 0xFF	; 255
 af6:	80 ec       	ldi	r24, 0xC0	; 192
 af8:	08 95       	ret

00000afa <__fp_pscA>:
 afa:	00 24       	eor	r0, r0
 afc:	0a 94       	dec	r0
 afe:	16 16       	cp	r1, r22
 b00:	17 06       	cpc	r1, r23
 b02:	18 06       	cpc	r1, r24
 b04:	09 06       	cpc	r0, r25
 b06:	08 95       	ret

00000b08 <__fp_pscB>:
 b08:	00 24       	eor	r0, r0
 b0a:	0a 94       	dec	r0
 b0c:	12 16       	cp	r1, r18
 b0e:	13 06       	cpc	r1, r19
 b10:	14 06       	cpc	r1, r20
 b12:	05 06       	cpc	r0, r21
 b14:	08 95       	ret

00000b16 <__fp_round>:
 b16:	09 2e       	mov	r0, r25
 b18:	03 94       	inc	r0
 b1a:	00 0c       	add	r0, r0
 b1c:	11 f4       	brne	.+4      	; 0xb22 <__fp_round+0xc>
 b1e:	88 23       	and	r24, r24
 b20:	52 f0       	brmi	.+20     	; 0xb36 <__fp_round+0x20>
 b22:	bb 0f       	add	r27, r27
 b24:	40 f4       	brcc	.+16     	; 0xb36 <__fp_round+0x20>
 b26:	bf 2b       	or	r27, r31
 b28:	11 f4       	brne	.+4      	; 0xb2e <__fp_round+0x18>
 b2a:	60 ff       	sbrs	r22, 0
 b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__fp_round+0x20>
 b2e:	6f 5f       	subi	r22, 0xFF	; 255
 b30:	7f 4f       	sbci	r23, 0xFF	; 255
 b32:	8f 4f       	sbci	r24, 0xFF	; 255
 b34:	9f 4f       	sbci	r25, 0xFF	; 255
 b36:	08 95       	ret

00000b38 <__umulhisi3>:
 b38:	a2 9f       	mul	r26, r18
 b3a:	b0 01       	movw	r22, r0
 b3c:	b3 9f       	mul	r27, r19
 b3e:	c0 01       	movw	r24, r0
 b40:	a3 9f       	mul	r26, r19
 b42:	70 0d       	add	r23, r0
 b44:	81 1d       	adc	r24, r1
 b46:	11 24       	eor	r1, r1
 b48:	91 1d       	adc	r25, r1
 b4a:	b2 9f       	mul	r27, r18
 b4c:	70 0d       	add	r23, r0
 b4e:	81 1d       	adc	r24, r1
 b50:	11 24       	eor	r1, r1
 b52:	91 1d       	adc	r25, r1
 b54:	08 95       	ret

00000b56 <_exit>:
 b56:	f8 94       	cli

00000b58 <__stop_program>:
 b58:	ff cf       	rjmp	.-2      	; 0xb58 <__stop_program>
