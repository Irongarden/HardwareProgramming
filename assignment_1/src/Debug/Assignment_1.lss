
Assignment_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f8b  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db2  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061b  00000000  00000000  00002065  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e8  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e6  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003066  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	a9 c0       	rjmp	.+338    	; 0x160 <__vector_3>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	58 d0       	rcall	.+176    	; 0x1a6 <main>
  f6:	5b c0       	rjmp	.+182    	; 0x1ae <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <init_ext_int>:
#define ANY_EDGE 3


void init_ext_int(uint8_t trigger)
{
	switch (trigger) {
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	79 f0       	breq	.+30     	; 0x11c <init_ext_int+0x22>
  fe:	28 f0       	brcs	.+10     	; 0x10a <init_ext_int+0x10>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	a9 f0       	breq	.+42     	; 0x12e <init_ext_int+0x34>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	e1 f0       	breq	.+56     	; 0x140 <init_ext_int+0x46>
 108:	23 c0       	rjmp	.+70     	; 0x150 <init_ext_int+0x56>
		case LOW:
			EICRA &= ~_BV(ISC20);
 10a:	e9 e6       	ldi	r30, 0x69	; 105
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	80 83       	st	Z, r24
			EICRA &= ~_BV(ISC21);
 114:	80 81       	ld	r24, Z
 116:	8f 7d       	andi	r24, 0xDF	; 223
 118:	80 83       	st	Z, r24
			break;
 11a:	1a c0       	rjmp	.+52     	; 0x150 <init_ext_int+0x56>
		case RISING_EDGE:
			EICRA |= _BV(ISC20);
 11c:	e9 e6       	ldi	r30, 0x69	; 105
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 61       	ori	r24, 0x10	; 16
 124:	80 83       	st	Z, r24
			EICRA |= _BV(ISC21);
 126:	80 81       	ld	r24, Z
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	80 83       	st	Z, r24
			break;
 12c:	11 c0       	rjmp	.+34     	; 0x150 <init_ext_int+0x56>
		case FALLING_EDGE:
			EICRA &= ~_BV(ISC20);
 12e:	e9 e6       	ldi	r30, 0x69	; 105
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8f 7e       	andi	r24, 0xEF	; 239
 136:	80 83       	st	Z, r24
			EICRA |= _BV(ISC21);
 138:	80 81       	ld	r24, Z
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	80 83       	st	Z, r24
			break;
 13e:	08 c0       	rjmp	.+16     	; 0x150 <init_ext_int+0x56>
		case ANY_EDGE:
			EICRA |= _BV(ISC20);
 140:	e9 e6       	ldi	r30, 0x69	; 105
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 61       	ori	r24, 0x10	; 16
 148:	80 83       	st	Z, r24
			EICRA &= ~_BV(ISC21);
 14a:	80 81       	ld	r24, Z
 14c:	8f 7d       	andi	r24, 0xDF	; 223
 14e:	80 83       	st	Z, r24
		default:
			break;
	}
	
	// Enable INT2 in the Externalinterrupt register
	EIMSK |= _BV(INT2);
 150:	8d b3       	in	r24, 0x1d	; 29
 152:	84 60       	ori	r24, 0x04	; 4
 154:	8d bb       	out	0x1d, r24	; 29
 156:	08 95       	ret

00000158 <app_ext_int_start>:
}

void app_ext_int_start()
{
	init_ext_int(FALLING_EDGE);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	cf df       	rcall	.-98     	; 0xfa <init_ext_int>
	sei();
 15c:	78 94       	sei
 15e:	08 95       	ret

00000160 <__vector_3>:
	
}

ISR(INT2_vect) {
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
	// Toggle PA0
	PORTA = PORTA ^ _BV(PA0);
 16e:	92 b1       	in	r25, 0x02	; 2
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	89 27       	eor	r24, r25
 174:	82 b9       	out	0x02, r24	; 2
}
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <init_keys>:
	/*
	* Setting data direction.
	* Only setting PC0 to PC5 as input on Port C.
	* Only setting PD2 and PD3 as input on Port D.
	*/
	DDRC &= ~(_BV(PC0) | _BV(PC1) | _BV(PC2) | _BV(PC3) | _BV(PC4) | _BV(PC5));
 184:	87 b1       	in	r24, 0x07	; 7
 186:	80 7c       	andi	r24, 0xC0	; 192
 188:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~(_BV(PD2) | _BV(PD3));
 18a:	8a b1       	in	r24, 0x0a	; 10
 18c:	83 7f       	andi	r24, 0xF3	; 243
 18e:	8a b9       	out	0x0a, r24	; 10
	/*
	* Setting pull up resistor.
	* Only setting PC0 to PC5 as input on Port C.
	* Only setting PD2 and PD3 as input on Port D.
	*/
	PORTC |= _BV(PC0) | _BV(PC1) | _BV(PC2) | _BV(PC3) | _BV(PC4) | _BV(PC5);
 190:	88 b1       	in	r24, 0x08	; 8
 192:	8f 63       	ori	r24, 0x3F	; 63
 194:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PD2) | _BV(PD3);
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	8c 60       	ori	r24, 0x0C	; 12
 19a:	8b b9       	out	0x0b, r24	; 11
 19c:	08 95       	ret

0000019e <init_leds>:
#include "../include/led.h"

void init_leds()
{
	// set pin direction to output
	DDRA = 0xFF;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	81 b9       	out	0x01, r24	; 1
	// turn all leds off - Active low
	PORTA = 0xFF;
 1a2:	82 b9       	out	0x02, r24	; 2
 1a4:	08 95       	ret

000001a6 <main>:
#include "app/interupt/interupt.h"

int main(void)
{
	// Initializing hardware.
	init_leds();
 1a6:	fb df       	rcall	.-10     	; 0x19e <init_leds>
	init_keys();
 1a8:	ed df       	rcall	.-38     	; 0x184 <init_keys>
	
	
	app_ext_int_start();
 1aa:	d6 df       	rcall	.-84     	; 0x158 <app_ext_int_start>
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <main+0x6>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
