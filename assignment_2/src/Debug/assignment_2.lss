
assignment_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800200  00800200  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7d  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc2  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b8  00000000  00000000  0000240f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000029c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d3  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a9  00000000  00000000  000030c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	f2 c0       	rjmp	.+484    	; 0x25a <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a3 30       	cpi	r26, 0x03	; 3
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	ea d0       	rcall	.+468    	; 0x2da <main>
 106:	27 c2       	rjmp	.+1102   	; 0x556 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <init_leds>:
#include "../include/led.h"

void init_leds()
{
	// set pin direction to output
	DDRA = 0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	81 b9       	out	0x01, r24	; 1
	// turn all leds off - Active low
	PORTA = 0xFF;
 10e:	82 b9       	out	0x02, r24	; 2
 110:	08 95       	ret

00000112 <set_led>:
/*
* Leds are active low.
*/
void set_led(uint8_t led_no, uint8_t state)
{
	if (led_no > 0 && led_no < 9)
 112:	9f ef       	ldi	r25, 0xFF	; 255
 114:	98 0f       	add	r25, r24
 116:	98 30       	cpi	r25, 0x08	; 8
 118:	00 f5       	brcc	.+64     	; 0x15a <set_led+0x48>
	{
		if (state == ON)
 11a:	61 30       	cpi	r22, 0x01	; 1
 11c:	81 f4       	brne	.+32     	; 0x13e <set_led+0x2c>
		{
			// Set port low.
			PORTA &= ~_BV(led_no - 1);
 11e:	42 b1       	in	r20, 0x02	; 2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <set_led+0x1e>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	8a 95       	dec	r24
 132:	e2 f7       	brpl	.-8      	; 0x12c <set_led+0x1a>
 134:	cb 01       	movw	r24, r22
 136:	80 95       	com	r24
 138:	84 23       	and	r24, r20
 13a:	82 b9       	out	0x02, r24	; 2
 13c:	08 95       	ret
		}
		else
		{
			// Set port high.
			PORTA |= _BV(led_no - 1);
 13e:	42 b1       	in	r20, 0x02	; 2
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <set_led+0x3e>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	8a 95       	dec	r24
 152:	e2 f7       	brpl	.-8      	; 0x14c <set_led+0x3a>
 154:	cb 01       	movw	r24, r22
 156:	84 2b       	or	r24, r20
 158:	82 b9       	out	0x02, r24	; 2
 15a:	08 95       	ret

0000015c <lightbar>:

/*
* Turns on all leds <= level og turns all off itteratively.
*/
void lightbar(uint8_t level) 
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	if (level >= 0 && level <= 8)
 160:	89 30       	cpi	r24, 0x09	; 9
 162:	60 f0       	brcs	.+24     	; 0x17c <lightbar+0x20>
 164:	0f c0       	rjmp	.+30     	; 0x184 <lightbar+0x28>
	{
		for(uint8_t i = 1; i <= 8; i++)
		{
			if (i <= level) 
 166:	dc 17       	cp	r29, r28
 168:	20 f0       	brcs	.+8      	; 0x172 <lightbar+0x16>
			{
				set_led(i, ON);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	8c 2f       	mov	r24, r28
 16e:	d1 df       	rcall	.-94     	; 0x112 <set_led>
 170:	03 c0       	rjmp	.+6      	; 0x178 <lightbar+0x1c>
			}
			else
			{
				set_led(i, OFF);	
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	8c 2f       	mov	r24, r28
 176:	cd df       	rcall	.-102    	; 0x112 <set_led>
*/
void lightbar(uint8_t level) 
{
	if (level >= 0 && level <= 8)
	{
		for(uint8_t i = 1; i <= 8; i++)
 178:	cf 5f       	subi	r28, 0xFF	; 255
 17a:	02 c0       	rjmp	.+4      	; 0x180 <lightbar+0x24>
 17c:	d8 2f       	mov	r29, r24
 17e:	c1 e0       	ldi	r28, 0x01	; 1
 180:	c9 30       	cpi	r28, 0x09	; 9
 182:	88 f3       	brcs	.-30     	; 0x166 <lightbar+0xa>
			{
				set_led(i, OFF);	
			}
		}
	}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <mv_to_c>:
static void (*cb)(uint8_t deg_c) = 0;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
 18a:	9c 01       	movw	r18, r24
 18c:	24 5f       	subi	r18, 0xF4	; 244
 18e:	31 40       	sbci	r19, 0x01	; 1
 190:	ad ec       	ldi	r26, 0xCD	; 205
 192:	bc ec       	ldi	r27, 0xCC	; 204
 194:	d1 d1       	rcall	.+930    	; 0x538 <__umulhisi3>
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
}
 1a2:	08 95       	ret

000001a4 <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
 1a4:	bc 01       	movw	r22, r24
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	d5 d0       	rcall	.+426    	; 0x356 <__floatunsisf>
 1ac:	2a e1       	ldi	r18, 0x1A	; 26
 1ae:	37 e6       	ldi	r19, 0x67	; 103
 1b0:	4c e9       	ldi	r20, 0x9C	; 156
 1b2:	50 e4       	ldi	r21, 0x40	; 64
 1b4:	36 d1       	rcall	.+620    	; 0x422 <__mulsf3>
 1b6:	a3 d0       	rcall	.+326    	; 0x2fe <__fixunssfsi>
}
 1b8:	cb 01       	movw	r24, r22
 1ba:	08 95       	ret

000001bc <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
 1bc:	9c 01       	movw	r18, r24
	// **** General config *****
	
	// Set PK7 direction as input (TMP36 Vout)
	DDRK &= ~_BV(v_out);
 1be:	e7 e0       	ldi	r30, 0x07	; 7
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 77       	andi	r24, 0x7F	; 127
 1c6:	80 83       	st	Z, r24
	
	// Set PG0 direction as output (TMP36 Enable)
	DDRG |= _BV(enable);  
 1c8:	83 b3       	in	r24, 0x13	; 19
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	83 bb       	out	0x13, r24	; 19

	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
 1ce:	ec e7       	ldi	r30, 0x7C	; 124
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
 1d8:	80 81       	ld	r24, Z
 1da:	87 60       	ori	r24, 0x07	; 7
 1dc:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 1de:	ab e7       	ldi	r26, 0x7B	; 123
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	8c 91       	ld	r24, X
 1e4:	88 60       	ori	r24, 0x08	; 8
 1e6:	8c 93       	st	X, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
 1e8:	ea e7       	ldi	r30, 0x7A	; 122
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	86 60       	ori	r24, 0x06	; 6
 1f0:	80 83       	st	Z, r24

	// Enable ADC  
	ADCSRA |= _BV(ADEN);
 1f2:	80 81       	ld	r24, Z
 1f4:	80 68       	ori	r24, 0x80	; 128
 1f6:	80 83       	st	Z, r24
	// ****** General config end *************
	
	// ****** Interrupt and auto trigger ****
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
 1f8:	80 81       	ld	r24, Z
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
 1fe:	80 81       	ld	r24, Z
 200:	80 62       	ori	r24, 0x20	; 32
 202:	80 83       	st	Z, r24
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 204:	8c 91       	ld	r24, X
 206:	85 60       	ori	r24, 0x05	; 5
 208:	8c 93       	st	X, r24
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1A |= _BV(WGM11);
 20a:	e0 e8       	ldi	r30, 0x80	; 128
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	90 81       	ld	r25, Z
 210:	92 60       	ori	r25, 0x02	; 2
 212:	90 83       	st	Z, r25
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
 214:	90 81       	ld	r25, Z
 216:	90 61       	ori	r25, 0x10	; 16
 218:	90 83       	st	Z, r25
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
 21a:	e1 e8       	ldi	r30, 0x81	; 129
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	90 81       	ld	r25, Z
 220:	94 60       	ori	r25, 0x04	; 4
 222:	90 83       	st	Z, r25
	
	// Enable Timer Interrupt
	TIMSK1 |= _BV(OCIE1B);
 224:	ef e6       	ldi	r30, 0x6F	; 111
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	90 81       	ld	r25, Z
 22a:	94 60       	ori	r25, 0x04	; 4
 22c:	90 83       	st	Z, r25

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
 22e:	81 e1       	ldi	r24, 0x11	; 17
 230:	9a e7       	ldi	r25, 0x7A	; 122
 232:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 236:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
 23a:	21 15       	cp	r18, r1
 23c:	31 05       	cpc	r19, r1
 23e:	21 f0       	breq	.+8      	; 0x248 <tmp36_init+0x8c>
		cb = callback;
 240:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 244:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	// Enable TMP36
	PORTG |= _BV(enable);
 248:	84 b3       	in	r24, 0x14	; 20
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	84 bb       	out	0x14, r24	; 20
	
	// Start Conversion.
	ADCSRA |= _BV(ADSC);
 24e:	ea e7       	ldi	r30, 0x7A	; 122
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	80 64       	ori	r24, 0x40	; 64
 256:	80 83       	st	Z, r24
 258:	08 95       	ret

0000025a <__vector_29>:
}

// AD Interrupt callback.
ISR(ADC_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	0b b6       	in	r0, 0x3b	; 59
 266:	0f 92       	push	r0
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	4f 93       	push	r20
 26e:	5f 93       	push	r21
 270:	6f 93       	push	r22
 272:	7f 93       	push	r23
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
 284:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 288:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 28c:	20 97       	sbiw	r28, 0x00	; 0
 28e:	41 f0       	breq	.+16     	; 0x2a0 <__vector_29+0x46>
		cb(mv_to_c(adc_to_mv(ADC)));
 290:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 294:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 298:	85 df       	rcall	.-246    	; 0x1a4 <adc_to_mv>
 29a:	77 df       	rcall	.-274    	; 0x18a <mv_to_c>
 29c:	fe 01       	movw	r30, r28
 29e:	19 95       	eicall
	
	// ADC interrupt flag is high!
	// Clear ADC interrupt flag.
	ADCSRA |= ~_BV(ADIF);
 2a0:	ea e7       	ldi	r30, 0x7A	; 122
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	8f 6e       	ori	r24, 0xEF	; 239
 2a8:	80 83       	st	Z, r24
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0b be       	out	0x3b, r0	; 59
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <new_measurement>:
#define offset 17
static uint8_t temp = 0;

static void new_measurement(uint8_t deg_c)
{
	temp = deg_c;
 2d4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <temp>
 2d8:	08 95       	ret

000002da <main>:
}


int main(void)
{
	init_leds();
 2da:	17 df       	rcall	.-466    	; 0x10a <init_leds>
	tmp36_init(new_measurement);
 2dc:	8a e6       	ldi	r24, 0x6A	; 106
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	6d df       	rcall	.-294    	; 0x1bc <tmp36_init>
	
	// Enable interrupt globally.
	sei();
 2e2:	78 94       	sei
	
    while (1) 
    {
		uint8_t level = temp - offset;
 2e4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <temp>
		if (level <= 0)
 2e8:	81 51       	subi	r24, 0x11	; 17
		{
			lightbar(0);
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <main+0x16>
 2ec:	37 df       	rcall	.-402    	; 0x15c <lightbar>
		}
		else if (level < 9)
 2ee:	fa cf       	rjmp	.-12     	; 0x2e4 <main+0xa>
 2f0:	89 30       	cpi	r24, 0x09	; 9
		{
			lightbar(level);
 2f2:	10 f4       	brcc	.+4      	; 0x2f8 <main+0x1e>
 2f4:	33 df       	rcall	.-410    	; 0x15c <lightbar>
		}
		else
		{
			lightbar(8);
 2f6:	f6 cf       	rjmp	.-20     	; 0x2e4 <main+0xa>
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	30 df       	rcall	.-416    	; 0x15c <lightbar>
 2fc:	f3 cf       	rjmp	.-26     	; 0x2e4 <main+0xa>

000002fe <__fixunssfsi>:
 2fe:	70 d0       	rcall	.+224    	; 0x3e0 <__fp_splitA>
 300:	88 f0       	brcs	.+34     	; 0x324 <__fixunssfsi+0x26>
 302:	9f 57       	subi	r25, 0x7F	; 127
 304:	90 f0       	brcs	.+36     	; 0x32a <__fixunssfsi+0x2c>
 306:	b9 2f       	mov	r27, r25
 308:	99 27       	eor	r25, r25
 30a:	b7 51       	subi	r27, 0x17	; 23
 30c:	a0 f0       	brcs	.+40     	; 0x336 <__fixunssfsi+0x38>
 30e:	d1 f0       	breq	.+52     	; 0x344 <__fixunssfsi+0x46>
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	88 1f       	adc	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	1a f0       	brmi	.+6      	; 0x320 <__fixunssfsi+0x22>
 31a:	ba 95       	dec	r27
 31c:	c9 f7       	brne	.-14     	; 0x310 <__fixunssfsi+0x12>
 31e:	12 c0       	rjmp	.+36     	; 0x344 <__fixunssfsi+0x46>
 320:	b1 30       	cpi	r27, 0x01	; 1
 322:	81 f0       	breq	.+32     	; 0x344 <__fixunssfsi+0x46>
 324:	77 d0       	rcall	.+238    	; 0x414 <__fp_zero>
 326:	b1 e0       	ldi	r27, 0x01	; 1
 328:	08 95       	ret
 32a:	74 c0       	rjmp	.+232    	; 0x414 <__fp_zero>
 32c:	67 2f       	mov	r22, r23
 32e:	78 2f       	mov	r23, r24
 330:	88 27       	eor	r24, r24
 332:	b8 5f       	subi	r27, 0xF8	; 248
 334:	39 f0       	breq	.+14     	; 0x344 <__fixunssfsi+0x46>
 336:	b9 3f       	cpi	r27, 0xF9	; 249
 338:	cc f3       	brlt	.-14     	; 0x32c <__fixunssfsi+0x2e>
 33a:	86 95       	lsr	r24
 33c:	77 95       	ror	r23
 33e:	67 95       	ror	r22
 340:	b3 95       	inc	r27
 342:	d9 f7       	brne	.-10     	; 0x33a <__fixunssfsi+0x3c>
 344:	3e f4       	brtc	.+14     	; 0x354 <__fixunssfsi+0x56>
 346:	90 95       	com	r25
 348:	80 95       	com	r24
 34a:	70 95       	com	r23
 34c:	61 95       	neg	r22
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	8f 4f       	sbci	r24, 0xFF	; 255
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	08 95       	ret

00000356 <__floatunsisf>:
 356:	e8 94       	clt
 358:	09 c0       	rjmp	.+18     	; 0x36c <__floatsisf+0x12>

0000035a <__floatsisf>:
 35a:	97 fb       	bst	r25, 7
 35c:	3e f4       	brtc	.+14     	; 0x36c <__floatsisf+0x12>
 35e:	90 95       	com	r25
 360:	80 95       	com	r24
 362:	70 95       	com	r23
 364:	61 95       	neg	r22
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	8f 4f       	sbci	r24, 0xFF	; 255
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	99 23       	and	r25, r25
 36e:	a9 f0       	breq	.+42     	; 0x39a <__floatsisf+0x40>
 370:	f9 2f       	mov	r31, r25
 372:	96 e9       	ldi	r25, 0x96	; 150
 374:	bb 27       	eor	r27, r27
 376:	93 95       	inc	r25
 378:	f6 95       	lsr	r31
 37a:	87 95       	ror	r24
 37c:	77 95       	ror	r23
 37e:	67 95       	ror	r22
 380:	b7 95       	ror	r27
 382:	f1 11       	cpse	r31, r1
 384:	f8 cf       	rjmp	.-16     	; 0x376 <__floatsisf+0x1c>
 386:	fa f4       	brpl	.+62     	; 0x3c6 <__floatsisf+0x6c>
 388:	bb 0f       	add	r27, r27
 38a:	11 f4       	brne	.+4      	; 0x390 <__floatsisf+0x36>
 38c:	60 ff       	sbrs	r22, 0
 38e:	1b c0       	rjmp	.+54     	; 0x3c6 <__floatsisf+0x6c>
 390:	6f 5f       	subi	r22, 0xFF	; 255
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	8f 4f       	sbci	r24, 0xFF	; 255
 396:	9f 4f       	sbci	r25, 0xFF	; 255
 398:	16 c0       	rjmp	.+44     	; 0x3c6 <__floatsisf+0x6c>
 39a:	88 23       	and	r24, r24
 39c:	11 f0       	breq	.+4      	; 0x3a2 <__floatsisf+0x48>
 39e:	96 e9       	ldi	r25, 0x96	; 150
 3a0:	11 c0       	rjmp	.+34     	; 0x3c4 <__floatsisf+0x6a>
 3a2:	77 23       	and	r23, r23
 3a4:	21 f0       	breq	.+8      	; 0x3ae <__floatsisf+0x54>
 3a6:	9e e8       	ldi	r25, 0x8E	; 142
 3a8:	87 2f       	mov	r24, r23
 3aa:	76 2f       	mov	r23, r22
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <__floatsisf+0x5e>
 3ae:	66 23       	and	r22, r22
 3b0:	71 f0       	breq	.+28     	; 0x3ce <__floatsisf+0x74>
 3b2:	96 e8       	ldi	r25, 0x86	; 134
 3b4:	86 2f       	mov	r24, r22
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	2a f0       	brmi	.+10     	; 0x3c6 <__floatsisf+0x6c>
 3bc:	9a 95       	dec	r25
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	88 1f       	adc	r24, r24
 3c4:	da f7       	brpl	.-10     	; 0x3bc <__floatsisf+0x62>
 3c6:	88 0f       	add	r24, r24
 3c8:	96 95       	lsr	r25
 3ca:	87 95       	ror	r24
 3cc:	97 f9       	bld	r25, 7
 3ce:	08 95       	ret

000003d0 <__fp_split3>:
 3d0:	57 fd       	sbrc	r21, 7
 3d2:	90 58       	subi	r25, 0x80	; 128
 3d4:	44 0f       	add	r20, r20
 3d6:	55 1f       	adc	r21, r21
 3d8:	59 f0       	breq	.+22     	; 0x3f0 <__fp_splitA+0x10>
 3da:	5f 3f       	cpi	r21, 0xFF	; 255
 3dc:	71 f0       	breq	.+28     	; 0x3fa <__fp_splitA+0x1a>
 3de:	47 95       	ror	r20

000003e0 <__fp_splitA>:
 3e0:	88 0f       	add	r24, r24
 3e2:	97 fb       	bst	r25, 7
 3e4:	99 1f       	adc	r25, r25
 3e6:	61 f0       	breq	.+24     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e8:	9f 3f       	cpi	r25, 0xFF	; 255
 3ea:	79 f0       	breq	.+30     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ec:	87 95       	ror	r24
 3ee:	08 95       	ret
 3f0:	12 16       	cp	r1, r18
 3f2:	13 06       	cpc	r1, r19
 3f4:	14 06       	cpc	r1, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	f2 cf       	rjmp	.-28     	; 0x3de <__fp_split3+0xe>
 3fa:	46 95       	lsr	r20
 3fc:	f1 df       	rcall	.-30     	; 0x3e0 <__fp_splitA>
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 400:	16 16       	cp	r1, r22
 402:	17 06       	cpc	r1, r23
 404:	18 06       	cpc	r1, r24
 406:	99 1f       	adc	r25, r25
 408:	f1 cf       	rjmp	.-30     	; 0x3ec <__fp_splitA+0xc>
 40a:	86 95       	lsr	r24
 40c:	71 05       	cpc	r23, r1
 40e:	61 05       	cpc	r22, r1
 410:	08 94       	sec
 412:	08 95       	ret

00000414 <__fp_zero>:
 414:	e8 94       	clt

00000416 <__fp_szero>:
 416:	bb 27       	eor	r27, r27
 418:	66 27       	eor	r22, r22
 41a:	77 27       	eor	r23, r23
 41c:	cb 01       	movw	r24, r22
 41e:	97 f9       	bld	r25, 7
 420:	08 95       	ret

00000422 <__mulsf3>:
 422:	0b d0       	rcall	.+22     	; 0x43a <__mulsf3x>
 424:	78 c0       	rjmp	.+240    	; 0x516 <__fp_round>
 426:	69 d0       	rcall	.+210    	; 0x4fa <__fp_pscA>
 428:	28 f0       	brcs	.+10     	; 0x434 <__mulsf3+0x12>
 42a:	6e d0       	rcall	.+220    	; 0x508 <__fp_pscB>
 42c:	18 f0       	brcs	.+6      	; 0x434 <__mulsf3+0x12>
 42e:	95 23       	and	r25, r21
 430:	09 f0       	breq	.+2      	; 0x434 <__mulsf3+0x12>
 432:	5a c0       	rjmp	.+180    	; 0x4e8 <__fp_inf>
 434:	5f c0       	rjmp	.+190    	; 0x4f4 <__fp_nan>
 436:	11 24       	eor	r1, r1
 438:	ee cf       	rjmp	.-36     	; 0x416 <__fp_szero>

0000043a <__mulsf3x>:
 43a:	ca df       	rcall	.-108    	; 0x3d0 <__fp_split3>
 43c:	a0 f3       	brcs	.-24     	; 0x426 <__mulsf3+0x4>

0000043e <__mulsf3_pse>:
 43e:	95 9f       	mul	r25, r21
 440:	d1 f3       	breq	.-12     	; 0x436 <__mulsf3+0x14>
 442:	95 0f       	add	r25, r21
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	55 1f       	adc	r21, r21
 448:	62 9f       	mul	r22, r18
 44a:	f0 01       	movw	r30, r0
 44c:	72 9f       	mul	r23, r18
 44e:	bb 27       	eor	r27, r27
 450:	f0 0d       	add	r31, r0
 452:	b1 1d       	adc	r27, r1
 454:	63 9f       	mul	r22, r19
 456:	aa 27       	eor	r26, r26
 458:	f0 0d       	add	r31, r0
 45a:	b1 1d       	adc	r27, r1
 45c:	aa 1f       	adc	r26, r26
 45e:	64 9f       	mul	r22, r20
 460:	66 27       	eor	r22, r22
 462:	b0 0d       	add	r27, r0
 464:	a1 1d       	adc	r26, r1
 466:	66 1f       	adc	r22, r22
 468:	82 9f       	mul	r24, r18
 46a:	22 27       	eor	r18, r18
 46c:	b0 0d       	add	r27, r0
 46e:	a1 1d       	adc	r26, r1
 470:	62 1f       	adc	r22, r18
 472:	73 9f       	mul	r23, r19
 474:	b0 0d       	add	r27, r0
 476:	a1 1d       	adc	r26, r1
 478:	62 1f       	adc	r22, r18
 47a:	83 9f       	mul	r24, r19
 47c:	a0 0d       	add	r26, r0
 47e:	61 1d       	adc	r22, r1
 480:	22 1f       	adc	r18, r18
 482:	74 9f       	mul	r23, r20
 484:	33 27       	eor	r19, r19
 486:	a0 0d       	add	r26, r0
 488:	61 1d       	adc	r22, r1
 48a:	23 1f       	adc	r18, r19
 48c:	84 9f       	mul	r24, r20
 48e:	60 0d       	add	r22, r0
 490:	21 1d       	adc	r18, r1
 492:	82 2f       	mov	r24, r18
 494:	76 2f       	mov	r23, r22
 496:	6a 2f       	mov	r22, r26
 498:	11 24       	eor	r1, r1
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	50 40       	sbci	r21, 0x00	; 0
 49e:	8a f0       	brmi	.+34     	; 0x4c2 <__mulsf3_pse+0x84>
 4a0:	e1 f0       	breq	.+56     	; 0x4da <__mulsf3_pse+0x9c>
 4a2:	88 23       	and	r24, r24
 4a4:	4a f0       	brmi	.+18     	; 0x4b8 <__mulsf3_pse+0x7a>
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	bb 1f       	adc	r27, r27
 4ac:	66 1f       	adc	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	91 50       	subi	r25, 0x01	; 1
 4b4:	50 40       	sbci	r21, 0x00	; 0
 4b6:	a9 f7       	brne	.-22     	; 0x4a2 <__mulsf3_pse+0x64>
 4b8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ba:	51 05       	cpc	r21, r1
 4bc:	70 f0       	brcs	.+28     	; 0x4da <__mulsf3_pse+0x9c>
 4be:	14 c0       	rjmp	.+40     	; 0x4e8 <__fp_inf>
 4c0:	aa cf       	rjmp	.-172    	; 0x416 <__fp_szero>
 4c2:	5f 3f       	cpi	r21, 0xFF	; 255
 4c4:	ec f3       	brlt	.-6      	; 0x4c0 <__mulsf3_pse+0x82>
 4c6:	98 3e       	cpi	r25, 0xE8	; 232
 4c8:	dc f3       	brlt	.-10     	; 0x4c0 <__mulsf3_pse+0x82>
 4ca:	86 95       	lsr	r24
 4cc:	77 95       	ror	r23
 4ce:	67 95       	ror	r22
 4d0:	b7 95       	ror	r27
 4d2:	f7 95       	ror	r31
 4d4:	e7 95       	ror	r30
 4d6:	9f 5f       	subi	r25, 0xFF	; 255
 4d8:	c1 f7       	brne	.-16     	; 0x4ca <__mulsf3_pse+0x8c>
 4da:	fe 2b       	or	r31, r30
 4dc:	88 0f       	add	r24, r24
 4de:	91 1d       	adc	r25, r1
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	97 f9       	bld	r25, 7
 4e6:	08 95       	ret

000004e8 <__fp_inf>:
 4e8:	97 f9       	bld	r25, 7
 4ea:	9f 67       	ori	r25, 0x7F	; 127
 4ec:	80 e8       	ldi	r24, 0x80	; 128
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	08 95       	ret

000004f4 <__fp_nan>:
 4f4:	9f ef       	ldi	r25, 0xFF	; 255
 4f6:	80 ec       	ldi	r24, 0xC0	; 192
 4f8:	08 95       	ret

000004fa <__fp_pscA>:
 4fa:	00 24       	eor	r0, r0
 4fc:	0a 94       	dec	r0
 4fe:	16 16       	cp	r1, r22
 500:	17 06       	cpc	r1, r23
 502:	18 06       	cpc	r1, r24
 504:	09 06       	cpc	r0, r25
 506:	08 95       	ret

00000508 <__fp_pscB>:
 508:	00 24       	eor	r0, r0
 50a:	0a 94       	dec	r0
 50c:	12 16       	cp	r1, r18
 50e:	13 06       	cpc	r1, r19
 510:	14 06       	cpc	r1, r20
 512:	05 06       	cpc	r0, r21
 514:	08 95       	ret

00000516 <__fp_round>:
 516:	09 2e       	mov	r0, r25
 518:	03 94       	inc	r0
 51a:	00 0c       	add	r0, r0
 51c:	11 f4       	brne	.+4      	; 0x522 <__fp_round+0xc>
 51e:	88 23       	and	r24, r24
 520:	52 f0       	brmi	.+20     	; 0x536 <__fp_round+0x20>
 522:	bb 0f       	add	r27, r27
 524:	40 f4       	brcc	.+16     	; 0x536 <__fp_round+0x20>
 526:	bf 2b       	or	r27, r31
 528:	11 f4       	brne	.+4      	; 0x52e <__fp_round+0x18>
 52a:	60 ff       	sbrs	r22, 0
 52c:	04 c0       	rjmp	.+8      	; 0x536 <__fp_round+0x20>
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	08 95       	ret

00000538 <__umulhisi3>:
 538:	a2 9f       	mul	r26, r18
 53a:	b0 01       	movw	r22, r0
 53c:	b3 9f       	mul	r27, r19
 53e:	c0 01       	movw	r24, r0
 540:	a3 9f       	mul	r26, r19
 542:	70 0d       	add	r23, r0
 544:	81 1d       	adc	r24, r1
 546:	11 24       	eor	r1, r1
 548:	91 1d       	adc	r25, r1
 54a:	b2 9f       	mul	r27, r18
 54c:	70 0d       	add	r23, r0
 54e:	81 1d       	adc	r24, r1
 550:	11 24       	eor	r1, r1
 552:	91 1d       	adc	r25, r1
 554:	08 95       	ret

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
