
assignment_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  000016ee  00001782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800236  00800236  000017b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002908  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001832  00000000  00000000  00004388  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169a  00000000  00000000  00005bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f4  00000000  00000000  00007254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b09  00000000  00000000  00007948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000140b  00000000  00000000  00008451  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000985c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	a8 c2       	rjmp	.+1360   	; 0x55e <__vector_3>
       e:	00 00       	nop
      10:	d3 c2       	rjmp	.+1446   	; 0x5b8 <__vector_4>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	7d c0       	rjmp	.+250    	; 0x140 <__bad_interrupt>
      46:	00 00       	nop
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c0       	rjmp	.+218    	; 0x140 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c5       	rjmp	.+2750   	; 0xb34 <__vector_29>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c0       	rjmp	.+190    	; 0x140 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c0       	rjmp	.+174    	; 0x140 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	96 c4       	rjmp	.+2348   	; 0x9d6 <__vector_42>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1f 01       	movw	r2, r30
      e6:	2c 01       	movw	r4, r24
      e8:	39 01       	movw	r6, r18
      ea:	46 01       	movw	r8, r12
      ec:	53 01       	movw	r10, r6
      ee:	60 01       	movw	r12, r0
      f0:	6d 01       	movw	r12, r26
      f2:	f6 01       	movw	r30, r12
      f4:	03 02       	muls	r16, r19
      f6:	10 02       	muls	r17, r16
      f8:	1d 02       	muls	r17, r29
      fa:	2a 02       	muls	r18, r26
      fc:	37 02       	muls	r19, r23
      fe:	44 02       	muls	r20, r20

00000100 <__ctors_end>:
     100:	11 24       	eor	r1, r1
     102:	1f be       	out	0x3f, r1	; 63
     104:	cf ef       	ldi	r28, 0xFF	; 255
     106:	d1 e2       	ldi	r29, 0x21	; 33
     108:	de bf       	out	0x3e, r29	; 62
     10a:	cd bf       	out	0x3d, r28	; 61
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	0c bf       	out	0x3c, r16	; 60

00000110 <__do_copy_data>:
     110:	12 e0       	ldi	r17, 0x02	; 2
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	ee ee       	ldi	r30, 0xEE	; 238
     118:	f6 e1       	ldi	r31, 0x16	; 22
     11a:	00 e0       	ldi	r16, 0x00	; 0
     11c:	0b bf       	out	0x3b, r16	; 59
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x14>
     120:	07 90       	elpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	a6 33       	cpi	r26, 0x36	; 54
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0x10>

0000012a <__do_clear_bss>:
     12a:	22 e0       	ldi	r18, 0x02	; 2
     12c:	a6 e3       	ldi	r26, 0x36	; 54
     12e:	b2 e0       	ldi	r27, 0x02	; 2
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	a3 38       	cpi	r26, 0x83	; 131
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	f5 d5       	rcall	.+3050   	; 0xd26 <main>
     13c:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <output_set_state>:
	
	return output;
}

return_code_t output_set_state(io_descriptor_t self, state_t state)
{
     142:	fc 01       	movw	r30, r24
	if (self->active == ACTIVE_LOW) {
     144:	86 81       	ldd	r24, Z+6	; 0x06
     146:	81 11       	cpse	r24, r1
     148:	1f c0       	rjmp	.+62     	; 0x188 <output_set_state+0x46>
		if (state == ACTIVE) {
     14a:	61 30       	cpi	r22, 0x01	; 1
     14c:	79 f4       	brne	.+30     	; 0x16c <output_set_state+0x2a>
			// Set port low.
			*(self->port) &= ~_BV(self->bit);
     14e:	a4 81       	ldd	r26, Z+4	; 0x04
     150:	b5 81       	ldd	r27, Z+5	; 0x05
     152:	2c 91       	ld	r18, X
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	07 80       	ldd	r0, Z+7	; 0x07
     15a:	02 c0       	rjmp	.+4      	; 0x160 <output_set_state+0x1e>
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	0a 94       	dec	r0
     162:	e2 f7       	brpl	.-8      	; 0x15c <output_set_state+0x1a>
     164:	80 95       	com	r24
     166:	82 23       	and	r24, r18
     168:	8c 93       	st	X, r24
     16a:	2c c0       	rjmp	.+88     	; 0x1c4 <output_set_state+0x82>
		}
		else {
			// Set port high.
			*(self->port) |= _BV(self->bit);
     16c:	a4 81       	ldd	r26, Z+4	; 0x04
     16e:	b5 81       	ldd	r27, Z+5	; 0x05
     170:	2c 91       	ld	r18, X
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	07 80       	ldd	r0, Z+7	; 0x07
     178:	02 c0       	rjmp	.+4      	; 0x17e <output_set_state+0x3c>
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	0a 94       	dec	r0
     180:	e2 f7       	brpl	.-8      	; 0x17a <output_set_state+0x38>
     182:	82 2b       	or	r24, r18
     184:	8c 93       	st	X, r24
     186:	1e c0       	rjmp	.+60     	; 0x1c4 <output_set_state+0x82>
		}
	}
	else {
		if (state == ACTIVE) {
     188:	61 30       	cpi	r22, 0x01	; 1
     18a:	71 f4       	brne	.+28     	; 0x1a8 <output_set_state+0x66>
			// set port high.
			*(self->port) |= _BV(self->bit);
     18c:	a4 81       	ldd	r26, Z+4	; 0x04
     18e:	b5 81       	ldd	r27, Z+5	; 0x05
     190:	2c 91       	ld	r18, X
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	07 80       	ldd	r0, Z+7	; 0x07
     198:	02 c0       	rjmp	.+4      	; 0x19e <output_set_state+0x5c>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	0a 94       	dec	r0
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <output_set_state+0x58>
     1a2:	82 2b       	or	r24, r18
     1a4:	8c 93       	st	X, r24
     1a6:	0e c0       	rjmp	.+28     	; 0x1c4 <output_set_state+0x82>
		}
		else {
			// Set port low.
			*(self->port) &= ~_BV(self->bit);
     1a8:	a4 81       	ldd	r26, Z+4	; 0x04
     1aa:	b5 81       	ldd	r27, Z+5	; 0x05
     1ac:	2c 91       	ld	r18, X
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	07 80       	ldd	r0, Z+7	; 0x07
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <output_set_state+0x78>
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	0a 94       	dec	r0
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <output_set_state+0x74>
     1be:	80 95       	com	r24
     1c0:	82 23       	and	r24, r18
     1c2:	8c 93       	st	X, r24
		}
	}
	
	// Could preform a check of the actual pin state. 
	return OK;
}
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	08 95       	ret

000001c8 <configure_output>:
#include "../include/digital_output.h"

static void configure_output(io_descriptor_t output, uint8_t init_state, state_t default_state)
{
	// Initialize Data Direction Register for each output-pin.
	*(output->ddr) |= _BV(output->bit);
     1c8:	dc 01       	movw	r26, r24
     1ca:	ed 91       	ld	r30, X+
     1cc:	fc 91       	ld	r31, X
     1ce:	11 97       	sbiw	r26, 0x01	; 1
     1d0:	50 81       	ld	r21, Z
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	17 96       	adiw	r26, 0x07	; 7
     1d8:	0c 90       	ld	r0, X
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <configure_output+0x18>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	0a 94       	dec	r0
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <configure_output+0x14>
     1e4:	25 2b       	or	r18, r21
     1e6:	20 83       	st	Z, r18
	
	// Initialise default state.
	if (init_state)
     1e8:	66 23       	and	r22, r22
     1ea:	11 f0       	breq	.+4      	; 0x1f0 <configure_output+0x28>
     1ec:	64 2f       	mov	r22, r20
		output_set_state(output, default_state);
     1ee:	a9 cf       	rjmp	.-174    	; 0x142 <output_set_state>
     1f0:	08 95       	ret

000001f2 <output_init>:
}

io_descriptor_t output_init(port_t port, uint8_t bit, active_state_t active, uint8_t init_state, state_t default_state)
{
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	18 2f       	mov	r17, r24
     202:	f6 2e       	mov	r15, r22
     204:	e4 2e       	mov	r14, r20
     206:	d2 2e       	mov	r13, r18
	// Reserving memory.
	io_descriptor_t output = malloc(sizeof(io_descriptor_st));
     208:	88 e0       	ldi	r24, 0x08	; 8
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <malloc>
     210:	ec 01       	movw	r28, r24
	
	// Checking that memory is reserved.
	if (0 == output) {
     212:	89 2b       	or	r24, r25
     214:	09 f4       	brne	.+2      	; 0x218 <output_init+0x26>
     216:	74 c0       	rjmp	.+232    	; 0x300 <output_init+0x10e>
		return 0;
	}
	
	// Input validation.
	if (!(bit >= 0 && bit <= 7)) {
     218:	87 e0       	ldi	r24, 0x07	; 7
     21a:	8f 15       	cp	r24, r15
     21c:	08 f4       	brcc	.+2      	; 0x220 <output_init+0x2e>
     21e:	73 c0       	rjmp	.+230    	; 0x306 <output_init+0x114>
		return 0;
	}
	
	// Assign values.
	output->bit = bit;
     220:	ff 82       	std	Y+7, r15	; 0x07
	output->active = active;
     222:	ee 82       	std	Y+6, r14	; 0x06
	
	switch (port) {
     224:	81 2f       	mov	r24, r17
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	87 30       	cpi	r24, 0x07	; 7
     22a:	91 05       	cpc	r25, r1
     22c:	08 f0       	brcs	.+2      	; 0x230 <output_init+0x3e>
     22e:	6e c0       	rjmp	.+220    	; 0x30c <output_init+0x11a>
     230:	fc 01       	movw	r30, r24
     232:	88 27       	eor	r24, r24
     234:	ee 58       	subi	r30, 0x8E	; 142
     236:	ff 4f       	sbci	r31, 0xFF	; 255
     238:	8f 4f       	sbci	r24, 0xFF	; 255
     23a:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__tablejump2__>
		case PA:
			output->ddr = &DDRA;
     23e:	81 e2       	ldi	r24, 0x21	; 33
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	99 83       	std	Y+1, r25	; 0x01
     244:	88 83       	st	Y, r24
			output->pin = &PINA;
     246:	80 e2       	ldi	r24, 0x20	; 32
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	9b 83       	std	Y+3, r25	; 0x03
     24c:	8a 83       	std	Y+2, r24	; 0x02
			output->port = &PORTA;
     24e:	82 e2       	ldi	r24, 0x22	; 34
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	9d 83       	std	Y+5, r25	; 0x05
     254:	8c 83       	std	Y+4, r24	; 0x04
			break;
     256:	4d c0       	rjmp	.+154    	; 0x2f2 <output_init+0x100>
		case PB:
			output->ddr = &DDRB;
     258:	84 e2       	ldi	r24, 0x24	; 36
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	99 83       	std	Y+1, r25	; 0x01
     25e:	88 83       	st	Y, r24
			output->pin = &PINB;
     260:	83 e2       	ldi	r24, 0x23	; 35
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	9b 83       	std	Y+3, r25	; 0x03
     266:	8a 83       	std	Y+2, r24	; 0x02
			output->port = &PORTB;
     268:	85 e2       	ldi	r24, 0x25	; 37
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	9d 83       	std	Y+5, r25	; 0x05
     26e:	8c 83       	std	Y+4, r24	; 0x04
			break;
     270:	40 c0       	rjmp	.+128    	; 0x2f2 <output_init+0x100>
		case PC:
			output->ddr = &DDRC;
     272:	87 e2       	ldi	r24, 0x27	; 39
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	99 83       	std	Y+1, r25	; 0x01
     278:	88 83       	st	Y, r24
			output->pin = &PINC;
     27a:	86 e2       	ldi	r24, 0x26	; 38
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	9b 83       	std	Y+3, r25	; 0x03
     280:	8a 83       	std	Y+2, r24	; 0x02
			output->port = &PORTC;
     282:	88 e2       	ldi	r24, 0x28	; 40
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	9d 83       	std	Y+5, r25	; 0x05
     288:	8c 83       	std	Y+4, r24	; 0x04
			break;
     28a:	33 c0       	rjmp	.+102    	; 0x2f2 <output_init+0x100>
		case PD:
			output->ddr = &DDRD;
     28c:	8a e2       	ldi	r24, 0x2A	; 42
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	99 83       	std	Y+1, r25	; 0x01
     292:	88 83       	st	Y, r24
			output->pin = &PIND;
     294:	89 e2       	ldi	r24, 0x29	; 41
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	9b 83       	std	Y+3, r25	; 0x03
     29a:	8a 83       	std	Y+2, r24	; 0x02
			output->port = &PORTD;
     29c:	8b e2       	ldi	r24, 0x2B	; 43
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	9d 83       	std	Y+5, r25	; 0x05
     2a2:	8c 83       	std	Y+4, r24	; 0x04
			break;
     2a4:	26 c0       	rjmp	.+76     	; 0x2f2 <output_init+0x100>
		case PE:
			output->ddr = &DDRE;
     2a6:	8d e2       	ldi	r24, 0x2D	; 45
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	99 83       	std	Y+1, r25	; 0x01
     2ac:	88 83       	st	Y, r24
			output->pin = &PINE;
     2ae:	8c e2       	ldi	r24, 0x2C	; 44
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	9b 83       	std	Y+3, r25	; 0x03
     2b4:	8a 83       	std	Y+2, r24	; 0x02
			output->port = &PORTE;
     2b6:	8e e2       	ldi	r24, 0x2E	; 46
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	9d 83       	std	Y+5, r25	; 0x05
     2bc:	8c 83       	std	Y+4, r24	; 0x04
			break;
     2be:	19 c0       	rjmp	.+50     	; 0x2f2 <output_init+0x100>
		case PF:
			output->ddr = &DDRF;
     2c0:	80 e3       	ldi	r24, 0x30	; 48
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	99 83       	std	Y+1, r25	; 0x01
     2c6:	88 83       	st	Y, r24
			output->pin = &PINF;
     2c8:	8f e2       	ldi	r24, 0x2F	; 47
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	9b 83       	std	Y+3, r25	; 0x03
     2ce:	8a 83       	std	Y+2, r24	; 0x02
			output->port = &PORTF;
     2d0:	81 e3       	ldi	r24, 0x31	; 49
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	9d 83       	std	Y+5, r25	; 0x05
     2d6:	8c 83       	std	Y+4, r24	; 0x04
			break;
     2d8:	0c c0       	rjmp	.+24     	; 0x2f2 <output_init+0x100>
		case PG:
			output->ddr = &DDRG;
     2da:	83 e3       	ldi	r24, 0x33	; 51
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	99 83       	std	Y+1, r25	; 0x01
     2e0:	88 83       	st	Y, r24
			output->pin = &PING;
     2e2:	82 e3       	ldi	r24, 0x32	; 50
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	9b 83       	std	Y+3, r25	; 0x03
     2e8:	8a 83       	std	Y+2, r24	; 0x02
			output->port = &PORTG;
     2ea:	84 e3       	ldi	r24, 0x34	; 52
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9d 83       	std	Y+5, r25	; 0x05
     2f0:	8c 83       	std	Y+4, r24	; 0x04
			break;
		default:
			return 0;
	}
	
	configure_output(output, init_state, default_state);
     2f2:	40 2f       	mov	r20, r16
     2f4:	6d 2d       	mov	r22, r13
     2f6:	ce 01       	movw	r24, r28
     2f8:	67 df       	rcall	.-306    	; 0x1c8 <configure_output>
	
	return output;
     2fa:	8c 2f       	mov	r24, r28
     2fc:	9d 2f       	mov	r25, r29
     2fe:	08 c0       	rjmp	.+16     	; 0x310 <output_init+0x11e>
	// Reserving memory.
	io_descriptor_t output = malloc(sizeof(io_descriptor_st));
	
	// Checking that memory is reserved.
	if (0 == output) {
		return 0;
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	05 c0       	rjmp	.+10     	; 0x310 <output_init+0x11e>
	}
	
	// Input validation.
	if (!(bit >= 0 && bit <= 7)) {
		return 0;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 c0       	rjmp	.+4      	; 0x310 <output_init+0x11e>
			output->ddr = &DDRG;
			output->pin = &PING;
			output->port = &PORTG;
			break;
		default:
			return 0;
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	configure_output(output, init_state, default_state);
	
	return output;
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	08 95       	ret

00000320 <configure_input>:
	}
	
	free(self);
	
	return OK;
}
     320:	fc 01       	movw	r30, r24
     322:	a0 81       	ld	r26, Z
     324:	b1 81       	ldd	r27, Z+1	; 0x01
     326:	9c 91       	ld	r25, X
     328:	21 e0       	ldi	r18, 0x01	; 1
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	07 80       	ldd	r0, Z+7	; 0x07
     32e:	02 c0       	rjmp	.+4      	; 0x334 <configure_input+0x14>
     330:	22 0f       	add	r18, r18
     332:	33 1f       	adc	r19, r19
     334:	0a 94       	dec	r0
     336:	e2 f7       	brpl	.-8      	; 0x330 <configure_input+0x10>
     338:	20 95       	com	r18
     33a:	29 23       	and	r18, r25
     33c:	2c 93       	st	X, r18
     33e:	61 30       	cpi	r22, 0x01	; 1
     340:	69 f4       	brne	.+26     	; 0x35c <configure_input+0x3c>
     342:	a4 81       	ldd	r26, Z+4	; 0x04
     344:	b5 81       	ldd	r27, Z+5	; 0x05
     346:	2c 91       	ld	r18, X
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	07 80       	ldd	r0, Z+7	; 0x07
     34e:	02 c0       	rjmp	.+4      	; 0x354 <configure_input+0x34>
     350:	88 0f       	add	r24, r24
     352:	99 1f       	adc	r25, r25
     354:	0a 94       	dec	r0
     356:	e2 f7       	brpl	.-8      	; 0x350 <configure_input+0x30>
     358:	82 2b       	or	r24, r18
     35a:	8c 93       	st	X, r24
     35c:	08 95       	ret

0000035e <set_trigger>:
     35e:	e9 e6       	ldi	r30, 0x69	; 105
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	90 81       	ld	r25, Z
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	d9 01       	movw	r26, r18
     36a:	02 c0       	rjmp	.+4      	; 0x370 <set_trigger+0x12>
     36c:	aa 0f       	add	r26, r26
     36e:	bb 1f       	adc	r27, r27
     370:	8a 95       	dec	r24
     372:	e2 f7       	brpl	.-8      	; 0x36c <set_trigger+0xe>
     374:	a0 95       	com	r26
     376:	9a 23       	and	r25, r26
     378:	90 83       	st	Z, r25
     37a:	50 81       	ld	r21, Z
     37c:	c9 01       	movw	r24, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <set_trigger+0x26>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	6a 95       	dec	r22
     386:	e2 f7       	brpl	.-8      	; 0x380 <set_trigger+0x22>
     388:	85 2b       	or	r24, r21
     38a:	80 83       	st	Z, r24
     38c:	8d b3       	in	r24, 0x1d	; 29
     38e:	02 c0       	rjmp	.+4      	; 0x394 <set_trigger+0x36>
     390:	22 0f       	add	r18, r18
     392:	33 1f       	adc	r19, r19
     394:	4a 95       	dec	r20
     396:	e2 f7       	brpl	.-8      	; 0x390 <set_trigger+0x32>
     398:	28 2b       	or	r18, r24
     39a:	2d bb       	out	0x1d, r18	; 29
     39c:	08 95       	ret

0000039e <input_init>:
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	e8 2e       	mov	r14, r24
     3b0:	f6 2e       	mov	r15, r22
     3b2:	d4 2e       	mov	r13, r20
     3b4:	c2 2e       	mov	r12, r18
     3b6:	88 e0       	ldi	r24, 0x08	; 8
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <malloc>
     3be:	ec 01       	movw	r28, r24
     3c0:	89 2b       	or	r24, r25
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <input_init+0x28>
     3c4:	92 c0       	rjmp	.+292    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     3c6:	87 e0       	ldi	r24, 0x07	; 7
     3c8:	8f 15       	cp	r24, r15
     3ca:	08 f4       	brcc	.+2      	; 0x3ce <input_init+0x30>
     3cc:	91 c0       	rjmp	.+290    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     3ce:	ff 82       	std	Y+7, r15	; 0x07
     3d0:	de 82       	std	Y+6, r13	; 0x06
     3d2:	8e 2d       	mov	r24, r14
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	87 30       	cpi	r24, 0x07	; 7
     3d8:	91 05       	cpc	r25, r1
     3da:	08 f0       	brcs	.+2      	; 0x3de <input_init+0x40>
     3dc:	8c c0       	rjmp	.+280    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     3de:	fc 01       	movw	r30, r24
     3e0:	88 27       	eor	r24, r24
     3e2:	e7 58       	subi	r30, 0x87	; 135
     3e4:	ff 4f       	sbci	r31, 0xFF	; 255
     3e6:	8f 4f       	sbci	r24, 0xFF	; 255
     3e8:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__tablejump2__>
     3ec:	81 e2       	ldi	r24, 0x21	; 33
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	99 83       	std	Y+1, r25	; 0x01
     3f2:	88 83       	st	Y, r24
     3f4:	80 e2       	ldi	r24, 0x20	; 32
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	9b 83       	std	Y+3, r25	; 0x03
     3fa:	8a 83       	std	Y+2, r24	; 0x02
     3fc:	82 e2       	ldi	r24, 0x22	; 34
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	9d 83       	std	Y+5, r25	; 0x05
     402:	8c 83       	std	Y+4, r24	; 0x04
     404:	4d c0       	rjmp	.+154    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     406:	84 e2       	ldi	r24, 0x24	; 36
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	99 83       	std	Y+1, r25	; 0x01
     40c:	88 83       	st	Y, r24
     40e:	83 e2       	ldi	r24, 0x23	; 35
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	9b 83       	std	Y+3, r25	; 0x03
     414:	8a 83       	std	Y+2, r24	; 0x02
     416:	85 e2       	ldi	r24, 0x25	; 37
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	9d 83       	std	Y+5, r25	; 0x05
     41c:	8c 83       	std	Y+4, r24	; 0x04
     41e:	40 c0       	rjmp	.+128    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     420:	87 e2       	ldi	r24, 0x27	; 39
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	99 83       	std	Y+1, r25	; 0x01
     426:	88 83       	st	Y, r24
     428:	86 e2       	ldi	r24, 0x26	; 38
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	9b 83       	std	Y+3, r25	; 0x03
     42e:	8a 83       	std	Y+2, r24	; 0x02
     430:	88 e2       	ldi	r24, 0x28	; 40
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	9d 83       	std	Y+5, r25	; 0x05
     436:	8c 83       	std	Y+4, r24	; 0x04
     438:	33 c0       	rjmp	.+102    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     43a:	8a e2       	ldi	r24, 0x2A	; 42
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	99 83       	std	Y+1, r25	; 0x01
     440:	88 83       	st	Y, r24
     442:	89 e2       	ldi	r24, 0x29	; 41
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9b 83       	std	Y+3, r25	; 0x03
     448:	8a 83       	std	Y+2, r24	; 0x02
     44a:	8b e2       	ldi	r24, 0x2B	; 43
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	9d 83       	std	Y+5, r25	; 0x05
     450:	8c 83       	std	Y+4, r24	; 0x04
     452:	26 c0       	rjmp	.+76     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     454:	8d e2       	ldi	r24, 0x2D	; 45
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	99 83       	std	Y+1, r25	; 0x01
     45a:	88 83       	st	Y, r24
     45c:	8c e2       	ldi	r24, 0x2C	; 44
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	9b 83       	std	Y+3, r25	; 0x03
     462:	8a 83       	std	Y+2, r24	; 0x02
     464:	8e e2       	ldi	r24, 0x2E	; 46
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	9d 83       	std	Y+5, r25	; 0x05
     46a:	8c 83       	std	Y+4, r24	; 0x04
     46c:	19 c0       	rjmp	.+50     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     46e:	80 e3       	ldi	r24, 0x30	; 48
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	99 83       	std	Y+1, r25	; 0x01
     474:	88 83       	st	Y, r24
     476:	8f e2       	ldi	r24, 0x2F	; 47
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	9b 83       	std	Y+3, r25	; 0x03
     47c:	8a 83       	std	Y+2, r24	; 0x02
     47e:	81 e3       	ldi	r24, 0x31	; 49
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	9d 83       	std	Y+5, r25	; 0x05
     484:	8c 83       	std	Y+4, r24	; 0x04
     486:	0c c0       	rjmp	.+24     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     488:	83 e3       	ldi	r24, 0x33	; 51
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	99 83       	std	Y+1, r25	; 0x01
     48e:	88 83       	st	Y, r24
     490:	82 e3       	ldi	r24, 0x32	; 50
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	9b 83       	std	Y+3, r25	; 0x03
     496:	8a 83       	std	Y+2, r24	; 0x02
     498:	84 e3       	ldi	r24, 0x34	; 52
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9d 83       	std	Y+5, r25	; 0x05
     49e:	8c 83       	std	Y+4, r24	; 0x04
     4a0:	6c 2d       	mov	r22, r12
     4a2:	ce 01       	movw	r24, r28
     4a4:	3d df       	rcall	.-390    	; 0x320 <configure_input>
     4a6:	01 15       	cp	r16, r1
     4a8:	11 05       	cpc	r17, r1
     4aa:	41 f1       	breq	.+80     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	e8 12       	cpse	r14, r24
     4b0:	28 c0       	rjmp	.+80     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	f8 12       	cpse	r15, r24
     4b6:	0b c0       	rjmp	.+22     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4b8:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <cb2+0x1>
     4bc:	00 93 38 02 	sts	0x0238, r16	; 0x800238 <cb2>
     4c0:	42 e0       	ldi	r20, 0x02	; 2
     4c2:	65 e0       	ldi	r22, 0x05	; 5
     4c4:	84 e0       	ldi	r24, 0x04	; 4
     4c6:	4b df       	rcall	.-362    	; 0x35e <set_trigger>
     4c8:	8c 2f       	mov	r24, r28
     4ca:	9d 2f       	mov	r25, r29
     4cc:	1f c0       	rjmp	.+62     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	f8 12       	cpse	r15, r24
     4d2:	1a c0       	rjmp	.+52     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     4d4:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <__data_end+0x1>
     4d8:	00 93 36 02 	sts	0x0236, r16	; 0x800236 <__data_end>
     4dc:	43 e0       	ldi	r20, 0x03	; 3
     4de:	67 e0       	ldi	r22, 0x07	; 7
     4e0:	86 e0       	ldi	r24, 0x06	; 6
     4e2:	3d df       	rcall	.-390    	; 0x35e <set_trigger>
     4e4:	8c 2f       	mov	r24, r28
     4e6:	9d 2f       	mov	r25, r29
     4e8:	11 c0       	rjmp	.+34     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e c0       	rjmp	.+28     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0b c0       	rjmp	.+22     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	08 c0       	rjmp	.+16     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4fc:	8c 2f       	mov	r24, r28
     4fe:	9d 2f       	mov	r25, r29
     500:	05 c0       	rjmp	.+10     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     502:	8c 2f       	mov	r24, r28
     504:	9d 2f       	mov	r25, r29
     506:	02 c0       	rjmp	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     508:	8c 2f       	mov	r24, r28
     50a:	9d 2f       	mov	r25, r29
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	08 95       	ret

0000051e <input_activated>:
     51e:	fc 01       	movw	r30, r24
     520:	86 81       	ldd	r24, Z+6	; 0x06
     522:	81 11       	cpse	r24, r1
     524:	0f c0       	rjmp	.+30     	; 0x544 <input_activated+0x26>
     526:	a2 81       	ldd	r26, Z+2	; 0x02
     528:	b3 81       	ldd	r27, Z+3	; 0x03
     52a:	2c 91       	ld	r18, X
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	c9 01       	movw	r24, r18
     530:	07 80       	ldd	r0, Z+7	; 0x07
     532:	02 c0       	rjmp	.+4      	; 0x538 <input_activated+0x1a>
     534:	95 95       	asr	r25
     536:	87 95       	ror	r24
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <input_activated+0x16>
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	82 27       	eor	r24, r18
     540:	81 70       	andi	r24, 0x01	; 1
     542:	08 95       	ret
     544:	a2 81       	ldd	r26, Z+2	; 0x02
     546:	b3 81       	ldd	r27, Z+3	; 0x03
     548:	2c 91       	ld	r18, X
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	c9 01       	movw	r24, r18
     54e:	07 80       	ldd	r0, Z+7	; 0x07
     550:	02 c0       	rjmp	.+4      	; 0x556 <input_activated+0x38>
     552:	95 95       	asr	r25
     554:	87 95       	ror	r24
     556:	0a 94       	dec	r0
     558:	e2 f7       	brpl	.-8      	; 0x552 <input_activated+0x34>
     55a:	81 70       	andi	r24, 0x01	; 1
     55c:	08 95       	ret

0000055e <__vector_3>:

ISR(INT2_vect)
{
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	0b b6       	in	r0, 0x3b	; 59
     56a:	0f 92       	push	r0
     56c:	2f 93       	push	r18
     56e:	3f 93       	push	r19
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
	if (0 != cb2)
     584:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <cb2>
     588:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <cb2+0x1>
     58c:	30 97       	sbiw	r30, 0x00	; 0
     58e:	09 f0       	breq	.+2      	; 0x592 <__vector_3+0x34>
	cb2();
     590:	19 95       	eicall
}
     592:	ff 91       	pop	r31
     594:	ef 91       	pop	r30
     596:	bf 91       	pop	r27
     598:	af 91       	pop	r26
     59a:	9f 91       	pop	r25
     59c:	8f 91       	pop	r24
     59e:	7f 91       	pop	r23
     5a0:	6f 91       	pop	r22
     5a2:	5f 91       	pop	r21
     5a4:	4f 91       	pop	r20
     5a6:	3f 91       	pop	r19
     5a8:	2f 91       	pop	r18
     5aa:	0f 90       	pop	r0
     5ac:	0b be       	out	0x3b, r0	; 59
     5ae:	0f 90       	pop	r0
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	0f 90       	pop	r0
     5b4:	1f 90       	pop	r1
     5b6:	18 95       	reti

000005b8 <__vector_4>:

ISR(INT3_vect)
{
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	0b b6       	in	r0, 0x3b	; 59
     5c4:	0f 92       	push	r0
     5c6:	2f 93       	push	r18
     5c8:	3f 93       	push	r19
     5ca:	4f 93       	push	r20
     5cc:	5f 93       	push	r21
     5ce:	6f 93       	push	r22
     5d0:	7f 93       	push	r23
     5d2:	8f 93       	push	r24
     5d4:	9f 93       	push	r25
     5d6:	af 93       	push	r26
     5d8:	bf 93       	push	r27
     5da:	ef 93       	push	r30
     5dc:	ff 93       	push	r31
	if (0 != cb3)
     5de:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <__data_end>
     5e2:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <__data_end+0x1>
     5e6:	30 97       	sbiw	r30, 0x00	; 0
     5e8:	09 f0       	breq	.+2      	; 0x5ec <__vector_4+0x34>
	cb3();
     5ea:	19 95       	eicall
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	bf 91       	pop	r27
     5f2:	af 91       	pop	r26
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	7f 91       	pop	r23
     5fa:	6f 91       	pop	r22
     5fc:	5f 91       	pop	r21
     5fe:	4f 91       	pop	r20
     600:	3f 91       	pop	r19
     602:	2f 91       	pop	r18
     604:	0f 90       	pop	r0
     606:	0b be       	out	0x3b, r0	; 59
     608:	0f 90       	pop	r0
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	0f 90       	pop	r0
     60e:	1f 90       	pop	r1
     610:	18 95       	reti

00000612 <key_init>:
#include "../include/key.h"

static io_descriptor_t keys[K_NO];

void key_init(io_definition_t io[])
{
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	6c 01       	movw	r12, r24
	for (uint8_t i = 0; i < K_NO; i++)
     622:	f1 2c       	mov	r15, r1
     624:	13 c0       	rjmp	.+38     	; 0x64c <key_init+0x3a>
	{
		keys[i] = input_init(io[i].port, io[i].pin, K_ACTIVE_STATE, K_PULL_UP_STATE, NULL);
     626:	cf 2d       	mov	r28, r15
     628:	d0 e0       	ldi	r29, 0x00	; 0
     62a:	cc 0f       	add	r28, r28
     62c:	dd 1f       	adc	r29, r29
     62e:	f6 01       	movw	r30, r12
     630:	ec 0f       	add	r30, r28
     632:	fd 1f       	adc	r31, r29
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	10 e0       	ldi	r17, 0x00	; 0
     638:	21 e0       	ldi	r18, 0x01	; 1
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	61 81       	ldd	r22, Z+1	; 0x01
     63e:	80 81       	ld	r24, Z
     640:	ae de       	rcall	.-676    	; 0x39e <input_init>
     642:	c6 5c       	subi	r28, 0xC6	; 198
     644:	dd 4f       	sbci	r29, 0xFD	; 253
     646:	99 83       	std	Y+1, r25	; 0x01
     648:	88 83       	st	Y, r24

static io_descriptor_t keys[K_NO];

void key_init(io_definition_t io[])
{
	for (uint8_t i = 0; i < K_NO; i++)
     64a:	f3 94       	inc	r15
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	8f 15       	cp	r24, r15
     650:	50 f7       	brcc	.-44     	; 0x626 <key_init+0x14>
	{
		keys[i] = input_init(io[i].port, io[i].pin, K_ACTIVE_STATE, K_PULL_UP_STATE, NULL);
	}
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	df 90       	pop	r13
     65e:	cf 90       	pop	r12
     660:	08 95       	ret

00000662 <key_get>:

uint8_t key_get(uint8_t key_no)
{
	if((key_no >= 1) && (key_no <= 8))
     662:	81 50       	subi	r24, 0x01	; 1
     664:	88 30       	cpi	r24, 0x08	; 8
     666:	50 f4       	brcc	.+20     	; 0x67c <key_get+0x1a>
	{
		key_no--;	// Convert key number to index
		
		return input_activated(keys[key_no]);
     668:	e8 2f       	mov	r30, r24
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	e6 5c       	subi	r30, 0xC6	; 198
     672:	fd 4f       	sbci	r31, 0xFD	; 253
     674:	80 81       	ld	r24, Z
     676:	91 81       	ldd	r25, Z+1	; 0x01
     678:	52 cf       	rjmp	.-348    	; 0x51e <input_activated>
     67a:	08 95       	ret
	}
	return 0;
     67c:	80 e0       	ldi	r24, 0x00	; 0
}
     67e:	08 95       	ret

00000680 <key_scan>:

uint8_t key_scan()
{
     680:	cf 93       	push	r28
	for(uint8_t i = 1; i <= K_NO; i++)
     682:	c1 e0       	ldi	r28, 0x01	; 1
     684:	05 c0       	rjmp	.+10     	; 0x690 <key_scan+0x10>
	{
		if(key_get(i))
     686:	8c 2f       	mov	r24, r28
     688:	ec df       	rcall	.-40     	; 0x662 <key_get>
     68a:	81 11       	cpse	r24, r1
     68c:	05 c0       	rjmp	.+10     	; 0x698 <key_scan+0x18>
	return 0;
}

uint8_t key_scan()
{
	for(uint8_t i = 1; i <= K_NO; i++)
     68e:	cf 5f       	subi	r28, 0xFF	; 255
     690:	c4 30       	cpi	r28, 0x04	; 4
     692:	c8 f3       	brcs	.-14     	; 0x686 <key_scan+0x6>
		if(key_get(i))
		{
			return i;
		}
	}
	return 0;
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	01 c0       	rjmp	.+2      	; 0x69a <key_scan+0x1a>
{
	for(uint8_t i = 1; i <= K_NO; i++)
	{
		if(key_get(i))
		{
			return i;
     698:	8c 2f       	mov	r24, r28
		}
	}
	return 0;
}
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <led_init>:
#include "../../digital_output/include/digital_output.h"

static io_descriptor_t leds[L_NO];

void led_init(io_definition_t io[])
{	
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	7c 01       	movw	r14, r24
	for (uint8_t i = 0; i < L_NO; i++)
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	12 c0       	rjmp	.+36     	; 0x6d4 <led_init+0x36>
	{
		leds[i] = output_init(io[i].port, io[i].pin, L_ACTIVE_STATE, 1, L_DEFAULT_STATE);
     6b0:	c1 2f       	mov	r28, r17
     6b2:	d0 e0       	ldi	r29, 0x00	; 0
     6b4:	cc 0f       	add	r28, r28
     6b6:	dd 1f       	adc	r29, r29
     6b8:	f7 01       	movw	r30, r14
     6ba:	ec 0f       	add	r30, r28
     6bc:	fd 1f       	adc	r31, r29
     6be:	00 e0       	ldi	r16, 0x00	; 0
     6c0:	21 e0       	ldi	r18, 0x01	; 1
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	61 81       	ldd	r22, Z+1	; 0x01
     6c6:	80 81       	ld	r24, Z
     6c8:	94 dd       	rcall	.-1240   	; 0x1f2 <output_init>
     6ca:	c0 5c       	subi	r28, 0xC0	; 192
     6cc:	dd 4f       	sbci	r29, 0xFD	; 253
     6ce:	99 83       	std	Y+1, r25	; 0x01
     6d0:	88 83       	st	Y, r24

static io_descriptor_t leds[L_NO];

void led_init(io_definition_t io[])
{	
	for (uint8_t i = 0; i < L_NO; i++)
     6d2:	1f 5f       	subi	r17, 0xFF	; 255
     6d4:	17 30       	cpi	r17, 0x07	; 7
     6d6:	60 f3       	brcs	.-40     	; 0x6b0 <led_init+0x12>
	{
		leds[i] = output_init(io[i].port, io[i].pin, L_ACTIVE_STATE, 1, L_DEFAULT_STATE);
	}
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <pump_init>:
#include "../include/pump.h"

static io_descriptor_t pump;

void pump_init()
{
     6e6:	0f 93       	push	r16
	pump = output_init(P_PORT, P_PIN, P_ACTIVE_STATE, 1, P_DEFAULT_STATE);
     6e8:	00 e0       	ldi	r16, 0x00	; 0
     6ea:	21 e0       	ldi	r18, 0x01	; 1
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	7f dd       	rcall	.-1282   	; 0x1f2 <output_init>
     6f4:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pump+0x1>
     6f8:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pump>
}
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret

00000700 <pump_start>:

return_code_t pump_start()
{
	return output_set_state(pump, ACTIVE);
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <pump>
     706:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <pump+0x1>
     70a:	1b cd       	rjmp	.-1482   	; 0x142 <output_set_state>
}
     70c:	08 95       	ret

0000070e <pump_stop>:

return_code_t pump_stop()
{
	return output_set_state(pump, INACTIVE);
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <pump>
     714:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <pump+0x1>
     718:	14 cd       	rjmp	.-1496   	; 0x142 <output_set_state>
     71a:	08 95       	ret

0000071c <set_refresh_rate>:
 

static void set_refresh_rate() 
{
	// Set timer toggle on compare match
	TCCR4A |= _BV(COM4A0);
     71c:	e0 ea       	ldi	r30, 0xA0	; 160
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	80 64       	ori	r24, 0x40	; 64
     724:	80 83       	st	Z, r24
	
	// Set prescaler 8
	TCCR4B |= _BV(CS41);
     726:	e1 ea       	ldi	r30, 0xA1	; 161
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	82 60       	ori	r24, 0x02	; 2
     72e:	80 83       	st	Z, r24
	
	// Set to Clear timer on compare match (CTC mode)
	TCCR4B |= _BV(WGM42);
     730:	80 81       	ld	r24, Z
     732:	88 60       	ori	r24, 0x08	; 8
     734:	80 83       	st	Z, r24
	
	// Enable Timer interrupt
	TIMSK4 |= _BV(OCIE4A);
     736:	e2 e7       	ldi	r30, 0x72	; 114
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 83       	st	Z, r24
	
	// Set timer frequency 60Hz/digit (16000000 / (2*60*4*8))-1 = 4165.6
	OCR4A = 4166;
     740:	86 e4       	ldi	r24, 0x46	; 70
     742:	90 e1       	ldi	r25, 0x10	; 16
     744:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     748:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     74c:	08 95       	ret

0000074e <configure_spi>:
//}

static void configure_spi()
{
	// Setup CPOL functionality to sample at rising edge.
	SPCR &= ~ (_BV(CPOL) | _BV(CPHA));
     74e:	8c b5       	in	r24, 0x2c	; 44
     750:	83 7f       	andi	r24, 0xF3	; 243
     752:	8c bd       	out	0x2c, r24	; 44
	
	// DORD 0 OR 1: start from least significant bit or opposite.
	SPCR |=_BV(DORD);
     754:	8c b5       	in	r24, 0x2c	; 44
     756:	80 62       	ori	r24, 0x20	; 32
     758:	8c bd       	out	0x2c, r24	; 44
	
	// Set Master.
	SPCR |= _BV(MSTR);
     75a:	8c b5       	in	r24, 0x2c	; 44
     75c:	80 61       	ori	r24, 0x10	; 16
     75e:	8c bd       	out	0x2c, r24	; 44
	
	// Set SCK frequency to Fosc/128.
	SPCR |= _BV(SPR1) | _BV(SPR0);
     760:	8c b5       	in	r24, 0x2c	; 44
     762:	83 60       	ori	r24, 0x03	; 3
     764:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~_BV(SPI2X);
     766:	8d b5       	in	r24, 0x2d	; 45
     768:	8e 7f       	andi	r24, 0xFE	; 254
     76a:	8d bd       	out	0x2d, r24	; 45
	
	// Enable SPI.
	SPCR |= _BV(SPE);
     76c:	8c b5       	in	r24, 0x2c	; 44
     76e:	80 64       	ori	r24, 0x40	; 64
     770:	8c bd       	out	0x2c, r24	; 44
     772:	08 95       	ret

00000774 <get_display_code>:
// Returns display code equivalent to digit value.
// If a zero is found, it will determine if it should return code equivalent to 0 or turn off the segment based on values in more significant segments.
static uint8_t get_display_code(uint8_t segment)
{
	// Least significant segment is allowed to be zero.
	if (segment == D_NO_SEGMENTS - 1)
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	51 f4       	brne	.+20     	; 0x78c <get_display_code+0x18>
		return display_code[digits[segment]];
     778:	e8 2f       	mov	r30, r24
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	ec 5a       	subi	r30, 0xAC	; 172
     77e:	fd 4f       	sbci	r31, 0xFD	; 253
     780:	e0 81       	ld	r30, Z
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	e4 5d       	subi	r30, 0xD4	; 212
     786:	fd 4f       	sbci	r31, 0xFD	; 253
     788:	80 81       	ld	r24, Z
     78a:	08 95       	ret
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
     78c:	e8 2f       	mov	r30, r24
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	ec 5a       	subi	r30, 0xAC	; 172
     792:	fd 4f       	sbci	r31, 0xFD	; 253
     794:	e0 81       	ld	r30, Z
     796:	e1 11       	cpse	r30, r1
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <get_display_code+0x2e>
     79a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leading_zeros>
     79e:	81 11       	cpse	r24, r1
     7a0:	0a c0       	rjmp	.+20     	; 0x7b6 <get_display_code+0x42>
		return BLANK_DIGIT;
	
	// First time a non-zero value is found leading zeros will be false. 
	// This effectively returns less significant zeros to display code equivalent to zero instead of having them turned off.
	if (leading_zeros)
     7a2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leading_zeros>
     7a6:	81 11       	cpse	r24, r1
		leading_zeros = 0;
     7a8:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <leading_zeros>

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	e4 5d       	subi	r30, 0xD4	; 212
     7b0:	fd 4f       	sbci	r31, 0xFD	; 253
     7b2:	80 81       	ld	r24, Z
     7b4:	08 95       	ret
	if (segment == D_NO_SEGMENTS - 1)
		return display_code[digits[segment]];
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
		return BLANK_DIGIT;
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
	if (leading_zeros)
		leading_zeros = 0;

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
}
     7b8:	08 95       	ret

000007ba <set_display_code>:

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
	leading_zeros = 1;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leading_zeros>
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++) 
     7c6:	c0 e0       	ldi	r28, 0x00	; 0
     7c8:	09 c0       	rjmp	.+18     	; 0x7dc <set_display_code+0x22>
		display[i] = get_display_code(i);
     7ca:	0c 2f       	mov	r16, r28
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	8c 2f       	mov	r24, r28
     7d0:	d1 df       	rcall	.-94     	; 0x774 <get_display_code>
     7d2:	f8 01       	movw	r30, r16
     7d4:	e0 5b       	subi	r30, 0xB0	; 176
     7d6:	fd 4f       	sbci	r31, 0xFD	; 253
     7d8:	80 83       	st	Z, r24
}

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
	leading_zeros = 1;
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++) 
     7da:	cf 5f       	subi	r28, 0xFF	; 255
     7dc:	c4 30       	cpi	r28, 0x04	; 4
     7de:	a8 f3       	brcs	.-22     	; 0x7ca <set_display_code+0x10>
		display[i] = get_display_code(i);
}
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	08 95       	ret

000007e8 <split_digits>:

// Splits number into separate digits.
static void split_digits(uint16_t value, uint8_t digit) 
{	
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	fc 01       	movw	r30, r24
	// Base case - Done.
	if (digit == 0)
     7ee:	61 11       	cpse	r22, r1
     7f0:	1f c0       	rjmp	.+62     	; 0x830 <split_digits+0x48>
		digits[digit] = value % 10;
     7f2:	46 2f       	mov	r20, r22
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	9c 01       	movw	r18, r24
     7f8:	ad ec       	ldi	r26, 0xCD	; 205
     7fa:	bc ec       	ldi	r27, 0xCC	; 204
     7fc:	46 d6       	rcall	.+3212   	; 0x148a <__umulhisi3>
     7fe:	96 95       	lsr	r25
     800:	87 95       	ror	r24
     802:	96 95       	lsr	r25
     804:	87 95       	ror	r24
     806:	96 95       	lsr	r25
     808:	87 95       	ror	r24
     80a:	9c 01       	movw	r18, r24
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	82 0f       	add	r24, r18
     81e:	93 1f       	adc	r25, r19
     820:	9f 01       	movw	r18, r30
     822:	28 1b       	sub	r18, r24
     824:	39 0b       	sbc	r19, r25
     826:	fa 01       	movw	r30, r20
     828:	ec 5a       	subi	r30, 0xAC	; 172
     82a:	fd 4f       	sbci	r31, 0xFD	; 253
     82c:	20 83       	st	Z, r18
     82e:	29 c0       	rjmp	.+82     	; 0x882 <split_digits+0x9a>
     830:	46 2f       	mov	r20, r22
	else {
		digits[digit] = value % 10;
     832:	c6 2f       	mov	r28, r22
     834:	d0 e0       	ldi	r29, 0x00	; 0
     836:	9c 01       	movw	r18, r24
     838:	ad ec       	ldi	r26, 0xCD	; 205
     83a:	bc ec       	ldi	r27, 0xCC	; 204
     83c:	26 d6       	rcall	.+3148   	; 0x148a <__umulhisi3>
     83e:	96 95       	lsr	r25
     840:	87 95       	ror	r24
     842:	96 95       	lsr	r25
     844:	87 95       	ror	r24
     846:	96 95       	lsr	r25
     848:	87 95       	ror	r24
     84a:	9c 01       	movw	r18, r24
     84c:	22 0f       	add	r18, r18
     84e:	33 1f       	adc	r19, r19
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	82 0f       	add	r24, r18
     85e:	93 1f       	adc	r25, r19
     860:	9f 01       	movw	r18, r30
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	cc 5a       	subi	r28, 0xAC	; 172
     868:	dd 4f       	sbci	r29, 0xFD	; 253
     86a:	28 83       	st	Y, r18
		value = value / 10;
     86c:	9f 01       	movw	r18, r30
     86e:	0d d6       	rcall	.+3098   	; 0x148a <__umulhisi3>
     870:	6f ef       	ldi	r22, 0xFF	; 255
		
		// Recurse until done.
		digit--;
     872:	64 0f       	add	r22, r20
     874:	96 95       	lsr	r25
		split_digits(value, digit);
     876:	87 95       	ror	r24
     878:	96 95       	lsr	r25
     87a:	87 95       	ror	r24
     87c:	96 95       	lsr	r25
     87e:	87 95       	ror	r24
     880:	b3 df       	rcall	.-154    	; 0x7e8 <split_digits>
     882:	df 91       	pop	r29
	}
}
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <turn_off_segments>:
     888:	20 e0       	ldi	r18, 0x00	; 0
	set_display_code();
}

static void turn_off_segments()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     88a:	19 c0       	rjmp	.+50     	; 0x8be <turn_off_segments+0x36>
	{
		*d_segments[i]->port |= _BV(d_segments[i]->bit);
     88c:	e2 2f       	mov	r30, r18
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	eb 58       	subi	r30, 0x8B	; 139
     896:	fd 4f       	sbci	r31, 0xFD	; 253
     898:	a0 81       	ld	r26, Z
     89a:	b1 81       	ldd	r27, Z+1	; 0x01
     89c:	14 96       	adiw	r26, 0x04	; 4
     89e:	ed 91       	ld	r30, X+
     8a0:	fc 91       	ld	r31, X
     8a2:	15 97       	sbiw	r26, 0x05	; 5
     8a4:	30 81       	ld	r19, Z
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	17 96       	adiw	r26, 0x07	; 7
     8ac:	0c 90       	ld	r0, X
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <turn_off_segments+0x2c>
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	0a 94       	dec	r0
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <turn_off_segments+0x28>
     8b8:	83 2b       	or	r24, r19
     8ba:	80 83       	st	Z, r24
	set_display_code();
}

static void turn_off_segments()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	24 30       	cpi	r18, 0x04	; 4
     8c0:	28 f3       	brcs	.-54     	; 0x88c <turn_off_segments+0x4>
	}
		//D_D1_PORT |= _BV(D_D1_PIN);
		//D_D2_PORT |= _BV(D_D2_PIN);
		//D_D3_PORT |= _BV(D_D3_PIN);
		//D_D4_PORT |= _BV(D_D4_PIN);
}
     8c2:	08 95       	ret

000008c4 <toggle_pin>:

static void toggle_pin(io_descriptor_t pin)
{
     8c4:	fc 01       	movw	r30, r24
	*pin->port |= _BV(pin->bit);
     8c6:	a4 81       	ldd	r26, Z+4	; 0x04
     8c8:	b5 81       	ldd	r27, Z+5	; 0x05
     8ca:	4c 91       	ld	r20, X
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	c9 01       	movw	r24, r18
     8d2:	07 80       	ldd	r0, Z+7	; 0x07
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <toggle_pin+0x16>
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	0a 94       	dec	r0
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <toggle_pin+0x12>
     8de:	84 2b       	or	r24, r20
     8e0:	8c 93       	st	X, r24
	*pin->port = ~_BV(pin->bit);
     8e2:	a4 81       	ldd	r26, Z+4	; 0x04
     8e4:	b5 81       	ldd	r27, Z+5	; 0x05
     8e6:	07 80       	ldd	r0, Z+7	; 0x07
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <toggle_pin+0x2a>
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	0a 94       	dec	r0
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <toggle_pin+0x26>
     8f2:	20 95       	com	r18
     8f4:	2c 93       	st	X, r18
     8f6:	08 95       	ret

000008f8 <transfer_to_display>:

static void transfer_to_display()
{
	if (communication == SPI)
	// Load Shift register
	SPDR = display[current_segment];
     8f8:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <current_segment>
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	e0 5b       	subi	r30, 0xB0	; 176
     900:	fd 4f       	sbci	r31, 0xFD	; 253
     902:	80 81       	ld	r24, Z
     904:	8e bd       	out	0x2e, r24	; 46
     906:	08 95       	ret

00000908 <change_current_segment>:
	}
}

static void change_current_segment()
{
	current_segment = (current_segment + 1) % D_NO_SEGMENTS;
     908:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <current_segment>
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	83 70       	andi	r24, 0x03	; 3
     912:	90 78       	andi	r25, 0x80	; 128
     914:	99 23       	and	r25, r25
     916:	24 f4       	brge	.+8      	; 0x920 <change_current_segment+0x18>
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	8c 6f       	ori	r24, 0xFC	; 252
     91c:	9f 6f       	ori	r25, 0xFF	; 255
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <current_segment>
     924:	08 95       	ret

00000926 <display_init>:
}



void display_init(io_definition_t segment_pwr[], io_definition_t rck, io_definition_t sck, io_definition_t si) 
{
     926:	8f 92       	push	r8
     928:	9f 92       	push	r9
     92a:	af 92       	push	r10
     92c:	bf 92       	push	r11
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	7c 01       	movw	r14, r24
     940:	96 2e       	mov	r9, r22
     942:	87 2e       	mov	r8, r23
     944:	b4 2e       	mov	r11, r20
     946:	a5 2e       	mov	r10, r21
     948:	d2 2e       	mov	r13, r18
     94a:	c3 2e       	mov	r12, r19
	// Configure outputs.
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     94c:	10 e0       	ldi	r17, 0x00	; 0
     94e:	12 c0       	rjmp	.+36     	; 0x974 <display_init+0x4e>
	{
		d_segments[i] = output_init(segment_pwr[i].port, segment_pwr[i].pin, DEFAULT, 0, ACTIVE);
     950:	c1 2f       	mov	r28, r17
     952:	d0 e0       	ldi	r29, 0x00	; 0
     954:	cc 0f       	add	r28, r28
     956:	dd 1f       	adc	r29, r29
     958:	f7 01       	movw	r30, r14
     95a:	ec 0f       	add	r30, r28
     95c:	fd 1f       	adc	r31, r29
     95e:	01 e0       	ldi	r16, 0x01	; 1
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	42 e0       	ldi	r20, 0x02	; 2
     964:	61 81       	ldd	r22, Z+1	; 0x01
     966:	80 81       	ld	r24, Z
     968:	44 dc       	rcall	.-1912   	; 0x1f2 <output_init>
     96a:	cb 58       	subi	r28, 0x8B	; 139
     96c:	dd 4f       	sbci	r29, 0xFD	; 253
     96e:	99 83       	std	Y+1, r25	; 0x01
     970:	88 83       	st	Y, r24


void display_init(io_definition_t segment_pwr[], io_definition_t rck, io_definition_t sck, io_definition_t si) 
{
	// Configure outputs.
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     972:	1f 5f       	subi	r17, 0xFF	; 255
     974:	14 30       	cpi	r17, 0x04	; 4
     976:	60 f3       	brcs	.-40     	; 0x950 <display_init+0x2a>
	{
		d_segments[i] = output_init(segment_pwr[i].port, segment_pwr[i].pin, DEFAULT, 0, ACTIVE);
	}
	
	d_rck = output_init(rck.port, rck.pin, DEFAULT, 0, INACTIVE);
     978:	00 e0       	ldi	r16, 0x00	; 0
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	42 e0       	ldi	r20, 0x02	; 2
     97e:	68 2d       	mov	r22, r8
     980:	89 2d       	mov	r24, r9
     982:	37 dc       	rcall	.-1938   	; 0x1f2 <output_init>
     984:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <d_rck+0x1>
     988:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <d_rck>
	d_sck = output_init(sck.port, sck.pin, DEFAULT, 0, INACTIVE);
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	42 e0       	ldi	r20, 0x02	; 2
     990:	6a 2d       	mov	r22, r10
     992:	8b 2d       	mov	r24, r11
     994:	2e dc       	rcall	.-1956   	; 0x1f2 <output_init>
     996:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <d_sck+0x1>
     99a:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <d_sck>
	d_si = output_init(si.port, si.pin, DEFAULT, 0, INACTIVE);
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	42 e0       	ldi	r20, 0x02	; 2
     9a2:	6c 2d       	mov	r22, r12
     9a4:	8d 2d       	mov	r24, r13
     9a6:	25 dc       	rcall	.-1974   	; 0x1f2 <output_init>
     9a8:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <d_si+0x1>

	if (communication == SPI) {
		configure_spi();
     9ac:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <d_si>
	}
	
	// Initializes timer and interrupt
	set_refresh_rate();
     9b0:	ce de       	rcall	.-612    	; 0x74e <configure_spi>
     9b2:	b4 de       	rcall	.-664    	; 0x71c <set_refresh_rate>
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	bf 90       	pop	r11
     9c6:	af 90       	pop	r10
     9c8:	9f 90       	pop	r9
     9ca:	8f 90       	pop	r8
     9cc:	08 95       	ret

000009ce <display_print_uint_4>:

// Input from application
void display_print_uint_4(uint16_t value) 
{
	// Split digits from least significant value.
	split_digits(value, D_NO_SEGMENTS - 1);
     9ce:	63 e0       	ldi	r22, 0x03	; 3
     9d0:	0b df       	rcall	.-490    	; 0x7e8 <split_digits>
	set_display_code();
     9d2:	f3 ce       	rjmp	.-538    	; 0x7ba <set_display_code>
     9d4:	08 95       	ret

000009d6 <__vector_42>:
     9d6:	1f 92       	push	r1
{
	current_segment = (current_segment + 1) % D_NO_SEGMENTS;
}

ISR(TIMER4_COMPA_vect)
{		
     9d8:	0f 92       	push	r0
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	0f 92       	push	r0
     9de:	11 24       	eor	r1, r1
     9e0:	0b b6       	in	r0, 0x3b	; 59
     9e2:	0f 92       	push	r0
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	6f 93       	push	r22
     9ee:	7f 93       	push	r23
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	af 93       	push	r26
     9f6:	bf 93       	push	r27
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
	turn_off_segments();
     9fc:	45 df       	rcall	.-374    	; 0x888 <turn_off_segments>
	
	// Move into storage register.
	toggle_pin(d_rck);
     9fe:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <d_rck>
     a02:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <d_rck+0x1>
     a06:	5e df       	rcall	.-324    	; 0x8c4 <toggle_pin>
		
	// Turn on current segment.
	*d_segments[current_segment]->port &= ~(_BV(current_segment));
     a08:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <current_segment>
     a0c:	e3 2f       	mov	r30, r19
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	eb 58       	subi	r30, 0x8B	; 139
     a16:	fd 4f       	sbci	r31, 0xFD	; 253
     a18:	01 90       	ld	r0, Z+
     a1a:	f0 81       	ld	r31, Z
     a1c:	e0 2d       	mov	r30, r0
     a1e:	04 80       	ldd	r0, Z+4	; 0x04
     a20:	f5 81       	ldd	r31, Z+5	; 0x05
     a22:	e0 2d       	mov	r30, r0
     a24:	20 81       	ld	r18, Z
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <__vector_42+0x5a>
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	3a 95       	dec	r19
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <__vector_42+0x56>
     a34:	80 95       	com	r24
     a36:	82 23       	and	r24, r18
	
	change_current_segment();
     a38:	80 83       	st	Z, r24
     a3a:	66 df       	rcall	.-308    	; 0x908 <change_current_segment>
		
	transfer_to_display();
     a3c:	5d df       	rcall	.-326    	; 0x8f8 <transfer_to_display>
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	0f 90       	pop	r0
     a58:	0b be       	out	0x3b, r0	; 59
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <mv_to_c>:
     a64:	9c 01       	movw	r18, r24
     a66:	24 5f       	subi	r18, 0xF4	; 244
     a68:	31 40       	sbci	r19, 0x01	; 1
     a6a:	ad ec       	ldi	r26, 0xCD	; 205
     a6c:	bc ec       	ldi	r27, 0xCC	; 204
     a6e:	0d d5       	rcall	.+2586   	; 0x148a <__umulhisi3>
     a70:	96 95       	lsr	r25
     a72:	87 95       	ror	r24
     a74:	96 95       	lsr	r25
     a76:	87 95       	ror	r24
     a78:	96 95       	lsr	r25
     a7a:	87 95       	ror	r24
     a7c:	08 95       	ret

00000a7e <adc_to_mv>:
     a7e:	bc 01       	movw	r22, r24
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	e5 d3       	rcall	.+1994   	; 0x1250 <__floatunsisf>
     a86:	2a e1       	ldi	r18, 0x1A	; 26
     a88:	37 e6       	ldi	r19, 0x67	; 103
     a8a:	4c e9       	ldi	r20, 0x9C	; 156
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	92 d4       	rcall	.+2340   	; 0x13b4 <__mulsf3>
     a90:	b3 d3       	rcall	.+1894   	; 0x11f8 <__fixunssfsi>
     a92:	cb 01       	movw	r24, r22
     a94:	08 95       	ret

00000a96 <tmp36_init>:
     a96:	9c 01       	movw	r18, r24
     a98:	e7 e0       	ldi	r30, 0x07	; 7
     a9a:	f1 e0       	ldi	r31, 0x01	; 1
     a9c:	80 81       	ld	r24, Z
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	80 83       	st	Z, r24
     aa2:	83 b3       	in	r24, 0x13	; 19
     aa4:	81 60       	ori	r24, 0x01	; 1
     aa6:	83 bb       	out	0x13, r24	; 19
     aa8:	ec e7       	ldi	r30, 0x7C	; 124
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	80 64       	ori	r24, 0x40	; 64
     ab0:	80 83       	st	Z, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	87 60       	ori	r24, 0x07	; 7
     ab6:	80 83       	st	Z, r24
     ab8:	ab e7       	ldi	r26, 0x7B	; 123
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	8c 91       	ld	r24, X
     abe:	88 60       	ori	r24, 0x08	; 8
     ac0:	8c 93       	st	X, r24
     ac2:	ea e7       	ldi	r30, 0x7A	; 122
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	86 60       	ori	r24, 0x06	; 6
     aca:	80 83       	st	Z, r24
     acc:	80 81       	ld	r24, Z
     ace:	80 68       	ori	r24, 0x80	; 128
     ad0:	80 83       	st	Z, r24
     ad2:	80 81       	ld	r24, Z
     ad4:	88 60       	ori	r24, 0x08	; 8
     ad6:	80 83       	st	Z, r24
     ad8:	80 81       	ld	r24, Z
     ada:	80 62       	ori	r24, 0x20	; 32
     adc:	80 83       	st	Z, r24
     ade:	8c 91       	ld	r24, X
     ae0:	85 60       	ori	r24, 0x05	; 5
     ae2:	8c 93       	st	X, r24
     ae4:	e0 e8       	ldi	r30, 0x80	; 128
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	90 81       	ld	r25, Z
     aea:	90 61       	ori	r25, 0x10	; 16
     aec:	90 83       	st	Z, r25
     aee:	e1 e8       	ldi	r30, 0x81	; 129
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	90 81       	ld	r25, Z
     af4:	94 60       	ori	r25, 0x04	; 4
     af6:	90 83       	st	Z, r25
     af8:	90 81       	ld	r25, Z
     afa:	98 60       	ori	r25, 0x08	; 8
     afc:	90 83       	st	Z, r25
     afe:	ef e6       	ldi	r30, 0x6F	; 111
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	90 81       	ld	r25, Z
     b04:	94 60       	ori	r25, 0x04	; 4
     b06:	90 83       	st	Z, r25
     b08:	81 e1       	ldi	r24, 0x11	; 17
     b0a:	9a e7       	ldi	r25, 0x7A	; 122
     b0c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     b10:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
     b14:	21 15       	cp	r18, r1
     b16:	31 05       	cpc	r19, r1
     b18:	21 f0       	breq	.+8      	; 0xb22 <tmp36_init+0x8c>
     b1a:	30 93 5a 02 	sts	0x025A, r19	; 0x80025a <cb+0x1>
     b1e:	20 93 59 02 	sts	0x0259, r18	; 0x800259 <cb>
     b22:	84 b3       	in	r24, 0x14	; 20
     b24:	81 60       	ori	r24, 0x01	; 1
     b26:	84 bb       	out	0x14, r24	; 20
     b28:	ea e7       	ldi	r30, 0x7A	; 122
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	80 64       	ori	r24, 0x40	; 64
     b30:	80 83       	st	Z, r24
     b32:	08 95       	ret

00000b34 <__vector_29>:
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	0b b6       	in	r0, 0x3b	; 59
     b40:	0f 92       	push	r0
     b42:	2f 93       	push	r18
     b44:	3f 93       	push	r19
     b46:	4f 93       	push	r20
     b48:	5f 93       	push	r21
     b4a:	6f 93       	push	r22
     b4c:	7f 93       	push	r23
     b4e:	8f 93       	push	r24
     b50:	9f 93       	push	r25
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	ef 93       	push	r30
     b5c:	ff 93       	push	r31
     b5e:	c0 91 59 02 	lds	r28, 0x0259	; 0x800259 <cb>
     b62:	d0 91 5a 02 	lds	r29, 0x025A	; 0x80025a <cb+0x1>
     b66:	20 97       	sbiw	r28, 0x00	; 0
     b68:	41 f0       	breq	.+16     	; 0xb7a <__vector_29+0x46>
     b6a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     b6e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     b72:	85 df       	rcall	.-246    	; 0xa7e <adc_to_mv>
     b74:	77 df       	rcall	.-274    	; 0xa64 <mv_to_c>
     b76:	fe 01       	movw	r30, r28
     b78:	19 95       	eicall
     b7a:	ea e7       	ldi	r30, 0x7A	; 122
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8f 6e       	ori	r24, 0xEF	; 239
     b82:	80 83       	st	Z, r24
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	7f 91       	pop	r23
     b96:	6f 91       	pop	r22
     b98:	5f 91       	pop	r21
     b9a:	4f 91       	pop	r20
     b9c:	3f 91       	pop	r19
     b9e:	2f 91       	pop	r18
     ba0:	0f 90       	pop	r0
     ba2:	0b be       	out	0x3b, r0	; 59
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <new_measurement>:


// Temperature callback.
static void new_measurement(uint8_t deg_c)
{
	t_current = deg_c;  
     bae:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <t_current>
     bb2:	08 95       	ret

00000bb4 <util_init>:
	tmp36_init(new_measurement);
	
}

static void util_init()
{
     bb4:	af 92       	push	r10
     bb6:	bf 92       	push	r11
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
	// Initialize basic kalman filter
	kalman_init(0.001, 5, 1, 0, 1);
     bc4:	8f e3       	ldi	r24, 0x3F	; 63
     bc6:	8f 93       	push	r24
     bc8:	80 e8       	ldi	r24, 0x80	; 128
     bca:	8f 93       	push	r24
     bcc:	1f 92       	push	r1
     bce:	1f 92       	push	r1
     bd0:	a1 2c       	mov	r10, r1
     bd2:	b1 2c       	mov	r11, r1
     bd4:	65 01       	movw	r12, r10
     bd6:	e1 2c       	mov	r14, r1
     bd8:	f1 2c       	mov	r15, r1
     bda:	00 e8       	ldi	r16, 0x80	; 128
     bdc:	1f e3       	ldi	r17, 0x3F	; 63
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 ea       	ldi	r20, 0xA0	; 160
     be4:	50 e4       	ldi	r21, 0x40	; 64
     be6:	6f e6       	ldi	r22, 0x6F	; 111
     be8:	72 e1       	ldi	r23, 0x12	; 18
     bea:	83 e8       	ldi	r24, 0x83	; 131
     bec:	9a e3       	ldi	r25, 0x3A	; 58
     bee:	00 d1       	rcall	.+512    	; 0xdf0 <kalman_init>
}
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	08 95       	ret

00000c0a <shift_keys_init>:
{
	t_current = deg_c;  
}

static void shift_keys_init()
{
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <shift_keys_init+0x6>
     c10:	00 d0       	rcall	.+0      	; 0xc12 <shift_keys_init+0x8>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
	io_definition_t keys[] = {
     c16:	86 e0       	ldi	r24, 0x06	; 6
     c18:	e0 e1       	ldi	r30, 0x10	; 16
     c1a:	f2 e0       	ldi	r31, 0x02	; 2
     c1c:	de 01       	movw	r26, r28
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	01 90       	ld	r0, Z+
     c22:	0d 92       	st	X+, r0
     c24:	8a 95       	dec	r24
     c26:	e1 f7       	brne	.-8      	; 0xc20 <shift_keys_init+0x16>
		{KEY_T_LOW_PORT, KEY_T_LOW_PIN}, 
		{KEY_T_HIGH_PORT, KEY_T_HIGH_PIN},
		{KEY_T_CURR_PORT, KEY_T_CURR_PIN}
	};
	key_init(keys);
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	f2 dc       	rcall	.-1564   	; 0x612 <key_init>
}
     c2e:	26 96       	adiw	r28, 0x06	; 6
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	08 95       	ret

00000c40 <segment_display_init>:
	};
	led_init(leds);
}

static void segment_display_init()
{
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	28 97       	sbiw	r28, 0x08	; 8
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
	io_definition_t segments[] = {
     c54:	88 e0       	ldi	r24, 0x08	; 8
     c56:	e6 e1       	ldi	r30, 0x16	; 22
     c58:	f2 e0       	ldi	r31, 0x02	; 2
     c5a:	de 01       	movw	r26, r28
     c5c:	11 96       	adiw	r26, 0x01	; 1
     c5e:	01 90       	ld	r0, Z+
     c60:	0d 92       	st	X+, r0
     c62:	8a 95       	dec	r24
     c64:	e1 f7       	brne	.-8      	; 0xc5e <segment_display_init+0x1e>
	};
	io_definition_t rck = {SEG_7_RCK_PORT, SEG_7_RCK_PIN};
	io_definition_t sck = {SEG_7_SCK_PORT, SEG_7_SCK_PIN};
	io_definition_t si = {SEG_7_SI_PORT, SEG_7_SI_PIN};
		
	display_init(segments, rck, sck, si);
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	32 e0       	ldi	r19, 0x02	; 2
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	51 e0       	ldi	r21, 0x01	; 1
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	57 de       	rcall	.-850    	; 0x926 <display_init>
}
     c78:	28 96       	adiw	r28, 0x08	; 8
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <leds_init_all>:
	key_init(keys);
}


static void leds_init_all()
{
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	2e 97       	sbiw	r28, 0x0e	; 14
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
	io_definition_t leds[] = {
     c9e:	8e e0       	ldi	r24, 0x0E	; 14
     ca0:	ee e1       	ldi	r30, 0x1E	; 30
     ca2:	f2 e0       	ldi	r31, 0x02	; 2
     ca4:	de 01       	movw	r26, r28
     ca6:	11 96       	adiw	r26, 0x01	; 1
     ca8:	01 90       	ld	r0, Z+
     caa:	0d 92       	st	X+, r0
     cac:	8a 95       	dec	r24
     cae:	e1 f7       	brne	.-8      	; 0xca8 <leds_init_all+0x1e>
		{LED_5_PORT, LED_5_PIN},
		{LED_6_PORT, LED_6_PIN},
		{LED_7_PORT, LED_7_PIN},
		{LED_8_PORT, LED_8_PIN}
	};
	led_init(leds);
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	f4 dc       	rcall	.-1560   	; 0x69e <led_init>
}
     cb6:	2e 96       	adiw	r28, 0x0e	; 14
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <hal_init>:
	}
}

static void hal_init()
{
	shift_keys_init();
     cc8:	a0 df       	rcall	.-192    	; 0xc0a <shift_keys_init>
	pump_init();
     cca:	0d dd       	rcall	.-1510   	; 0x6e6 <pump_init>
	segment_display_init();
     ccc:	b9 df       	rcall	.-142    	; 0xc40 <segment_display_init>
     cce:	dd df       	rcall	.-70     	; 0xc8a <leds_init_all>
	leds_init_all();
     cd0:	87 ed       	ldi	r24, 0xD7	; 215
	
	tmp36_init(new_measurement);
     cd2:	95 e0       	ldi	r25, 0x05	; 5
     cd4:	e0 ce       	rjmp	.-576    	; 0xa96 <tmp36_init>
     cd6:	08 95       	ret

00000cd8 <run>:
     cd8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <t_current>
	display_init(segments, rck, sck, si);
}

// Application
static void run() {
	t_filtered = kalman_filter(t_current);
     cdc:	cc d0       	rcall	.+408    	; 0xe76 <kalman_filter>
     cde:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <t_filtered>
	
	key_current = key_scan();
     ce2:	ce dc       	rcall	.-1636   	; 0x680 <key_scan>
     ce4:	81 11       	cpse	r24, r1
	
	if (key_current)
     ce6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <display_current>
	display_current = key_current;
     cea:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <display_current>
	
	switch (display_current)
     cee:	82 30       	cpi	r24, 0x02	; 2
     cf0:	41 f0       	breq	.+16     	; 0xd02 <run+0x2a>
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	51 f0       	breq	.+20     	; 0xd0a <run+0x32>
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	61 f4       	brne	.+24     	; 0xd12 <run+0x3a>
     cfa:	86 e1       	ldi	r24, 0x16	; 22
	{
		case 1:
			display_print_uint_4(t_low);
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	67 de       	rcall	.-818    	; 0x9ce <display_print_uint_4>
     d00:	08 c0       	rjmp	.+16     	; 0xd12 <run+0x3a>
			break;
		case 2:
			display_print_uint_4(t_high);
     d02:	88 e1       	ldi	r24, 0x18	; 24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	63 de       	rcall	.-826    	; 0x9ce <display_print_uint_4>
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <run+0x3a>
			break;
		case 3:
			display_print_uint_4(t_filtered);
     d0a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <t_filtered>
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	5e de       	rcall	.-836    	; 0x9ce <display_print_uint_4>
			break;
		default:
			break;
	}
	
	if (t_filtered < t_low)
     d12:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <t_filtered>
     d16:	86 31       	cpi	r24, 0x16	; 22
	{
		pump_stop();
     d18:	10 f4       	brcc	.+4      	; 0xd1e <run+0x46>
     d1a:	f9 cc       	rjmp	.-1550   	; 0x70e <pump_stop>
     d1c:	08 95       	ret
	}
	else if (t_filtered >= t_high)
     d1e:	88 31       	cpi	r24, 0x18	; 24
     d20:	08 f0       	brcs	.+2      	; 0xd24 <run+0x4c>
	{
		pump_start();
     d22:	ee cc       	rjmp	.-1572   	; 0x700 <pump_start>
     d24:	08 95       	ret

00000d26 <main>:
     d26:	46 df       	rcall	.-372    	; 0xbb4 <util_init>
}

int main(void)
{
	util_init();
	hal_init();
     d28:	cf df       	rcall	.-98     	; 0xcc8 <hal_init>
     d2a:	78 94       	sei
	
	// Enable interrupt globally.
	sei();
     d2c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d2e:	89 e6       	ldi	r24, 0x69	; 105
     d30:	98 e1       	ldi	r25, 0x18	; 24
     d32:	21 50       	subi	r18, 0x01	; 1
     d34:	80 40       	sbci	r24, 0x00	; 0
     d36:	90 40       	sbci	r25, 0x00	; 0
     d38:	e1 f7       	brne	.-8      	; 0xd32 <main+0xc>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <main+0x16>
     d3c:	00 00       	nop
	_delay_ms(500);
	
	// Application
    while (1)
    {	
		run();
     d3e:	cc df       	rcall	.-104    	; 0xcd8 <run>
     d40:	fe cf       	rjmp	.-4      	; 0xd3e <main+0x18>

00000d42 <predict>:
     d42:	cf 92       	push	r12
	_b = b;
	_c = c;
}

static double predict() 
{
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
	return (_a * _x) + (_b * _u);
     d4a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <_x>
     d4e:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <_x+0x1>
     d52:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <_x+0x2>
     d56:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <_x+0x3>
     d5a:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <_a>
     d5e:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <_a+0x1>
     d62:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_a+0x2>
     d66:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <_a+0x3>
     d6a:	24 d3       	rcall	.+1608   	; 0x13b4 <__mulsf3>
     d6c:	6b 01       	movw	r12, r22
     d6e:	7c 01       	movw	r14, r24
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	a9 01       	movw	r20, r18
     d76:	60 91 61 02 	lds	r22, 0x0261	; 0x800261 <_b>
     d7a:	70 91 62 02 	lds	r23, 0x0262	; 0x800262 <_b+0x1>
     d7e:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <_b+0x2>
     d82:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_b+0x3>
     d86:	16 d3       	rcall	.+1580   	; 0x13b4 <__mulsf3>
     d88:	9b 01       	movw	r18, r22
     d8a:	ac 01       	movw	r20, r24
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	63 d1       	rcall	.+710    	; 0x1058 <__addsf3>
}
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	08 95       	ret

00000d9c <uncertenty>:

static double uncertenty()
{
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
	return ((_a * _cov) * _a) + _r; 
     da4:	c0 90 65 02 	lds	r12, 0x0265	; 0x800265 <_a>
     da8:	d0 90 66 02 	lds	r13, 0x0266	; 0x800266 <_a+0x1>
     dac:	e0 90 67 02 	lds	r14, 0x0267	; 0x800267 <_a+0x2>
     db0:	f0 90 68 02 	lds	r15, 0x0268	; 0x800268 <_a+0x3>
     db4:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <_cov>
     db8:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <_cov+0x1>
     dbc:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <_cov+0x2>
     dc0:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <_cov+0x3>
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	f5 d2       	rcall	.+1514   	; 0x13b4 <__mulsf3>
     dca:	9b 01       	movw	r18, r22
     dcc:	ac 01       	movw	r20, r24
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	f0 d2       	rcall	.+1504   	; 0x13b4 <__mulsf3>
     dd4:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <_r>
     dd8:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <_r+0x1>
     ddc:	40 91 6f 02 	lds	r20, 0x026F	; 0x80026f <_r+0x2>
     de0:	50 91 70 02 	lds	r21, 0x0270	; 0x800270 <_r+0x3>
     de4:	39 d1       	rcall	.+626    	; 0x1058 <__addsf3>
}
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	08 95       	ret

00000df0 <kalman_init>:
static double _cov = -1;
static double _u = 0;
static double _x = 255; // estimated signal without noise

void kalman_init(double r, double q, double a, double b, double c)
{
     df0:	af 92       	push	r10
     df2:	bf 92       	push	r11
     df4:	cf 92       	push	r12
     df6:	df 92       	push	r13
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	_r = r;
     e08:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <_r>
     e0c:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <_r+0x1>
     e10:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_r+0x2>
     e14:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <_r+0x3>
	_q = q;
     e18:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <_q>
     e1c:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <_q+0x1>
     e20:	40 93 6b 02 	sts	0x026B, r20	; 0x80026b <_q+0x2>
     e24:	50 93 6c 02 	sts	0x026C, r21	; 0x80026c <_q+0x3>
	_a = a;
     e28:	e0 92 65 02 	sts	0x0265, r14	; 0x800265 <_a>
     e2c:	f0 92 66 02 	sts	0x0266, r15	; 0x800266 <_a+0x1>
     e30:	00 93 67 02 	sts	0x0267, r16	; 0x800267 <_a+0x2>
     e34:	10 93 68 02 	sts	0x0268, r17	; 0x800268 <_a+0x3>
	_b = b;
     e38:	a0 92 61 02 	sts	0x0261, r10	; 0x800261 <_b>
     e3c:	b0 92 62 02 	sts	0x0262, r11	; 0x800262 <_b+0x1>
     e40:	c0 92 63 02 	sts	0x0263, r12	; 0x800263 <_b+0x2>
     e44:	d0 92 64 02 	sts	0x0264, r13	; 0x800264 <_b+0x3>
	_c = c;
     e48:	8e 85       	ldd	r24, Y+14	; 0x0e
     e4a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e4c:	a8 89       	ldd	r26, Y+16	; 0x10
     e4e:	b9 89       	ldd	r27, Y+17	; 0x11
     e50:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <_c>
     e54:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <_c+0x1>
     e58:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <_c+0x2>
     e5c:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <_c+0x3>
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	08 95       	ret

00000e76 <kalman_filter>:
{
	return ((_a * _cov) * _a) + _r; 
}

uint8_t kalman_filter(uint8_t measurement)
{
     e76:	4f 92       	push	r4
     e78:	5f 92       	push	r5
     e7a:	6f 92       	push	r6
     e7c:	7f 92       	push	r7
     e7e:	8f 92       	push	r8
     e80:	9f 92       	push	r9
     e82:	af 92       	push	r10
     e84:	bf 92       	push	r11
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	29 97       	sbiw	r28, 0x09	; 9
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	89 87       	std	Y+9, r24	; 0x09
	if (_x == 255)
     ea4:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_x>
     ea8:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_x+0x1>
     eac:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_x+0x2>
     eb0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <_x+0x3>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4f e7       	ldi	r20, 0x7F	; 127
     eba:	53 e4       	ldi	r21, 0x43	; 67
     ebc:	31 d1       	rcall	.+610    	; 0x1120 <__cmpsf2>
     ebe:	81 11       	cpse	r24, r1
     ec0:	39 c0       	rjmp	.+114    	; 0xf34 <kalman_filter+0xbe>
	{
		_x = (1 / _c) * measurement;
     ec2:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <_c>
     ec6:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <_c+0x1>
     eca:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <_c+0x2>
     ece:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <_c+0x3>
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	80 e8       	ldi	r24, 0x80	; 128
     ed8:	9f e3       	ldi	r25, 0x3F	; 63
     eda:	26 d1       	rcall	.+588    	; 0x1128 <__divsf3>
     edc:	6b 01       	movw	r12, r22
     ede:	7c 01       	movw	r14, r24
     ee0:	29 85       	ldd	r18, Y+9	; 0x09
     ee2:	62 2f       	mov	r22, r18
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	b4 d1       	rcall	.+872    	; 0x1254 <__floatsisf>
     eec:	a7 01       	movw	r20, r14
     eee:	96 01       	movw	r18, r12
     ef0:	61 d2       	rcall	.+1218   	; 0x13b4 <__mulsf3>
     ef2:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <_x>
     ef6:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <_x+0x1>
     efa:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_x+0x2>
     efe:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_x+0x3>
		_cov = (1 / _c) * _q * (1 / _c); 
     f02:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <_q>
     f06:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <_q+0x1>
     f0a:	40 91 6b 02 	lds	r20, 0x026B	; 0x80026b <_q+0x2>
     f0e:	50 91 6c 02 	lds	r21, 0x026C	; 0x80026c <_q+0x3>
     f12:	c7 01       	movw	r24, r14
     f14:	b6 01       	movw	r22, r12
     f16:	4e d2       	rcall	.+1180   	; 0x13b4 <__mulsf3>
     f18:	9b 01       	movw	r18, r22
     f1a:	ac 01       	movw	r20, r24
     f1c:	c7 01       	movw	r24, r14
     f1e:	b6 01       	movw	r22, r12
     f20:	49 d2       	rcall	.+1170   	; 0x13b4 <__mulsf3>
     f22:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <_cov>
     f26:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <_cov+0x1>
     f2a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <_cov+0x2>
     f2e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <_cov+0x3>
	}
	else 
	{
		// compute prediction
		double pred_x = predict();
     f32:	72 c0       	rjmp	.+228    	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
     f34:	06 df       	rcall	.-500    	; 0xd42 <predict>
     f36:	69 83       	std	Y+1, r22	; 0x01
     f38:	7a 83       	std	Y+2, r23	; 0x02
     f3a:	8b 83       	std	Y+3, r24	; 0x03
     f3c:	9c 83       	std	Y+4, r25	; 0x04
		double pred_cov = uncertenty();
     f3e:	2e df       	rcall	.-420    	; 0xd9c <uncertenty>
     f40:	6b 01       	movw	r12, r22
     f42:	7c 01       	movw	r14, r24
     f44:	80 90 5d 02 	lds	r8, 0x025D	; 0x80025d <_c>
		
		// kalman gain
		double k = pred_cov  * _c * (1 / ((_c * pred_cov * _c) + _q));
     f48:	90 90 5e 02 	lds	r9, 0x025E	; 0x80025e <_c+0x1>
     f4c:	a0 90 5f 02 	lds	r10, 0x025F	; 0x80025f <_c+0x2>
     f50:	b0 90 60 02 	lds	r11, 0x0260	; 0x800260 <_c+0x3>
     f54:	a5 01       	movw	r20, r10
     f56:	94 01       	movw	r18, r8
     f58:	2d d2       	rcall	.+1114   	; 0x13b4 <__mulsf3>
     f5a:	2b 01       	movw	r4, r22
     f5c:	3c 01       	movw	r6, r24
     f5e:	9b 01       	movw	r18, r22
     f60:	ac 01       	movw	r20, r24
     f62:	c5 01       	movw	r24, r10
     f64:	b4 01       	movw	r22, r8
     f66:	26 d2       	rcall	.+1100   	; 0x13b4 <__mulsf3>
     f68:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <_q>
     f6c:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <_q+0x1>
     f70:	40 91 6b 02 	lds	r20, 0x026B	; 0x80026b <_q+0x2>
     f74:	50 91 6c 02 	lds	r21, 0x026C	; 0x80026c <_q+0x3>
     f78:	6f d0       	rcall	.+222    	; 0x1058 <__addsf3>
     f7a:	9b 01       	movw	r18, r22
     f7c:	ac 01       	movw	r20, r24
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	80 e8       	ldi	r24, 0x80	; 128
     f84:	9f e3       	ldi	r25, 0x3F	; 63
     f86:	d0 d0       	rcall	.+416    	; 0x1128 <__divsf3>
     f88:	9b 01       	movw	r18, r22
     f8a:	ac 01       	movw	r20, r24
     f8c:	c3 01       	movw	r24, r6
     f8e:	b2 01       	movw	r22, r4
     f90:	11 d2       	rcall	.+1058   	; 0x13b4 <__mulsf3>
     f92:	2b 01       	movw	r4, r22
     f94:	3c 01       	movw	r6, r24
		
		// Correction
		_x = pred_x + k * (measurement - (_c * pred_x));
     f96:	a5 01       	movw	r20, r10
     f98:	94 01       	movw	r18, r8
     f9a:	69 81       	ldd	r22, Y+1	; 0x01
     f9c:	7a 81       	ldd	r23, Y+2	; 0x02
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	08 d2       	rcall	.+1040   	; 0x13b4 <__mulsf3>
     fa4:	6d 83       	std	Y+5, r22	; 0x05
     fa6:	7e 83       	std	Y+6, r23	; 0x06
     fa8:	8f 83       	std	Y+7, r24	; 0x07
     faa:	98 87       	std	Y+8, r25	; 0x08
     fac:	29 85       	ldd	r18, Y+9	; 0x09
     fae:	62 2f       	mov	r22, r18
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	4e d1       	rcall	.+668    	; 0x1254 <__floatsisf>
     fb8:	2d 81       	ldd	r18, Y+5	; 0x05
     fba:	3e 81       	ldd	r19, Y+6	; 0x06
     fbc:	4f 81       	ldd	r20, Y+7	; 0x07
     fbe:	58 85       	ldd	r21, Y+8	; 0x08
     fc0:	4a d0       	rcall	.+148    	; 0x1056 <__subsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c3 01       	movw	r24, r6
     fc8:	b2 01       	movw	r22, r4
     fca:	f4 d1       	rcall	.+1000   	; 0x13b4 <__mulsf3>
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
     fd0:	69 81       	ldd	r22, Y+1	; 0x01
     fd2:	7a 81       	ldd	r23, Y+2	; 0x02
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	3f d0       	rcall	.+126    	; 0x1058 <__addsf3>
     fda:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <_x>
     fde:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <_x+0x1>
     fe2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_x+0x2>
     fe6:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_x+0x3>
		_cov = pred_cov - (k * _c * pred_cov);
     fea:	a3 01       	movw	r20, r6
     fec:	92 01       	movw	r18, r4
     fee:	c5 01       	movw	r24, r10
     ff0:	b4 01       	movw	r22, r8
     ff2:	e0 d1       	rcall	.+960    	; 0x13b4 <__mulsf3>
     ff4:	9b 01       	movw	r18, r22
     ff6:	ac 01       	movw	r20, r24
     ff8:	c7 01       	movw	r24, r14
     ffa:	b6 01       	movw	r22, r12
     ffc:	db d1       	rcall	.+950    	; 0x13b4 <__mulsf3>
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	c7 01       	movw	r24, r14
    1004:	b6 01       	movw	r22, r12
    1006:	27 d0       	rcall	.+78     	; 0x1056 <__subsf3>
    1008:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <_cov>
    100c:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <_cov+0x1>
    1010:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <_cov+0x2>
    1014:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <_cov+0x3>
    1018:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_x>
	}
	 return _x;
    101c:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_x+0x1>
    1020:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_x+0x2>
    1024:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <_x+0x3>
    1028:	e7 d0       	rcall	.+462    	; 0x11f8 <__fixunssfsi>
    102a:	86 2f       	mov	r24, r22
    102c:	29 96       	adiw	r28, 0x09	; 9
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	7f 90       	pop	r7
    104e:	6f 90       	pop	r6
    1050:	5f 90       	pop	r5
    1052:	4f 90       	pop	r4
    1054:	08 95       	ret

00001056 <__subsf3>:
    1056:	50 58       	subi	r21, 0x80	; 128

00001058 <__addsf3>:
    1058:	bb 27       	eor	r27, r27
    105a:	aa 27       	eor	r26, r26
    105c:	0e d0       	rcall	.+28     	; 0x107a <__addsf3x>
    105e:	70 c1       	rjmp	.+736    	; 0x1340 <__fp_round>
    1060:	61 d1       	rcall	.+706    	; 0x1324 <__fp_pscA>
    1062:	30 f0       	brcs	.+12     	; 0x1070 <__addsf3+0x18>
    1064:	66 d1       	rcall	.+716    	; 0x1332 <__fp_pscB>
    1066:	20 f0       	brcs	.+8      	; 0x1070 <__addsf3+0x18>
    1068:	31 f4       	brne	.+12     	; 0x1076 <__addsf3+0x1e>
    106a:	9f 3f       	cpi	r25, 0xFF	; 255
    106c:	11 f4       	brne	.+4      	; 0x1072 <__addsf3+0x1a>
    106e:	1e f4       	brtc	.+6      	; 0x1076 <__addsf3+0x1e>
    1070:	56 c1       	rjmp	.+684    	; 0x131e <__fp_nan>
    1072:	0e f4       	brtc	.+2      	; 0x1076 <__addsf3+0x1e>
    1074:	e0 95       	com	r30
    1076:	e7 fb       	bst	r30, 7
    1078:	4c c1       	rjmp	.+664    	; 0x1312 <__fp_inf>

0000107a <__addsf3x>:
    107a:	e9 2f       	mov	r30, r25
    107c:	72 d1       	rcall	.+740    	; 0x1362 <__fp_split3>
    107e:	80 f3       	brcs	.-32     	; 0x1060 <__addsf3+0x8>
    1080:	ba 17       	cp	r27, r26
    1082:	62 07       	cpc	r22, r18
    1084:	73 07       	cpc	r23, r19
    1086:	84 07       	cpc	r24, r20
    1088:	95 07       	cpc	r25, r21
    108a:	18 f0       	brcs	.+6      	; 0x1092 <__addsf3x+0x18>
    108c:	71 f4       	brne	.+28     	; 0x10aa <__addsf3x+0x30>
    108e:	9e f5       	brtc	.+102    	; 0x10f6 <__addsf3x+0x7c>
    1090:	8a c1       	rjmp	.+788    	; 0x13a6 <__fp_zero>
    1092:	0e f4       	brtc	.+2      	; 0x1096 <__addsf3x+0x1c>
    1094:	e0 95       	com	r30
    1096:	0b 2e       	mov	r0, r27
    1098:	ba 2f       	mov	r27, r26
    109a:	a0 2d       	mov	r26, r0
    109c:	0b 01       	movw	r0, r22
    109e:	b9 01       	movw	r22, r18
    10a0:	90 01       	movw	r18, r0
    10a2:	0c 01       	movw	r0, r24
    10a4:	ca 01       	movw	r24, r20
    10a6:	a0 01       	movw	r20, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	ff 27       	eor	r31, r31
    10ac:	59 1b       	sub	r21, r25
    10ae:	99 f0       	breq	.+38     	; 0x10d6 <__addsf3x+0x5c>
    10b0:	59 3f       	cpi	r21, 0xF9	; 249
    10b2:	50 f4       	brcc	.+20     	; 0x10c8 <__addsf3x+0x4e>
    10b4:	50 3e       	cpi	r21, 0xE0	; 224
    10b6:	68 f1       	brcs	.+90     	; 0x1112 <__addsf3x+0x98>
    10b8:	1a 16       	cp	r1, r26
    10ba:	f0 40       	sbci	r31, 0x00	; 0
    10bc:	a2 2f       	mov	r26, r18
    10be:	23 2f       	mov	r18, r19
    10c0:	34 2f       	mov	r19, r20
    10c2:	44 27       	eor	r20, r20
    10c4:	58 5f       	subi	r21, 0xF8	; 248
    10c6:	f3 cf       	rjmp	.-26     	; 0x10ae <__addsf3x+0x34>
    10c8:	46 95       	lsr	r20
    10ca:	37 95       	ror	r19
    10cc:	27 95       	ror	r18
    10ce:	a7 95       	ror	r26
    10d0:	f0 40       	sbci	r31, 0x00	; 0
    10d2:	53 95       	inc	r21
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__addsf3x+0x4e>
    10d6:	7e f4       	brtc	.+30     	; 0x10f6 <__addsf3x+0x7c>
    10d8:	1f 16       	cp	r1, r31
    10da:	ba 0b       	sbc	r27, r26
    10dc:	62 0b       	sbc	r22, r18
    10de:	73 0b       	sbc	r23, r19
    10e0:	84 0b       	sbc	r24, r20
    10e2:	ba f0       	brmi	.+46     	; 0x1112 <__addsf3x+0x98>
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	a1 f0       	breq	.+40     	; 0x1110 <__addsf3x+0x96>
    10e8:	ff 0f       	add	r31, r31
    10ea:	bb 1f       	adc	r27, r27
    10ec:	66 1f       	adc	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	c2 f7       	brpl	.-16     	; 0x10e4 <__addsf3x+0x6a>
    10f4:	0e c0       	rjmp	.+28     	; 0x1112 <__addsf3x+0x98>
    10f6:	ba 0f       	add	r27, r26
    10f8:	62 1f       	adc	r22, r18
    10fa:	73 1f       	adc	r23, r19
    10fc:	84 1f       	adc	r24, r20
    10fe:	48 f4       	brcc	.+18     	; 0x1112 <__addsf3x+0x98>
    1100:	87 95       	ror	r24
    1102:	77 95       	ror	r23
    1104:	67 95       	ror	r22
    1106:	b7 95       	ror	r27
    1108:	f7 95       	ror	r31
    110a:	9e 3f       	cpi	r25, 0xFE	; 254
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__addsf3x+0x96>
    110e:	b3 cf       	rjmp	.-154    	; 0x1076 <__addsf3+0x1e>
    1110:	93 95       	inc	r25
    1112:	88 0f       	add	r24, r24
    1114:	08 f0       	brcs	.+2      	; 0x1118 <__addsf3x+0x9e>
    1116:	99 27       	eor	r25, r25
    1118:	ee 0f       	add	r30, r30
    111a:	97 95       	ror	r25
    111c:	87 95       	ror	r24
    111e:	08 95       	ret

00001120 <__cmpsf2>:
    1120:	d4 d0       	rcall	.+424    	; 0x12ca <__fp_cmp>
    1122:	08 f4       	brcc	.+2      	; 0x1126 <__cmpsf2+0x6>
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	08 95       	ret

00001128 <__divsf3>:
    1128:	0c d0       	rcall	.+24     	; 0x1142 <__divsf3x>
    112a:	0a c1       	rjmp	.+532    	; 0x1340 <__fp_round>
    112c:	02 d1       	rcall	.+516    	; 0x1332 <__fp_pscB>
    112e:	40 f0       	brcs	.+16     	; 0x1140 <__divsf3+0x18>
    1130:	f9 d0       	rcall	.+498    	; 0x1324 <__fp_pscA>
    1132:	30 f0       	brcs	.+12     	; 0x1140 <__divsf3+0x18>
    1134:	21 f4       	brne	.+8      	; 0x113e <__divsf3+0x16>
    1136:	5f 3f       	cpi	r21, 0xFF	; 255
    1138:	19 f0       	breq	.+6      	; 0x1140 <__divsf3+0x18>
    113a:	eb c0       	rjmp	.+470    	; 0x1312 <__fp_inf>
    113c:	51 11       	cpse	r21, r1
    113e:	34 c1       	rjmp	.+616    	; 0x13a8 <__fp_szero>
    1140:	ee c0       	rjmp	.+476    	; 0x131e <__fp_nan>

00001142 <__divsf3x>:
    1142:	0f d1       	rcall	.+542    	; 0x1362 <__fp_split3>
    1144:	98 f3       	brcs	.-26     	; 0x112c <__divsf3+0x4>

00001146 <__divsf3_pse>:
    1146:	99 23       	and	r25, r25
    1148:	c9 f3       	breq	.-14     	; 0x113c <__divsf3+0x14>
    114a:	55 23       	and	r21, r21
    114c:	b1 f3       	breq	.-20     	; 0x113a <__divsf3+0x12>
    114e:	95 1b       	sub	r25, r21
    1150:	55 0b       	sbc	r21, r21
    1152:	bb 27       	eor	r27, r27
    1154:	aa 27       	eor	r26, r26
    1156:	62 17       	cp	r22, r18
    1158:	73 07       	cpc	r23, r19
    115a:	84 07       	cpc	r24, r20
    115c:	38 f0       	brcs	.+14     	; 0x116c <__divsf3_pse+0x26>
    115e:	9f 5f       	subi	r25, 0xFF	; 255
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	22 0f       	add	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	44 1f       	adc	r20, r20
    1168:	aa 1f       	adc	r26, r26
    116a:	a9 f3       	breq	.-22     	; 0x1156 <__divsf3_pse+0x10>
    116c:	33 d0       	rcall	.+102    	; 0x11d4 <__divsf3_pse+0x8e>
    116e:	0e 2e       	mov	r0, r30
    1170:	3a f0       	brmi	.+14     	; 0x1180 <__divsf3_pse+0x3a>
    1172:	e0 e8       	ldi	r30, 0x80	; 128
    1174:	30 d0       	rcall	.+96     	; 0x11d6 <__divsf3_pse+0x90>
    1176:	91 50       	subi	r25, 0x01	; 1
    1178:	50 40       	sbci	r21, 0x00	; 0
    117a:	e6 95       	lsr	r30
    117c:	00 1c       	adc	r0, r0
    117e:	ca f7       	brpl	.-14     	; 0x1172 <__divsf3_pse+0x2c>
    1180:	29 d0       	rcall	.+82     	; 0x11d4 <__divsf3_pse+0x8e>
    1182:	fe 2f       	mov	r31, r30
    1184:	27 d0       	rcall	.+78     	; 0x11d4 <__divsf3_pse+0x8e>
    1186:	66 0f       	add	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	bb 1f       	adc	r27, r27
    118e:	26 17       	cp	r18, r22
    1190:	37 07       	cpc	r19, r23
    1192:	48 07       	cpc	r20, r24
    1194:	ab 07       	cpc	r26, r27
    1196:	b0 e8       	ldi	r27, 0x80	; 128
    1198:	09 f0       	breq	.+2      	; 0x119c <__divsf3_pse+0x56>
    119a:	bb 0b       	sbc	r27, r27
    119c:	80 2d       	mov	r24, r0
    119e:	bf 01       	movw	r22, r30
    11a0:	ff 27       	eor	r31, r31
    11a2:	93 58       	subi	r25, 0x83	; 131
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	2a f0       	brmi	.+10     	; 0x11b2 <__divsf3_pse+0x6c>
    11a8:	9e 3f       	cpi	r25, 0xFE	; 254
    11aa:	51 05       	cpc	r21, r1
    11ac:	68 f0       	brcs	.+26     	; 0x11c8 <__divsf3_pse+0x82>
    11ae:	b1 c0       	rjmp	.+354    	; 0x1312 <__fp_inf>
    11b0:	fb c0       	rjmp	.+502    	; 0x13a8 <__fp_szero>
    11b2:	5f 3f       	cpi	r21, 0xFF	; 255
    11b4:	ec f3       	brlt	.-6      	; 0x11b0 <__divsf3_pse+0x6a>
    11b6:	98 3e       	cpi	r25, 0xE8	; 232
    11b8:	dc f3       	brlt	.-10     	; 0x11b0 <__divsf3_pse+0x6a>
    11ba:	86 95       	lsr	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	b7 95       	ror	r27
    11c2:	f7 95       	ror	r31
    11c4:	9f 5f       	subi	r25, 0xFF	; 255
    11c6:	c9 f7       	brne	.-14     	; 0x11ba <__divsf3_pse+0x74>
    11c8:	88 0f       	add	r24, r24
    11ca:	91 1d       	adc	r25, r1
    11cc:	96 95       	lsr	r25
    11ce:	87 95       	ror	r24
    11d0:	97 f9       	bld	r25, 7
    11d2:	08 95       	ret
    11d4:	e1 e0       	ldi	r30, 0x01	; 1
    11d6:	66 0f       	add	r22, r22
    11d8:	77 1f       	adc	r23, r23
    11da:	88 1f       	adc	r24, r24
    11dc:	bb 1f       	adc	r27, r27
    11de:	62 17       	cp	r22, r18
    11e0:	73 07       	cpc	r23, r19
    11e2:	84 07       	cpc	r24, r20
    11e4:	ba 07       	cpc	r27, r26
    11e6:	20 f0       	brcs	.+8      	; 0x11f0 <__divsf3_pse+0xaa>
    11e8:	62 1b       	sub	r22, r18
    11ea:	73 0b       	sbc	r23, r19
    11ec:	84 0b       	sbc	r24, r20
    11ee:	ba 0b       	sbc	r27, r26
    11f0:	ee 1f       	adc	r30, r30
    11f2:	88 f7       	brcc	.-30     	; 0x11d6 <__divsf3_pse+0x90>
    11f4:	e0 95       	com	r30
    11f6:	08 95       	ret

000011f8 <__fixunssfsi>:
    11f8:	bc d0       	rcall	.+376    	; 0x1372 <__fp_splitA>
    11fa:	88 f0       	brcs	.+34     	; 0x121e <__fixunssfsi+0x26>
    11fc:	9f 57       	subi	r25, 0x7F	; 127
    11fe:	90 f0       	brcs	.+36     	; 0x1224 <__fixunssfsi+0x2c>
    1200:	b9 2f       	mov	r27, r25
    1202:	99 27       	eor	r25, r25
    1204:	b7 51       	subi	r27, 0x17	; 23
    1206:	a0 f0       	brcs	.+40     	; 0x1230 <__fixunssfsi+0x38>
    1208:	d1 f0       	breq	.+52     	; 0x123e <__fixunssfsi+0x46>
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	1a f0       	brmi	.+6      	; 0x121a <__fixunssfsi+0x22>
    1214:	ba 95       	dec	r27
    1216:	c9 f7       	brne	.-14     	; 0x120a <__fixunssfsi+0x12>
    1218:	12 c0       	rjmp	.+36     	; 0x123e <__fixunssfsi+0x46>
    121a:	b1 30       	cpi	r27, 0x01	; 1
    121c:	81 f0       	breq	.+32     	; 0x123e <__fixunssfsi+0x46>
    121e:	c3 d0       	rcall	.+390    	; 0x13a6 <__fp_zero>
    1220:	b1 e0       	ldi	r27, 0x01	; 1
    1222:	08 95       	ret
    1224:	c0 c0       	rjmp	.+384    	; 0x13a6 <__fp_zero>
    1226:	67 2f       	mov	r22, r23
    1228:	78 2f       	mov	r23, r24
    122a:	88 27       	eor	r24, r24
    122c:	b8 5f       	subi	r27, 0xF8	; 248
    122e:	39 f0       	breq	.+14     	; 0x123e <__fixunssfsi+0x46>
    1230:	b9 3f       	cpi	r27, 0xF9	; 249
    1232:	cc f3       	brlt	.-14     	; 0x1226 <__fixunssfsi+0x2e>
    1234:	86 95       	lsr	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	b3 95       	inc	r27
    123c:	d9 f7       	brne	.-10     	; 0x1234 <__fixunssfsi+0x3c>
    123e:	3e f4       	brtc	.+14     	; 0x124e <__fixunssfsi+0x56>
    1240:	90 95       	com	r25
    1242:	80 95       	com	r24
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	08 95       	ret

00001250 <__floatunsisf>:
    1250:	e8 94       	clt
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <__floatsisf+0x12>

00001254 <__floatsisf>:
    1254:	97 fb       	bst	r25, 7
    1256:	3e f4       	brtc	.+14     	; 0x1266 <__floatsisf+0x12>
    1258:	90 95       	com	r25
    125a:	80 95       	com	r24
    125c:	70 95       	com	r23
    125e:	61 95       	neg	r22
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	8f 4f       	sbci	r24, 0xFF	; 255
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	99 23       	and	r25, r25
    1268:	a9 f0       	breq	.+42     	; 0x1294 <__floatsisf+0x40>
    126a:	f9 2f       	mov	r31, r25
    126c:	96 e9       	ldi	r25, 0x96	; 150
    126e:	bb 27       	eor	r27, r27
    1270:	93 95       	inc	r25
    1272:	f6 95       	lsr	r31
    1274:	87 95       	ror	r24
    1276:	77 95       	ror	r23
    1278:	67 95       	ror	r22
    127a:	b7 95       	ror	r27
    127c:	f1 11       	cpse	r31, r1
    127e:	f8 cf       	rjmp	.-16     	; 0x1270 <__floatsisf+0x1c>
    1280:	fa f4       	brpl	.+62     	; 0x12c0 <__floatsisf+0x6c>
    1282:	bb 0f       	add	r27, r27
    1284:	11 f4       	brne	.+4      	; 0x128a <__floatsisf+0x36>
    1286:	60 ff       	sbrs	r22, 0
    1288:	1b c0       	rjmp	.+54     	; 0x12c0 <__floatsisf+0x6c>
    128a:	6f 5f       	subi	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	16 c0       	rjmp	.+44     	; 0x12c0 <__floatsisf+0x6c>
    1294:	88 23       	and	r24, r24
    1296:	11 f0       	breq	.+4      	; 0x129c <__floatsisf+0x48>
    1298:	96 e9       	ldi	r25, 0x96	; 150
    129a:	11 c0       	rjmp	.+34     	; 0x12be <__floatsisf+0x6a>
    129c:	77 23       	and	r23, r23
    129e:	21 f0       	breq	.+8      	; 0x12a8 <__floatsisf+0x54>
    12a0:	9e e8       	ldi	r25, 0x8E	; 142
    12a2:	87 2f       	mov	r24, r23
    12a4:	76 2f       	mov	r23, r22
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <__floatsisf+0x5e>
    12a8:	66 23       	and	r22, r22
    12aa:	71 f0       	breq	.+28     	; 0x12c8 <__floatsisf+0x74>
    12ac:	96 e8       	ldi	r25, 0x86	; 134
    12ae:	86 2f       	mov	r24, r22
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	2a f0       	brmi	.+10     	; 0x12c0 <__floatsisf+0x6c>
    12b6:	9a 95       	dec	r25
    12b8:	66 0f       	add	r22, r22
    12ba:	77 1f       	adc	r23, r23
    12bc:	88 1f       	adc	r24, r24
    12be:	da f7       	brpl	.-10     	; 0x12b6 <__floatsisf+0x62>
    12c0:	88 0f       	add	r24, r24
    12c2:	96 95       	lsr	r25
    12c4:	87 95       	ror	r24
    12c6:	97 f9       	bld	r25, 7
    12c8:	08 95       	ret

000012ca <__fp_cmp>:
    12ca:	99 0f       	add	r25, r25
    12cc:	00 08       	sbc	r0, r0
    12ce:	55 0f       	add	r21, r21
    12d0:	aa 0b       	sbc	r26, r26
    12d2:	e0 e8       	ldi	r30, 0x80	; 128
    12d4:	fe ef       	ldi	r31, 0xFE	; 254
    12d6:	16 16       	cp	r1, r22
    12d8:	17 06       	cpc	r1, r23
    12da:	e8 07       	cpc	r30, r24
    12dc:	f9 07       	cpc	r31, r25
    12de:	c0 f0       	brcs	.+48     	; 0x1310 <__fp_cmp+0x46>
    12e0:	12 16       	cp	r1, r18
    12e2:	13 06       	cpc	r1, r19
    12e4:	e4 07       	cpc	r30, r20
    12e6:	f5 07       	cpc	r31, r21
    12e8:	98 f0       	brcs	.+38     	; 0x1310 <__fp_cmp+0x46>
    12ea:	62 1b       	sub	r22, r18
    12ec:	73 0b       	sbc	r23, r19
    12ee:	84 0b       	sbc	r24, r20
    12f0:	95 0b       	sbc	r25, r21
    12f2:	39 f4       	brne	.+14     	; 0x1302 <__fp_cmp+0x38>
    12f4:	0a 26       	eor	r0, r26
    12f6:	61 f0       	breq	.+24     	; 0x1310 <__fp_cmp+0x46>
    12f8:	23 2b       	or	r18, r19
    12fa:	24 2b       	or	r18, r20
    12fc:	25 2b       	or	r18, r21
    12fe:	21 f4       	brne	.+8      	; 0x1308 <__fp_cmp+0x3e>
    1300:	08 95       	ret
    1302:	0a 26       	eor	r0, r26
    1304:	09 f4       	brne	.+2      	; 0x1308 <__fp_cmp+0x3e>
    1306:	a1 40       	sbci	r26, 0x01	; 1
    1308:	a6 95       	lsr	r26
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	81 1d       	adc	r24, r1
    130e:	81 1d       	adc	r24, r1
    1310:	08 95       	ret

00001312 <__fp_inf>:
    1312:	97 f9       	bld	r25, 7
    1314:	9f 67       	ori	r25, 0x7F	; 127
    1316:	80 e8       	ldi	r24, 0x80	; 128
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	08 95       	ret

0000131e <__fp_nan>:
    131e:	9f ef       	ldi	r25, 0xFF	; 255
    1320:	80 ec       	ldi	r24, 0xC0	; 192
    1322:	08 95       	ret

00001324 <__fp_pscA>:
    1324:	00 24       	eor	r0, r0
    1326:	0a 94       	dec	r0
    1328:	16 16       	cp	r1, r22
    132a:	17 06       	cpc	r1, r23
    132c:	18 06       	cpc	r1, r24
    132e:	09 06       	cpc	r0, r25
    1330:	08 95       	ret

00001332 <__fp_pscB>:
    1332:	00 24       	eor	r0, r0
    1334:	0a 94       	dec	r0
    1336:	12 16       	cp	r1, r18
    1338:	13 06       	cpc	r1, r19
    133a:	14 06       	cpc	r1, r20
    133c:	05 06       	cpc	r0, r21
    133e:	08 95       	ret

00001340 <__fp_round>:
    1340:	09 2e       	mov	r0, r25
    1342:	03 94       	inc	r0
    1344:	00 0c       	add	r0, r0
    1346:	11 f4       	brne	.+4      	; 0x134c <__fp_round+0xc>
    1348:	88 23       	and	r24, r24
    134a:	52 f0       	brmi	.+20     	; 0x1360 <__fp_round+0x20>
    134c:	bb 0f       	add	r27, r27
    134e:	40 f4       	brcc	.+16     	; 0x1360 <__fp_round+0x20>
    1350:	bf 2b       	or	r27, r31
    1352:	11 f4       	brne	.+4      	; 0x1358 <__fp_round+0x18>
    1354:	60 ff       	sbrs	r22, 0
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <__fp_round+0x20>
    1358:	6f 5f       	subi	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	08 95       	ret

00001362 <__fp_split3>:
    1362:	57 fd       	sbrc	r21, 7
    1364:	90 58       	subi	r25, 0x80	; 128
    1366:	44 0f       	add	r20, r20
    1368:	55 1f       	adc	r21, r21
    136a:	59 f0       	breq	.+22     	; 0x1382 <__fp_splitA+0x10>
    136c:	5f 3f       	cpi	r21, 0xFF	; 255
    136e:	71 f0       	breq	.+28     	; 0x138c <__fp_splitA+0x1a>
    1370:	47 95       	ror	r20

00001372 <__fp_splitA>:
    1372:	88 0f       	add	r24, r24
    1374:	97 fb       	bst	r25, 7
    1376:	99 1f       	adc	r25, r25
    1378:	61 f0       	breq	.+24     	; 0x1392 <__fp_splitA+0x20>
    137a:	9f 3f       	cpi	r25, 0xFF	; 255
    137c:	79 f0       	breq	.+30     	; 0x139c <__fp_splitA+0x2a>
    137e:	87 95       	ror	r24
    1380:	08 95       	ret
    1382:	12 16       	cp	r1, r18
    1384:	13 06       	cpc	r1, r19
    1386:	14 06       	cpc	r1, r20
    1388:	55 1f       	adc	r21, r21
    138a:	f2 cf       	rjmp	.-28     	; 0x1370 <__fp_split3+0xe>
    138c:	46 95       	lsr	r20
    138e:	f1 df       	rcall	.-30     	; 0x1372 <__fp_splitA>
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <__fp_splitA+0x30>
    1392:	16 16       	cp	r1, r22
    1394:	17 06       	cpc	r1, r23
    1396:	18 06       	cpc	r1, r24
    1398:	99 1f       	adc	r25, r25
    139a:	f1 cf       	rjmp	.-30     	; 0x137e <__fp_splitA+0xc>
    139c:	86 95       	lsr	r24
    139e:	71 05       	cpc	r23, r1
    13a0:	61 05       	cpc	r22, r1
    13a2:	08 94       	sec
    13a4:	08 95       	ret

000013a6 <__fp_zero>:
    13a6:	e8 94       	clt

000013a8 <__fp_szero>:
    13a8:	bb 27       	eor	r27, r27
    13aa:	66 27       	eor	r22, r22
    13ac:	77 27       	eor	r23, r23
    13ae:	cb 01       	movw	r24, r22
    13b0:	97 f9       	bld	r25, 7
    13b2:	08 95       	ret

000013b4 <__mulsf3>:
    13b4:	0b d0       	rcall	.+22     	; 0x13cc <__mulsf3x>
    13b6:	c4 cf       	rjmp	.-120    	; 0x1340 <__fp_round>
    13b8:	b5 df       	rcall	.-150    	; 0x1324 <__fp_pscA>
    13ba:	28 f0       	brcs	.+10     	; 0x13c6 <__mulsf3+0x12>
    13bc:	ba df       	rcall	.-140    	; 0x1332 <__fp_pscB>
    13be:	18 f0       	brcs	.+6      	; 0x13c6 <__mulsf3+0x12>
    13c0:	95 23       	and	r25, r21
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <__mulsf3+0x12>
    13c4:	a6 cf       	rjmp	.-180    	; 0x1312 <__fp_inf>
    13c6:	ab cf       	rjmp	.-170    	; 0x131e <__fp_nan>
    13c8:	11 24       	eor	r1, r1
    13ca:	ee cf       	rjmp	.-36     	; 0x13a8 <__fp_szero>

000013cc <__mulsf3x>:
    13cc:	ca df       	rcall	.-108    	; 0x1362 <__fp_split3>
    13ce:	a0 f3       	brcs	.-24     	; 0x13b8 <__mulsf3+0x4>

000013d0 <__mulsf3_pse>:
    13d0:	95 9f       	mul	r25, r21
    13d2:	d1 f3       	breq	.-12     	; 0x13c8 <__mulsf3+0x14>
    13d4:	95 0f       	add	r25, r21
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	55 1f       	adc	r21, r21
    13da:	62 9f       	mul	r22, r18
    13dc:	f0 01       	movw	r30, r0
    13de:	72 9f       	mul	r23, r18
    13e0:	bb 27       	eor	r27, r27
    13e2:	f0 0d       	add	r31, r0
    13e4:	b1 1d       	adc	r27, r1
    13e6:	63 9f       	mul	r22, r19
    13e8:	aa 27       	eor	r26, r26
    13ea:	f0 0d       	add	r31, r0
    13ec:	b1 1d       	adc	r27, r1
    13ee:	aa 1f       	adc	r26, r26
    13f0:	64 9f       	mul	r22, r20
    13f2:	66 27       	eor	r22, r22
    13f4:	b0 0d       	add	r27, r0
    13f6:	a1 1d       	adc	r26, r1
    13f8:	66 1f       	adc	r22, r22
    13fa:	82 9f       	mul	r24, r18
    13fc:	22 27       	eor	r18, r18
    13fe:	b0 0d       	add	r27, r0
    1400:	a1 1d       	adc	r26, r1
    1402:	62 1f       	adc	r22, r18
    1404:	73 9f       	mul	r23, r19
    1406:	b0 0d       	add	r27, r0
    1408:	a1 1d       	adc	r26, r1
    140a:	62 1f       	adc	r22, r18
    140c:	83 9f       	mul	r24, r19
    140e:	a0 0d       	add	r26, r0
    1410:	61 1d       	adc	r22, r1
    1412:	22 1f       	adc	r18, r18
    1414:	74 9f       	mul	r23, r20
    1416:	33 27       	eor	r19, r19
    1418:	a0 0d       	add	r26, r0
    141a:	61 1d       	adc	r22, r1
    141c:	23 1f       	adc	r18, r19
    141e:	84 9f       	mul	r24, r20
    1420:	60 0d       	add	r22, r0
    1422:	21 1d       	adc	r18, r1
    1424:	82 2f       	mov	r24, r18
    1426:	76 2f       	mov	r23, r22
    1428:	6a 2f       	mov	r22, r26
    142a:	11 24       	eor	r1, r1
    142c:	9f 57       	subi	r25, 0x7F	; 127
    142e:	50 40       	sbci	r21, 0x00	; 0
    1430:	8a f0       	brmi	.+34     	; 0x1454 <__mulsf3_pse+0x84>
    1432:	e1 f0       	breq	.+56     	; 0x146c <__mulsf3_pse+0x9c>
    1434:	88 23       	and	r24, r24
    1436:	4a f0       	brmi	.+18     	; 0x144a <__mulsf3_pse+0x7a>
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	bb 1f       	adc	r27, r27
    143e:	66 1f       	adc	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	91 50       	subi	r25, 0x01	; 1
    1446:	50 40       	sbci	r21, 0x00	; 0
    1448:	a9 f7       	brne	.-22     	; 0x1434 <__mulsf3_pse+0x64>
    144a:	9e 3f       	cpi	r25, 0xFE	; 254
    144c:	51 05       	cpc	r21, r1
    144e:	70 f0       	brcs	.+28     	; 0x146c <__mulsf3_pse+0x9c>
    1450:	60 cf       	rjmp	.-320    	; 0x1312 <__fp_inf>
    1452:	aa cf       	rjmp	.-172    	; 0x13a8 <__fp_szero>
    1454:	5f 3f       	cpi	r21, 0xFF	; 255
    1456:	ec f3       	brlt	.-6      	; 0x1452 <__mulsf3_pse+0x82>
    1458:	98 3e       	cpi	r25, 0xE8	; 232
    145a:	dc f3       	brlt	.-10     	; 0x1452 <__mulsf3_pse+0x82>
    145c:	86 95       	lsr	r24
    145e:	77 95       	ror	r23
    1460:	67 95       	ror	r22
    1462:	b7 95       	ror	r27
    1464:	f7 95       	ror	r31
    1466:	e7 95       	ror	r30
    1468:	9f 5f       	subi	r25, 0xFF	; 255
    146a:	c1 f7       	brne	.-16     	; 0x145c <__mulsf3_pse+0x8c>
    146c:	fe 2b       	or	r31, r30
    146e:	88 0f       	add	r24, r24
    1470:	91 1d       	adc	r25, r1
    1472:	96 95       	lsr	r25
    1474:	87 95       	ror	r24
    1476:	97 f9       	bld	r25, 7
    1478:	08 95       	ret

0000147a <__tablejump2__>:
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	88 1f       	adc	r24, r24
    1480:	8b bf       	out	0x3b, r24	; 59
    1482:	07 90       	elpm	r0, Z+
    1484:	f6 91       	elpm	r31, Z
    1486:	e0 2d       	mov	r30, r0
    1488:	19 94       	eijmp

0000148a <__umulhisi3>:
    148a:	a2 9f       	mul	r26, r18
    148c:	b0 01       	movw	r22, r0
    148e:	b3 9f       	mul	r27, r19
    1490:	c0 01       	movw	r24, r0
    1492:	a3 9f       	mul	r26, r19
    1494:	70 0d       	add	r23, r0
    1496:	81 1d       	adc	r24, r1
    1498:	11 24       	eor	r1, r1
    149a:	91 1d       	adc	r25, r1
    149c:	b2 9f       	mul	r27, r18
    149e:	70 0d       	add	r23, r0
    14a0:	81 1d       	adc	r24, r1
    14a2:	11 24       	eor	r1, r1
    14a4:	91 1d       	adc	r25, r1
    14a6:	08 95       	ret

000014a8 <malloc>:
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	91 05       	cpc	r25, r1
    14b4:	10 f4       	brcc	.+4      	; 0x14ba <malloc+0x12>
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <__flp>
    14be:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <__flp+0x1>
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	a0 e0       	ldi	r26, 0x00	; 0
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	30 97       	sbiw	r30, 0x00	; 0
    14cc:	19 f1       	breq	.+70     	; 0x1514 <malloc+0x6c>
    14ce:	40 81       	ld	r20, Z
    14d0:	51 81       	ldd	r21, Z+1	; 0x01
    14d2:	02 81       	ldd	r16, Z+2	; 0x02
    14d4:	13 81       	ldd	r17, Z+3	; 0x03
    14d6:	48 17       	cp	r20, r24
    14d8:	59 07       	cpc	r21, r25
    14da:	c8 f0       	brcs	.+50     	; 0x150e <malloc+0x66>
    14dc:	84 17       	cp	r24, r20
    14de:	95 07       	cpc	r25, r21
    14e0:	69 f4       	brne	.+26     	; 0x14fc <malloc+0x54>
    14e2:	10 97       	sbiw	r26, 0x00	; 0
    14e4:	31 f0       	breq	.+12     	; 0x14f2 <malloc+0x4a>
    14e6:	12 96       	adiw	r26, 0x02	; 2
    14e8:	0c 93       	st	X, r16
    14ea:	12 97       	sbiw	r26, 0x02	; 2
    14ec:	13 96       	adiw	r26, 0x03	; 3
    14ee:	1c 93       	st	X, r17
    14f0:	27 c0       	rjmp	.+78     	; 0x1540 <malloc+0x98>
    14f2:	00 93 81 02 	sts	0x0281, r16	; 0x800281 <__flp>
    14f6:	10 93 82 02 	sts	0x0282, r17	; 0x800282 <__flp+0x1>
    14fa:	22 c0       	rjmp	.+68     	; 0x1540 <malloc+0x98>
    14fc:	21 15       	cp	r18, r1
    14fe:	31 05       	cpc	r19, r1
    1500:	19 f0       	breq	.+6      	; 0x1508 <malloc+0x60>
    1502:	42 17       	cp	r20, r18
    1504:	53 07       	cpc	r21, r19
    1506:	18 f4       	brcc	.+6      	; 0x150e <malloc+0x66>
    1508:	9a 01       	movw	r18, r20
    150a:	bd 01       	movw	r22, r26
    150c:	ef 01       	movw	r28, r30
    150e:	df 01       	movw	r26, r30
    1510:	f8 01       	movw	r30, r16
    1512:	db cf       	rjmp	.-74     	; 0x14ca <malloc+0x22>
    1514:	21 15       	cp	r18, r1
    1516:	31 05       	cpc	r19, r1
    1518:	f9 f0       	breq	.+62     	; 0x1558 <malloc+0xb0>
    151a:	28 1b       	sub	r18, r24
    151c:	39 0b       	sbc	r19, r25
    151e:	24 30       	cpi	r18, 0x04	; 4
    1520:	31 05       	cpc	r19, r1
    1522:	80 f4       	brcc	.+32     	; 0x1544 <malloc+0x9c>
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	9b 81       	ldd	r25, Y+3	; 0x03
    1528:	61 15       	cp	r22, r1
    152a:	71 05       	cpc	r23, r1
    152c:	21 f0       	breq	.+8      	; 0x1536 <malloc+0x8e>
    152e:	fb 01       	movw	r30, r22
    1530:	93 83       	std	Z+3, r25	; 0x03
    1532:	82 83       	std	Z+2, r24	; 0x02
    1534:	04 c0       	rjmp	.+8      	; 0x153e <malloc+0x96>
    1536:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <__flp+0x1>
    153a:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <__flp>
    153e:	fe 01       	movw	r30, r28
    1540:	32 96       	adiw	r30, 0x02	; 2
    1542:	44 c0       	rjmp	.+136    	; 0x15cc <malloc+0x124>
    1544:	fe 01       	movw	r30, r28
    1546:	e2 0f       	add	r30, r18
    1548:	f3 1f       	adc	r31, r19
    154a:	81 93       	st	Z+, r24
    154c:	91 93       	st	Z+, r25
    154e:	22 50       	subi	r18, 0x02	; 2
    1550:	31 09       	sbc	r19, r1
    1552:	39 83       	std	Y+1, r19	; 0x01
    1554:	28 83       	st	Y, r18
    1556:	3a c0       	rjmp	.+116    	; 0x15cc <malloc+0x124>
    1558:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <__brkval>
    155c:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <__brkval+0x1>
    1560:	23 2b       	or	r18, r19
    1562:	41 f4       	brne	.+16     	; 0x1574 <malloc+0xcc>
    1564:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1568:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    156c:	30 93 80 02 	sts	0x0280, r19	; 0x800280 <__brkval+0x1>
    1570:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <__brkval>
    1574:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1578:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    157c:	21 15       	cp	r18, r1
    157e:	31 05       	cpc	r19, r1
    1580:	41 f4       	brne	.+16     	; 0x1592 <malloc+0xea>
    1582:	2d b7       	in	r18, 0x3d	; 61
    1584:	3e b7       	in	r19, 0x3e	; 62
    1586:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    158a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    158e:	24 1b       	sub	r18, r20
    1590:	35 0b       	sbc	r19, r21
    1592:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <__brkval>
    1596:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <__brkval+0x1>
    159a:	e2 17       	cp	r30, r18
    159c:	f3 07       	cpc	r31, r19
    159e:	a0 f4       	brcc	.+40     	; 0x15c8 <malloc+0x120>
    15a0:	2e 1b       	sub	r18, r30
    15a2:	3f 0b       	sbc	r19, r31
    15a4:	28 17       	cp	r18, r24
    15a6:	39 07       	cpc	r19, r25
    15a8:	78 f0       	brcs	.+30     	; 0x15c8 <malloc+0x120>
    15aa:	ac 01       	movw	r20, r24
    15ac:	4e 5f       	subi	r20, 0xFE	; 254
    15ae:	5f 4f       	sbci	r21, 0xFF	; 255
    15b0:	24 17       	cp	r18, r20
    15b2:	35 07       	cpc	r19, r21
    15b4:	48 f0       	brcs	.+18     	; 0x15c8 <malloc+0x120>
    15b6:	4e 0f       	add	r20, r30
    15b8:	5f 1f       	adc	r21, r31
    15ba:	50 93 80 02 	sts	0x0280, r21	; 0x800280 <__brkval+0x1>
    15be:	40 93 7f 02 	sts	0x027F, r20	; 0x80027f <__brkval>
    15c2:	81 93       	st	Z+, r24
    15c4:	91 93       	st	Z+, r25
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <malloc+0x124>
    15c8:	e0 e0       	ldi	r30, 0x00	; 0
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	cf 01       	movw	r24, r30
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <free>:
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	09 f4       	brne	.+2      	; 0x15e2 <free+0xa>
    15e0:	81 c0       	rjmp	.+258    	; 0x16e4 <free+0x10c>
    15e2:	fc 01       	movw	r30, r24
    15e4:	32 97       	sbiw	r30, 0x02	; 2
    15e6:	13 82       	std	Z+3, r1	; 0x03
    15e8:	12 82       	std	Z+2, r1	; 0x02
    15ea:	a0 91 81 02 	lds	r26, 0x0281	; 0x800281 <__flp>
    15ee:	b0 91 82 02 	lds	r27, 0x0282	; 0x800282 <__flp+0x1>
    15f2:	10 97       	sbiw	r26, 0x00	; 0
    15f4:	81 f4       	brne	.+32     	; 0x1616 <free+0x3e>
    15f6:	20 81       	ld	r18, Z
    15f8:	31 81       	ldd	r19, Z+1	; 0x01
    15fa:	82 0f       	add	r24, r18
    15fc:	93 1f       	adc	r25, r19
    15fe:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <__brkval>
    1602:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <__brkval+0x1>
    1606:	28 17       	cp	r18, r24
    1608:	39 07       	cpc	r19, r25
    160a:	51 f5       	brne	.+84     	; 0x1660 <free+0x88>
    160c:	f0 93 80 02 	sts	0x0280, r31	; 0x800280 <__brkval+0x1>
    1610:	e0 93 7f 02 	sts	0x027F, r30	; 0x80027f <__brkval>
    1614:	67 c0       	rjmp	.+206    	; 0x16e4 <free+0x10c>
    1616:	ed 01       	movw	r28, r26
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	ce 17       	cp	r28, r30
    161e:	df 07       	cpc	r29, r31
    1620:	40 f4       	brcc	.+16     	; 0x1632 <free+0x5a>
    1622:	4a 81       	ldd	r20, Y+2	; 0x02
    1624:	5b 81       	ldd	r21, Y+3	; 0x03
    1626:	9e 01       	movw	r18, r28
    1628:	41 15       	cp	r20, r1
    162a:	51 05       	cpc	r21, r1
    162c:	f1 f0       	breq	.+60     	; 0x166a <free+0x92>
    162e:	ea 01       	movw	r28, r20
    1630:	f5 cf       	rjmp	.-22     	; 0x161c <free+0x44>
    1632:	d3 83       	std	Z+3, r29	; 0x03
    1634:	c2 83       	std	Z+2, r28	; 0x02
    1636:	40 81       	ld	r20, Z
    1638:	51 81       	ldd	r21, Z+1	; 0x01
    163a:	84 0f       	add	r24, r20
    163c:	95 1f       	adc	r25, r21
    163e:	c8 17       	cp	r28, r24
    1640:	d9 07       	cpc	r29, r25
    1642:	59 f4       	brne	.+22     	; 0x165a <free+0x82>
    1644:	88 81       	ld	r24, Y
    1646:	99 81       	ldd	r25, Y+1	; 0x01
    1648:	84 0f       	add	r24, r20
    164a:	95 1f       	adc	r25, r21
    164c:	02 96       	adiw	r24, 0x02	; 2
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	80 83       	st	Z, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	9b 81       	ldd	r25, Y+3	; 0x03
    1656:	93 83       	std	Z+3, r25	; 0x03
    1658:	82 83       	std	Z+2, r24	; 0x02
    165a:	21 15       	cp	r18, r1
    165c:	31 05       	cpc	r19, r1
    165e:	29 f4       	brne	.+10     	; 0x166a <free+0x92>
    1660:	f0 93 82 02 	sts	0x0282, r31	; 0x800282 <__flp+0x1>
    1664:	e0 93 81 02 	sts	0x0281, r30	; 0x800281 <__flp>
    1668:	3d c0       	rjmp	.+122    	; 0x16e4 <free+0x10c>
    166a:	e9 01       	movw	r28, r18
    166c:	fb 83       	std	Y+3, r31	; 0x03
    166e:	ea 83       	std	Y+2, r30	; 0x02
    1670:	49 91       	ld	r20, Y+
    1672:	59 91       	ld	r21, Y+
    1674:	c4 0f       	add	r28, r20
    1676:	d5 1f       	adc	r29, r21
    1678:	ec 17       	cp	r30, r28
    167a:	fd 07       	cpc	r31, r29
    167c:	61 f4       	brne	.+24     	; 0x1696 <free+0xbe>
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	84 0f       	add	r24, r20
    1684:	95 1f       	adc	r25, r21
    1686:	02 96       	adiw	r24, 0x02	; 2
    1688:	e9 01       	movw	r28, r18
    168a:	99 83       	std	Y+1, r25	; 0x01
    168c:	88 83       	st	Y, r24
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	9b 83       	std	Y+3, r25	; 0x03
    1694:	8a 83       	std	Y+2, r24	; 0x02
    1696:	e0 e0       	ldi	r30, 0x00	; 0
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	12 96       	adiw	r26, 0x02	; 2
    169c:	8d 91       	ld	r24, X+
    169e:	9c 91       	ld	r25, X
    16a0:	13 97       	sbiw	r26, 0x03	; 3
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	19 f0       	breq	.+6      	; 0x16ac <free+0xd4>
    16a6:	fd 01       	movw	r30, r26
    16a8:	dc 01       	movw	r26, r24
    16aa:	f7 cf       	rjmp	.-18     	; 0x169a <free+0xc2>
    16ac:	8d 91       	ld	r24, X+
    16ae:	9c 91       	ld	r25, X
    16b0:	11 97       	sbiw	r26, 0x01	; 1
    16b2:	9d 01       	movw	r18, r26
    16b4:	2e 5f       	subi	r18, 0xFE	; 254
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	82 0f       	add	r24, r18
    16ba:	93 1f       	adc	r25, r19
    16bc:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <__brkval>
    16c0:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <__brkval+0x1>
    16c4:	28 17       	cp	r18, r24
    16c6:	39 07       	cpc	r19, r25
    16c8:	69 f4       	brne	.+26     	; 0x16e4 <free+0x10c>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	29 f4       	brne	.+10     	; 0x16d8 <free+0x100>
    16ce:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__flp+0x1>
    16d2:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <__flp>
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <free+0x104>
    16d8:	13 82       	std	Z+3, r1	; 0x03
    16da:	12 82       	std	Z+2, r1	; 0x02
    16dc:	b0 93 80 02 	sts	0x0280, r27	; 0x800280 <__brkval+0x1>
    16e0:	a0 93 7f 02 	sts	0x027F, r26	; 0x80027f <__brkval>
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <_exit>:
    16ea:	f8 94       	cli

000016ec <__stop_program>:
    16ec:	ff cf       	rjmp	.-2      	; 0x16ec <__stop_program>
