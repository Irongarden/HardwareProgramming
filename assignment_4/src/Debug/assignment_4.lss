
assignment_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  00001916  000019aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001916  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800248  00800248  000019f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033d1  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b58  00000000  00000000  000050fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c77  00000000  00000000  00006c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c0  00000000  00000000  000088cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be5  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001636  00000000  00000000  00009c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000b2a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c1       	rjmp	.+806    	; 0x334 <__vector_3>
       e:	00 00       	nop
      10:	be c1       	rjmp	.+892    	; 0x38e <__vector_4>
      12:	00 00       	nop
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	00 00       	nop
      18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	ce c5       	rjmp	.+2972   	; 0xc12 <__vector_29>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	01 c5       	rjmp	.+2562   	; 0xaac <__vector_42>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	18 02       	muls	r17, r24
      e6:	2c 02       	muls	r18, r28
      e8:	40 02       	muls	r20, r16
      ea:	54 02       	muls	r21, r20
      ec:	68 02       	muls	r22, r24
      ee:	7c 02       	muls	r23, r28
      f0:	90 02       	muls	r25, r16
      f2:	a4 02       	muls	r26, r20
      f4:	b8 02       	muls	r27, r24
      f6:	cc 02       	muls	r28, r28
      f8:	e0 02       	muls	r30, r16

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d1 e2       	ldi	r29, 0x21	; 33
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_copy_data>:
     10a:	12 e0       	ldi	r17, 0x02	; 2
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b2 e0       	ldi	r27, 0x02	; 2
     110:	e6 e1       	ldi	r30, 0x16	; 22
     112:	f9 e1       	ldi	r31, 0x19	; 25
     114:	00 e0       	ldi	r16, 0x00	; 0
     116:	0b bf       	out	0x3b, r16	; 59
     118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x14>
     11a:	07 90       	elpm	r0, Z+
     11c:	0d 92       	st	X+, r0
     11e:	a8 34       	cpi	r26, 0x48	; 72
     120:	b1 07       	cpc	r27, r17
     122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0x10>

00000124 <__do_clear_bss>:
     124:	22 e0       	ldi	r18, 0x02	; 2
     126:	a8 e4       	ldi	r26, 0x48	; 72
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
     12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
     12e:	a9 3a       	cpi	r26, 0xA9	; 169
     130:	b2 07       	cpc	r27, r18
     132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>
     134:	0c d7       	rcall	.+3608   	; 0xf4e <main>
     136:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <configure_output>:
#include <stdlib.h>
#include <avr/io.h>
#include "../include/digital_output.h"

static void configure_output(io_descriptor_t output)
{
     13c:	dc 01       	movw	r26, r24
	// Initialize Data Direction Register for each output-pin.
	*(output->ddr) |= _BV(output->bit);
     13e:	ed 91       	ld	r30, X+
     140:	fc 91       	ld	r31, X
     142:	11 97       	sbiw	r26, 0x01	; 1
     144:	40 81       	ld	r20, Z
     146:	21 e0       	ldi	r18, 0x01	; 1
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	c9 01       	movw	r24, r18
     14c:	17 96       	adiw	r26, 0x07	; 7
     14e:	0c 90       	ld	r0, X
     150:	02 c0       	rjmp	.+4      	; 0x156 <configure_output+0x1a>
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	0a 94       	dec	r0
     158:	e2 f7       	brpl	.-8      	; 0x152 <configure_output+0x16>
     15a:	84 2b       	or	r24, r20
     15c:	80 83       	st	Z, r24
     15e:	08 95       	ret

00000160 <output_set_state>:
	
	return output;
}

return_code_t output_set_state(io_descriptor_t output, state_t state)
{
     160:	fc 01       	movw	r30, r24
	if (output->active == ACTIVE_LOW) {
     162:	86 81       	ldd	r24, Z+6	; 0x06
     164:	81 11       	cpse	r24, r1
     166:	1f c0       	rjmp	.+62     	; 0x1a6 <output_set_state+0x46>
		if (state == ACTIVE) {
     168:	61 30       	cpi	r22, 0x01	; 1
     16a:	79 f4       	brne	.+30     	; 0x18a <output_set_state+0x2a>
			// Set port low.
			*(output->port) &= ~_BV(output->bit);
     16c:	a4 81       	ldd	r26, Z+4	; 0x04
     16e:	b5 81       	ldd	r27, Z+5	; 0x05
     170:	2c 91       	ld	r18, X
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	07 80       	ldd	r0, Z+7	; 0x07
     178:	02 c0       	rjmp	.+4      	; 0x17e <output_set_state+0x1e>
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	0a 94       	dec	r0
     180:	e2 f7       	brpl	.-8      	; 0x17a <output_set_state+0x1a>
     182:	80 95       	com	r24
     184:	82 23       	and	r24, r18
     186:	8c 93       	st	X, r24
     188:	2c c0       	rjmp	.+88     	; 0x1e2 <output_set_state+0x82>
		}
		else {
			// Set port high.
			*(output->port) |= _BV(output->bit);
     18a:	a4 81       	ldd	r26, Z+4	; 0x04
     18c:	b5 81       	ldd	r27, Z+5	; 0x05
     18e:	2c 91       	ld	r18, X
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	07 80       	ldd	r0, Z+7	; 0x07
     196:	02 c0       	rjmp	.+4      	; 0x19c <output_set_state+0x3c>
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	0a 94       	dec	r0
     19e:	e2 f7       	brpl	.-8      	; 0x198 <output_set_state+0x38>
     1a0:	82 2b       	or	r24, r18
     1a2:	8c 93       	st	X, r24
     1a4:	1e c0       	rjmp	.+60     	; 0x1e2 <output_set_state+0x82>
		}
	}
	else {
		if (state == ACTIVE) {
     1a6:	61 30       	cpi	r22, 0x01	; 1
     1a8:	71 f4       	brne	.+28     	; 0x1c6 <output_set_state+0x66>
			// set port high.
			*(output->port) |= _BV(output->bit);
     1aa:	a4 81       	ldd	r26, Z+4	; 0x04
     1ac:	b5 81       	ldd	r27, Z+5	; 0x05
     1ae:	2c 91       	ld	r18, X
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	07 80       	ldd	r0, Z+7	; 0x07
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <output_set_state+0x5c>
     1b8:	88 0f       	add	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	0a 94       	dec	r0
     1be:	e2 f7       	brpl	.-8      	; 0x1b8 <output_set_state+0x58>
     1c0:	82 2b       	or	r24, r18
     1c2:	8c 93       	st	X, r24
     1c4:	0e c0       	rjmp	.+28     	; 0x1e2 <output_set_state+0x82>
		}
		else {
			// Set port low.
			*(output->port) &= ~_BV(output->bit);
     1c6:	a4 81       	ldd	r26, Z+4	; 0x04
     1c8:	b5 81       	ldd	r27, Z+5	; 0x05
     1ca:	2c 91       	ld	r18, X
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	07 80       	ldd	r0, Z+7	; 0x07
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <output_set_state+0x78>
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	0a 94       	dec	r0
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <output_set_state+0x74>
     1dc:	80 95       	com	r24
     1de:	82 23       	and	r24, r18
     1e0:	8c 93       	st	X, r24
		}
	}
	
	// Could preform a check of the actual pin state. 
	return OK;
}
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	08 95       	ret

000001e6 <output_init>:
	// Initialize Data Direction Register for each output-pin.
	*(output->ddr) |= _BV(output->bit);
}

io_descriptor_t output_init(port_t port, uint8_t bit, active_state_t active, state_t default_state)
{
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	12 2f       	mov	r17, r18
	io_descriptor_t output = io_descriptor_init(port, bit, active);
     1ee:	fc d0       	rcall	.+504    	; 0x3e8 <io_descriptor_init>
     1f0:	ec 01       	movw	r28, r24
	
	configure_output(output);
     1f2:	a4 df       	rcall	.-184    	; 0x13c <configure_output>
     1f4:	61 2f       	mov	r22, r17
	
	output_set_state(output, default_state);
     1f6:	ce 01       	movw	r24, r28
     1f8:	b3 df       	rcall	.-154    	; 0x160 <output_set_state>
     1fa:	ce 01       	movw	r24, r28
	
	return output;
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	08 95       	ret

00000204 <configure_input>:
     204:	fc 01       	movw	r30, r24
}

return_code_t input_destroy(io_descriptor_t input)
{
	return io_descriptor_destroy(input);
}
     206:	a0 81       	ld	r26, Z
     208:	b1 81       	ldd	r27, Z+1	; 0x01
     20a:	9c 91       	ld	r25, X
     20c:	21 e0       	ldi	r18, 0x01	; 1
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	07 80       	ldd	r0, Z+7	; 0x07
     212:	02 c0       	rjmp	.+4      	; 0x218 <configure_input+0x14>
     214:	22 0f       	add	r18, r18
     216:	33 1f       	adc	r19, r19
     218:	0a 94       	dec	r0
     21a:	e2 f7       	brpl	.-8      	; 0x214 <configure_input+0x10>
     21c:	20 95       	com	r18
     21e:	29 23       	and	r18, r25
     220:	2c 93       	st	X, r18
     222:	61 30       	cpi	r22, 0x01	; 1
     224:	69 f4       	brne	.+26     	; 0x240 <configure_input+0x3c>
     226:	a4 81       	ldd	r26, Z+4	; 0x04
     228:	b5 81       	ldd	r27, Z+5	; 0x05
     22a:	2c 91       	ld	r18, X
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	07 80       	ldd	r0, Z+7	; 0x07
     232:	02 c0       	rjmp	.+4      	; 0x238 <configure_input+0x34>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	0a 94       	dec	r0
     23a:	e2 f7       	brpl	.-8      	; 0x234 <configure_input+0x30>
     23c:	82 2b       	or	r24, r18
     23e:	8c 93       	st	X, r24
     240:	08 95       	ret

00000242 <set_trigger>:
     242:	e9 e6       	ldi	r30, 0x69	; 105
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	90 81       	ld	r25, Z
     248:	21 e0       	ldi	r18, 0x01	; 1
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	d9 01       	movw	r26, r18
     24e:	02 c0       	rjmp	.+4      	; 0x254 <set_trigger+0x12>
     250:	aa 0f       	add	r26, r26
     252:	bb 1f       	adc	r27, r27
     254:	8a 95       	dec	r24
     256:	e2 f7       	brpl	.-8      	; 0x250 <set_trigger+0xe>
     258:	a0 95       	com	r26
     25a:	9a 23       	and	r25, r26
     25c:	90 83       	st	Z, r25
     25e:	50 81       	ld	r21, Z
     260:	c9 01       	movw	r24, r18
     262:	02 c0       	rjmp	.+4      	; 0x268 <set_trigger+0x26>
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	6a 95       	dec	r22
     26a:	e2 f7       	brpl	.-8      	; 0x264 <set_trigger+0x22>
     26c:	85 2b       	or	r24, r21
     26e:	80 83       	st	Z, r24
     270:	8d b3       	in	r24, 0x1d	; 29
     272:	02 c0       	rjmp	.+4      	; 0x278 <set_trigger+0x36>
     274:	22 0f       	add	r18, r18
     276:	33 1f       	adc	r19, r19
     278:	4a 95       	dec	r20
     27a:	e2 f7       	brpl	.-8      	; 0x274 <set_trigger+0x32>
     27c:	28 2b       	or	r18, r24
     27e:	2d bb       	out	0x1d, r18	; 29
     280:	08 95       	ret

00000282 <input_init>:
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	f8 2e       	mov	r15, r24
     292:	e6 2e       	mov	r14, r22
     294:	d2 2e       	mov	r13, r18
     296:	a8 d0       	rcall	.+336    	; 0x3e8 <io_descriptor_init>
     298:	ec 01       	movw	r28, r24
     29a:	6d 2d       	mov	r22, r13
     29c:	b3 df       	rcall	.-154    	; 0x204 <configure_input>
     29e:	01 15       	cp	r16, r1
     2a0:	11 05       	cpc	r17, r1
     2a2:	d1 f0       	breq	.+52     	; 0x2d8 <input_init+0x56>
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	f8 12       	cpse	r15, r24
     2a8:	17 c0       	rjmp	.+46     	; 0x2d8 <input_init+0x56>
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	e8 12       	cpse	r14, r24
     2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <input_init+0x40>
     2b0:	10 93 4b 02 	sts	0x024B, r17	; 0x80024b <cb2+0x1>
     2b4:	00 93 4a 02 	sts	0x024A, r16	; 0x80024a <cb2>
     2b8:	42 e0       	ldi	r20, 0x02	; 2
     2ba:	65 e0       	ldi	r22, 0x05	; 5
     2bc:	84 e0       	ldi	r24, 0x04	; 4
     2be:	c1 df       	rcall	.-126    	; 0x242 <set_trigger>
     2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <input_init+0x56>
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	e8 12       	cpse	r14, r24
     2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <input_init+0x56>
     2c8:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <__data_end+0x1>
     2cc:	00 93 48 02 	sts	0x0248, r16	; 0x800248 <__data_end>
     2d0:	43 e0       	ldi	r20, 0x03	; 3
     2d2:	67 e0       	ldi	r22, 0x07	; 7
     2d4:	86 e0       	ldi	r24, 0x06	; 6
     2d6:	b5 df       	rcall	.-150    	; 0x242 <set_trigger>
     2d8:	ce 01       	movw	r24, r28
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	08 95       	ret

000002ea <input_activated>:
     2ea:	fc 01       	movw	r30, r24
     2ec:	86 81       	ldd	r24, Z+6	; 0x06
     2ee:	88 23       	and	r24, r24
     2f0:	19 f0       	breq	.+6      	; 0x2f8 <input_activated+0xe>
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	81 f0       	breq	.+32     	; 0x316 <input_activated+0x2c>
     2f6:	1c c0       	rjmp	.+56     	; 0x330 <input_activated+0x46>
     2f8:	a2 81       	ldd	r26, Z+2	; 0x02
     2fa:	b3 81       	ldd	r27, Z+3	; 0x03
     2fc:	2c 91       	ld	r18, X
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	c9 01       	movw	r24, r18
     302:	07 80       	ldd	r0, Z+7	; 0x07
     304:	02 c0       	rjmp	.+4      	; 0x30a <input_activated+0x20>
     306:	95 95       	asr	r25
     308:	87 95       	ror	r24
     30a:	0a 94       	dec	r0
     30c:	e2 f7       	brpl	.-8      	; 0x306 <input_activated+0x1c>
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	82 27       	eor	r24, r18
     312:	81 70       	andi	r24, 0x01	; 1
     314:	08 95       	ret
     316:	a2 81       	ldd	r26, Z+2	; 0x02
     318:	b3 81       	ldd	r27, Z+3	; 0x03
     31a:	2c 91       	ld	r18, X
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	c9 01       	movw	r24, r18
     320:	07 80       	ldd	r0, Z+7	; 0x07
     322:	02 c0       	rjmp	.+4      	; 0x328 <input_activated+0x3e>
     324:	95 95       	asr	r25
     326:	87 95       	ror	r24
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <input_activated+0x3a>
     32c:	81 70       	andi	r24, 0x01	; 1
     32e:	08 95       	ret
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret

00000334 <__vector_3>:

ISR(INT2_vect)
{
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	0b b6       	in	r0, 0x3b	; 59
     340:	0f 92       	push	r0
     342:	2f 93       	push	r18
     344:	3f 93       	push	r19
     346:	4f 93       	push	r20
     348:	5f 93       	push	r21
     34a:	6f 93       	push	r22
     34c:	7f 93       	push	r23
     34e:	8f 93       	push	r24
     350:	9f 93       	push	r25
     352:	af 93       	push	r26
     354:	bf 93       	push	r27
     356:	ef 93       	push	r30
     358:	ff 93       	push	r31
	if (0 != cb2)
     35a:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <cb2>
     35e:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <cb2+0x1>
     362:	30 97       	sbiw	r30, 0x00	; 0
     364:	09 f0       	breq	.+2      	; 0x368 <__vector_3+0x34>
	cb2();
     366:	19 95       	eicall
}
     368:	ff 91       	pop	r31
     36a:	ef 91       	pop	r30
     36c:	bf 91       	pop	r27
     36e:	af 91       	pop	r26
     370:	9f 91       	pop	r25
     372:	8f 91       	pop	r24
     374:	7f 91       	pop	r23
     376:	6f 91       	pop	r22
     378:	5f 91       	pop	r21
     37a:	4f 91       	pop	r20
     37c:	3f 91       	pop	r19
     37e:	2f 91       	pop	r18
     380:	0f 90       	pop	r0
     382:	0b be       	out	0x3b, r0	; 59
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	0f 90       	pop	r0
     38a:	1f 90       	pop	r1
     38c:	18 95       	reti

0000038e <__vector_4>:

ISR(INT3_vect)
{
     38e:	1f 92       	push	r1
     390:	0f 92       	push	r0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
     398:	0b b6       	in	r0, 0x3b	; 59
     39a:	0f 92       	push	r0
     39c:	2f 93       	push	r18
     39e:	3f 93       	push	r19
     3a0:	4f 93       	push	r20
     3a2:	5f 93       	push	r21
     3a4:	6f 93       	push	r22
     3a6:	7f 93       	push	r23
     3a8:	8f 93       	push	r24
     3aa:	9f 93       	push	r25
     3ac:	af 93       	push	r26
     3ae:	bf 93       	push	r27
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31
	if (0 != cb3)
     3b4:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <__data_end>
     3b8:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <__data_end+0x1>
     3bc:	30 97       	sbiw	r30, 0x00	; 0
     3be:	09 f0       	breq	.+2      	; 0x3c2 <__vector_4+0x34>
	cb3();
     3c0:	19 95       	eicall
     3c2:	ff 91       	pop	r31
     3c4:	ef 91       	pop	r30
     3c6:	bf 91       	pop	r27
     3c8:	af 91       	pop	r26
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	7f 91       	pop	r23
     3d0:	6f 91       	pop	r22
     3d2:	5f 91       	pop	r21
     3d4:	4f 91       	pop	r20
     3d6:	3f 91       	pop	r19
     3d8:	2f 91       	pop	r18
     3da:	0f 90       	pop	r0
     3dc:	0b be       	out	0x3b, r0	; 59
     3de:	0f 90       	pop	r0
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	0f 90       	pop	r0
     3e4:	1f 90       	pop	r1
     3e6:	18 95       	reti

000003e8 <io_descriptor_init>:

#include <stdlib.h>
#include "../include/io_descriptor.h"

io_descriptor_t io_descriptor_init(port_t port, uint8_t bit, active_state_t active)
{
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	c8 2f       	mov	r28, r24
     3f0:	d6 2f       	mov	r29, r22
     3f2:	14 2f       	mov	r17, r20
	// Reserving memory.
	io_descriptor_t desc = malloc(sizeof(io_desc_st));
     3f4:	88 e0       	ldi	r24, 0x08	; 8
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <malloc>
     3fc:	dc 01       	movw	r26, r24
	
	// Checking that memory is reserved.
	if (0 == desc) {
     3fe:	89 2b       	or	r24, r25
     400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	f2 c0       	rjmp	.+484    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
		return 0;
	}
	
	// Input validation.
	if (!(bit >= 0 && bit <= 7)) {
     404:	d8 30       	cpi	r29, 0x08	; 8
     406:	08 f0       	brcs	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	f2 c0       	rjmp	.+484    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		return 0;
	}
	
	// Assign values.
	desc->bit = bit;
     40a:	17 96       	adiw	r26, 0x07	; 7
     40c:	dc 93       	st	X, r29
     40e:	17 97       	sbiw	r26, 0x07	; 7
	desc->active = active;
     410:	16 96       	adiw	r26, 0x06	; 6
     412:	1c 93       	st	X, r17
     414:	16 97       	sbiw	r26, 0x06	; 6
	
	switch (port) {
     416:	4c 2f       	mov	r20, r28
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	4b 30       	cpi	r20, 0x0B	; 11
     41c:	51 05       	cpc	r21, r1
     41e:	08 f0       	brcs	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	e9 c0       	rjmp	.+466    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     422:	fa 01       	movw	r30, r20
     424:	88 27       	eor	r24, r24
     426:	ee 58       	subi	r30, 0x8E	; 142
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	8f 4f       	sbci	r24, 0xFF	; 255
     42c:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__tablejump2__>
		case PA:
			desc->ddr = &DDRA;
     430:	81 e2       	ldi	r24, 0x21	; 33
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	11 96       	adiw	r26, 0x01	; 1
     436:	9c 93       	st	X, r25
     438:	8e 93       	st	-X, r24
			desc->pin = &PINA;
     43a:	80 e2       	ldi	r24, 0x20	; 32
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	13 96       	adiw	r26, 0x03	; 3
     440:	9c 93       	st	X, r25
     442:	8e 93       	st	-X, r24
     444:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTA;
     446:	82 e2       	ldi	r24, 0x22	; 34
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	15 96       	adiw	r26, 0x05	; 5
     44c:	9c 93       	st	X, r25
     44e:	8e 93       	st	-X, r24
     450:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     452:	8a 2f       	mov	r24, r26
     454:	9b 2f       	mov	r25, r27
	switch (port) {
		case PA:
			desc->ddr = &DDRA;
			desc->pin = &PINA;
			desc->port = &PORTA;
			break;
     456:	d0 c0       	rjmp	.+416    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PB:
			desc->ddr = &DDRB;
     458:	84 e2       	ldi	r24, 0x24	; 36
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	11 96       	adiw	r26, 0x01	; 1
     45e:	9c 93       	st	X, r25
     460:	8e 93       	st	-X, r24
			desc->pin = &PINB;
     462:	83 e2       	ldi	r24, 0x23	; 35
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	13 96       	adiw	r26, 0x03	; 3
     468:	9c 93       	st	X, r25
     46a:	8e 93       	st	-X, r24
     46c:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTB;
     46e:	85 e2       	ldi	r24, 0x25	; 37
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	15 96       	adiw	r26, 0x05	; 5
     474:	9c 93       	st	X, r25
     476:	8e 93       	st	-X, r24
     478:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     47a:	8a 2f       	mov	r24, r26
     47c:	9b 2f       	mov	r25, r27
			break;
		case PB:
			desc->ddr = &DDRB;
			desc->pin = &PINB;
			desc->port = &PORTB;
			break;
     47e:	bc c0       	rjmp	.+376    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PC:
			desc->ddr = &DDRC;
     480:	87 e2       	ldi	r24, 0x27	; 39
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	11 96       	adiw	r26, 0x01	; 1
     486:	9c 93       	st	X, r25
     488:	8e 93       	st	-X, r24
			desc->pin = &PINC;
     48a:	86 e2       	ldi	r24, 0x26	; 38
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	13 96       	adiw	r26, 0x03	; 3
     490:	9c 93       	st	X, r25
     492:	8e 93       	st	-X, r24
     494:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTC;
     496:	88 e2       	ldi	r24, 0x28	; 40
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	15 96       	adiw	r26, 0x05	; 5
     49c:	9c 93       	st	X, r25
     49e:	8e 93       	st	-X, r24
     4a0:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     4a2:	8a 2f       	mov	r24, r26
     4a4:	9b 2f       	mov	r25, r27
			break;
		case PC:
			desc->ddr = &DDRC;
			desc->pin = &PINC;
			desc->port = &PORTC;
			break;
     4a6:	a8 c0       	rjmp	.+336    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PD:
			desc->ddr = &DDRD;
     4a8:	8a e2       	ldi	r24, 0x2A	; 42
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	9c 93       	st	X, r25
     4b0:	8e 93       	st	-X, r24
			desc->pin = &PIND;
     4b2:	89 e2       	ldi	r24, 0x29	; 41
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	13 96       	adiw	r26, 0x03	; 3
     4b8:	9c 93       	st	X, r25
     4ba:	8e 93       	st	-X, r24
     4bc:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTD;
     4be:	8b e2       	ldi	r24, 0x2B	; 43
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	15 96       	adiw	r26, 0x05	; 5
     4c4:	9c 93       	st	X, r25
     4c6:	8e 93       	st	-X, r24
     4c8:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     4ca:	8a 2f       	mov	r24, r26
     4cc:	9b 2f       	mov	r25, r27
			break;
		case PD:
			desc->ddr = &DDRD;
			desc->pin = &PIND;
			desc->port = &PORTD;
			break;
     4ce:	94 c0       	rjmp	.+296    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PE:
			desc->ddr = &DDRE;
     4d0:	8d e2       	ldi	r24, 0x2D	; 45
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	11 96       	adiw	r26, 0x01	; 1
     4d6:	9c 93       	st	X, r25
     4d8:	8e 93       	st	-X, r24
			desc->pin = &PINE;
     4da:	8c e2       	ldi	r24, 0x2C	; 44
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	13 96       	adiw	r26, 0x03	; 3
     4e0:	9c 93       	st	X, r25
     4e2:	8e 93       	st	-X, r24
     4e4:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTE;
     4e6:	8e e2       	ldi	r24, 0x2E	; 46
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	15 96       	adiw	r26, 0x05	; 5
     4ec:	9c 93       	st	X, r25
     4ee:	8e 93       	st	-X, r24
     4f0:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     4f2:	8a 2f       	mov	r24, r26
     4f4:	9b 2f       	mov	r25, r27
			break;
		case PE:
			desc->ddr = &DDRE;
			desc->pin = &PINE;
			desc->port = &PORTE;
			break;
     4f6:	80 c0       	rjmp	.+256    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PF:
			desc->ddr = &DDRF;
     4f8:	80 e3       	ldi	r24, 0x30	; 48
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	11 96       	adiw	r26, 0x01	; 1
     4fe:	9c 93       	st	X, r25
     500:	8e 93       	st	-X, r24
			desc->pin = &PINF;
     502:	8f e2       	ldi	r24, 0x2F	; 47
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	13 96       	adiw	r26, 0x03	; 3
     508:	9c 93       	st	X, r25
     50a:	8e 93       	st	-X, r24
     50c:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTF;
     50e:	81 e3       	ldi	r24, 0x31	; 49
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	15 96       	adiw	r26, 0x05	; 5
     514:	9c 93       	st	X, r25
     516:	8e 93       	st	-X, r24
     518:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     51a:	8a 2f       	mov	r24, r26
     51c:	9b 2f       	mov	r25, r27
			break;
		case PF:
			desc->ddr = &DDRF;
			desc->pin = &PINF;
			desc->port = &PORTF;
			break;
     51e:	6c c0       	rjmp	.+216    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PG:
			desc->ddr = &DDRG;
     520:	83 e3       	ldi	r24, 0x33	; 51
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	11 96       	adiw	r26, 0x01	; 1
     526:	9c 93       	st	X, r25
     528:	8e 93       	st	-X, r24
			desc->pin = &PING;
     52a:	82 e3       	ldi	r24, 0x32	; 50
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	13 96       	adiw	r26, 0x03	; 3
     530:	9c 93       	st	X, r25
     532:	8e 93       	st	-X, r24
     534:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTG;
     536:	84 e3       	ldi	r24, 0x34	; 52
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	15 96       	adiw	r26, 0x05	; 5
     53c:	9c 93       	st	X, r25
     53e:	8e 93       	st	-X, r24
     540:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     542:	8a 2f       	mov	r24, r26
     544:	9b 2f       	mov	r25, r27
			break;
		case PG:
			desc->ddr = &DDRG;
			desc->pin = &PING;
			desc->port = &PORTG;
			break;
     546:	58 c0       	rjmp	.+176    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PH:
			desc->ddr = &DDRH;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	11 96       	adiw	r26, 0x01	; 1
     54e:	9c 93       	st	X, r25
     550:	8e 93       	st	-X, r24
			desc->pin = &PINH;
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	13 96       	adiw	r26, 0x03	; 3
     558:	9c 93       	st	X, r25
     55a:	8e 93       	st	-X, r24
     55c:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTH;
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	15 96       	adiw	r26, 0x05	; 5
     564:	9c 93       	st	X, r25
     566:	8e 93       	st	-X, r24
     568:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     56a:	8a 2f       	mov	r24, r26
     56c:	9b 2f       	mov	r25, r27
			break;
		case PH:
			desc->ddr = &DDRH;
			desc->pin = &PINH;
			desc->port = &PORTH;
			break;
     56e:	44 c0       	rjmp	.+136    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PJ:
			desc->ddr = &DDRJ;
     570:	84 e0       	ldi	r24, 0x04	; 4
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	9c 93       	st	X, r25
     578:	8e 93       	st	-X, r24
			desc->pin = &PINJ;
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	13 96       	adiw	r26, 0x03	; 3
     580:	9c 93       	st	X, r25
     582:	8e 93       	st	-X, r24
     584:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTJ;
     586:	85 e0       	ldi	r24, 0x05	; 5
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	15 96       	adiw	r26, 0x05	; 5
     58c:	9c 93       	st	X, r25
     58e:	8e 93       	st	-X, r24
     590:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     592:	8a 2f       	mov	r24, r26
     594:	9b 2f       	mov	r25, r27
			break;
		case PJ:
			desc->ddr = &DDRJ;
			desc->pin = &PINJ;
			desc->port = &PORTJ;
			break;
     596:	30 c0       	rjmp	.+96     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PK:
			desc->ddr = &DDRK;
     598:	87 e0       	ldi	r24, 0x07	; 7
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	11 96       	adiw	r26, 0x01	; 1
     59e:	9c 93       	st	X, r25
     5a0:	8e 93       	st	-X, r24
			desc->pin = &PINK;
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	13 96       	adiw	r26, 0x03	; 3
     5a8:	9c 93       	st	X, r25
     5aa:	8e 93       	st	-X, r24
     5ac:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTK;
     5ae:	88 e0       	ldi	r24, 0x08	; 8
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	15 96       	adiw	r26, 0x05	; 5
     5b4:	9c 93       	st	X, r25
     5b6:	8e 93       	st	-X, r24
     5b8:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     5ba:	8a 2f       	mov	r24, r26
     5bc:	9b 2f       	mov	r25, r27
			break;
		case PK:
			desc->ddr = &DDRK;
			desc->pin = &PINK;
			desc->port = &PORTK;
			break;
     5be:	1c c0       	rjmp	.+56     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		case PL:
			desc->ddr = &DDRL;
     5c0:	8a e0       	ldi	r24, 0x0A	; 10
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	11 96       	adiw	r26, 0x01	; 1
     5c6:	9c 93       	st	X, r25
     5c8:	8e 93       	st	-X, r24
			desc->pin = &PINL;
     5ca:	89 e0       	ldi	r24, 0x09	; 9
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	13 96       	adiw	r26, 0x03	; 3
     5d0:	9c 93       	st	X, r25
     5d2:	8e 93       	st	-X, r24
     5d4:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTL;
     5d6:	8b e0       	ldi	r24, 0x0B	; 11
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	15 96       	adiw	r26, 0x05	; 5
     5dc:	9c 93       	st	X, r25
     5de:	8e 93       	st	-X, r24
     5e0:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     5e2:	8a 2f       	mov	r24, r26
     5e4:	9b 2f       	mov	r25, r27
			break;
		case PL:
			desc->ddr = &DDRL;
			desc->pin = &PINL;
			desc->port = &PORTL;
			break;
     5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
	// Reserving memory.
	io_descriptor_t desc = malloc(sizeof(io_desc_st));
	
	// Checking that memory is reserved.
	if (0 == desc) {
		return 0;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
	}
	
	// Input validation.
	if (!(bit >= 0 && bit <= 7)) {
		return 0;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
			desc->ddr = &DDRL;
			desc->pin = &PINL;
			desc->port = &PORTL;
			break;
		default:
			return 0;
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return desc;
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	08 95       	ret

00000600 <key_init>:
#include "../include/key.h"

static io_descriptor_t keys[K_NO];

void key_init(io_definition_t io[])
{
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	6c 01       	movw	r12, r24
	for (uint8_t i = 0; i < K_NO; i++)
     610:	f1 2c       	mov	r15, r1
     612:	13 c0       	rjmp	.+38     	; 0x63a <key_init+0x3a>
	{
		keys[i] = input_init(io[i].port, io[i].pin, K_ACTIVE_STATE, K_PULL_UP_STATE, NULL);
     614:	cf 2d       	mov	r28, r15
     616:	d0 e0       	ldi	r29, 0x00	; 0
     618:	cc 0f       	add	r28, r28
     61a:	dd 1f       	adc	r29, r29
     61c:	f6 01       	movw	r30, r12
     61e:	ec 0f       	add	r30, r28
     620:	fd 1f       	adc	r31, r29
     622:	00 e0       	ldi	r16, 0x00	; 0
     624:	10 e0       	ldi	r17, 0x00	; 0
     626:	21 e0       	ldi	r18, 0x01	; 1
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	61 81       	ldd	r22, Z+1	; 0x01
     62c:	80 81       	ld	r24, Z
     62e:	29 de       	rcall	.-942    	; 0x282 <input_init>
     630:	c4 5b       	subi	r28, 0xB4	; 180
     632:	dd 4f       	sbci	r29, 0xFD	; 253
     634:	99 83       	std	Y+1, r25	; 0x01
     636:	88 83       	st	Y, r24

static io_descriptor_t keys[K_NO];

void key_init(io_definition_t io[])
{
	for (uint8_t i = 0; i < K_NO; i++)
     638:	f3 94       	inc	r15
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	8f 15       	cp	r24, r15
     63e:	50 f7       	brcc	.-44     	; 0x614 <key_init+0x14>
	{
		keys[i] = input_init(io[i].port, io[i].pin, K_ACTIVE_STATE, K_PULL_UP_STATE, NULL);
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	08 95       	ret

00000650 <key_get>:

uint8_t key_get(uint8_t key_no)
{
	if((key_no >= 1) && (key_no <= 8))
     650:	81 50       	subi	r24, 0x01	; 1
     652:	88 30       	cpi	r24, 0x08	; 8
     654:	50 f4       	brcc	.+20     	; 0x66a <key_get+0x1a>
	{
		key_no--;	// Convert key number to index
		
		return input_activated(keys[key_no]);
     656:	e8 2f       	mov	r30, r24
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	e4 5b       	subi	r30, 0xB4	; 180
     660:	fd 4f       	sbci	r31, 0xFD	; 253
     662:	80 81       	ld	r24, Z
     664:	91 81       	ldd	r25, Z+1	; 0x01
     666:	41 ce       	rjmp	.-894    	; 0x2ea <input_activated>
     668:	08 95       	ret
	}
	return 0;
     66a:	80 e0       	ldi	r24, 0x00	; 0
}
     66c:	08 95       	ret

0000066e <key_scan>:

uint8_t key_scan()
{
     66e:	cf 93       	push	r28
	for(uint8_t i = 1; i <= K_NO; i++)
     670:	c1 e0       	ldi	r28, 0x01	; 1
     672:	05 c0       	rjmp	.+10     	; 0x67e <key_scan+0x10>
	{
		if(key_get(i))
     674:	8c 2f       	mov	r24, r28
     676:	ec df       	rcall	.-40     	; 0x650 <key_get>
     678:	81 11       	cpse	r24, r1
     67a:	05 c0       	rjmp	.+10     	; 0x686 <key_scan+0x18>
	return 0;
}

uint8_t key_scan()
{
	for(uint8_t i = 1; i <= K_NO; i++)
     67c:	cf 5f       	subi	r28, 0xFF	; 255
     67e:	c4 30       	cpi	r28, 0x04	; 4
     680:	c8 f3       	brcs	.-14     	; 0x674 <key_scan+0x6>
		if(key_get(i))
		{
			return i;
		}
	}
	return 0;
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	01 c0       	rjmp	.+2      	; 0x688 <key_scan+0x1a>
{
	for(uint8_t i = 1; i <= K_NO; i++)
	{
		if(key_get(i))
		{
			return i;
     686:	8c 2f       	mov	r24, r28
		}
	}
	return 0;
}
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <led_init>:
#include "../../digital_output/include/digital_output.h"

static io_descriptor_t leds[L_NO];

void led_init(io_definition_t io[])
{	
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	7c 01       	movw	r14, r24
	for (uint8_t i = 0; i < L_NO; i++)
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	11 c0       	rjmp	.+34     	; 0x6be <led_init+0x32>
	{
		leds[i] = output_init(io[i].port, io[i].pin, L_ACTIVE_STATE, L_DEFAULT_STATE);
     69c:	c1 2f       	mov	r28, r17
     69e:	d0 e0       	ldi	r29, 0x00	; 0
     6a0:	cc 0f       	add	r28, r28
     6a2:	dd 1f       	adc	r29, r29
     6a4:	f7 01       	movw	r30, r14
     6a6:	ec 0f       	add	r30, r28
     6a8:	fd 1f       	adc	r31, r29
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	61 81       	ldd	r22, Z+1	; 0x01
     6b0:	80 81       	ld	r24, Z
     6b2:	99 dd       	rcall	.-1230   	; 0x1e6 <output_init>
     6b4:	ce 5a       	subi	r28, 0xAE	; 174
     6b6:	dd 4f       	sbci	r29, 0xFD	; 253
     6b8:	99 83       	std	Y+1, r25	; 0x01
     6ba:	88 83       	st	Y, r24

static io_descriptor_t leds[L_NO];

void led_init(io_definition_t io[])
{	
	for (uint8_t i = 0; i < L_NO; i++)
     6bc:	1f 5f       	subi	r17, 0xFF	; 255
     6be:	18 30       	cpi	r17, 0x08	; 8
     6c0:	68 f3       	brcs	.-38     	; 0x69c <led_init+0x10>
	{
		leds[i] = output_init(io[i].port, io[i].pin, L_ACTIVE_STATE, L_DEFAULT_STATE);
	}
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret

000006ce <configure_io>:
	{KEYPAD_7, KEYPAD_8, KEYPAD_9, KEYPAD_C},
	{KEYPAD_ASTRIX, KEYPAD_0, KEYPAD_NO, KEYPAD_D},
};

static void configure_io()
{
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
	row[0] = output_init(PAD_R1_PORT, PAD_R1_PIN, ACTIVE_LOW, INACTIVE);
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	67 e0       	ldi	r22, 0x07	; 7
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	83 dd       	rcall	.-1274   	; 0x1e6 <output_init>
     6e0:	ca e6       	ldi	r28, 0x6A	; 106
     6e2:	d2 e0       	ldi	r29, 0x02	; 2
     6e4:	99 83       	std	Y+1, r25	; 0x01
     6e6:	88 83       	st	Y, r24
	row[1] = output_init(PAD_R2_PORT, PAD_R2_PIN, ACTIVE_LOW, INACTIVE);
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	65 e0       	ldi	r22, 0x05	; 5
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	7a dd       	rcall	.-1292   	; 0x1e6 <output_init>
     6f2:	9b 83       	std	Y+3, r25	; 0x03
     6f4:	8a 83       	std	Y+2, r24	; 0x02
	row[2] = output_init(PAD_R3_PORT, PAD_R3_PIN, ACTIVE_LOW, INACTIVE);
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	64 e0       	ldi	r22, 0x04	; 4
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	73 dd       	rcall	.-1306   	; 0x1e6 <output_init>
     700:	9d 83       	std	Y+5, r25	; 0x05
     702:	8c 83       	std	Y+4, r24	; 0x04
	row[3] = output_init(PAD_R4_PORT, PAD_R4_PIN, ACTIVE_LOW, INACTIVE);
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	63 e0       	ldi	r22, 0x03	; 3
     70a:	84 e0       	ldi	r24, 0x04	; 4
     70c:	6c dd       	rcall	.-1320   	; 0x1e6 <output_init>
     70e:	9f 83       	std	Y+7, r25	; 0x07
     710:	8e 83       	std	Y+6, r24	; 0x06
	
	col[0] = input_init(PAD_C1_PORT, PAD_C1_PIN, ACTIVE_LOW, PAD_COL_PULL_UP, 0);
     712:	00 e0       	ldi	r16, 0x00	; 0
     714:	10 e0       	ldi	r17, 0x00	; 0
     716:	21 e0       	ldi	r18, 0x01	; 1
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	65 e0       	ldi	r22, 0x05	; 5
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	b1 dd       	rcall	.-1182   	; 0x282 <input_init>
     720:	c2 e6       	ldi	r28, 0x62	; 98
     722:	d2 e0       	ldi	r29, 0x02	; 2
     724:	99 83       	std	Y+1, r25	; 0x01
     726:	88 83       	st	Y, r24
	col[1] = input_init(PAD_C2_PORT, PAD_C2_PIN, ACTIVE_LOW, PAD_COL_PULL_UP, 0);
     728:	21 e0       	ldi	r18, 0x01	; 1
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	63 e0       	ldi	r22, 0x03	; 3
     72e:	87 e0       	ldi	r24, 0x07	; 7
     730:	a8 dd       	rcall	.-1200   	; 0x282 <input_init>
     732:	9b 83       	std	Y+3, r25	; 0x03
     734:	8a 83       	std	Y+2, r24	; 0x02
	col[2] = input_init(PAD_C3_PORT, PAD_C3_PIN, ACTIVE_LOW, PAD_COL_PULL_UP, 0);
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	65 e0       	ldi	r22, 0x05	; 5
     73c:	87 e0       	ldi	r24, 0x07	; 7
     73e:	a1 dd       	rcall	.-1214   	; 0x282 <input_init>
     740:	9d 83       	std	Y+5, r25	; 0x05
     742:	8c 83       	std	Y+4, r24	; 0x04
	col[3] = input_init(PAD_C4_PORT, PAD_C4_PIN, ACTIVE_LOW, PAD_COL_PULL_UP, 0);
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	8a e0       	ldi	r24, 0x0A	; 10
     74c:	9a dd       	rcall	.-1228   	; 0x282 <input_init>
     74e:	9f 83       	std	Y+7, r25	; 0x07
     750:	8e 83       	std	Y+6, r24	; 0x06
     752:	df 91       	pop	r29
}
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	08 95       	ret

0000075c <matrix_keypad_init>:
     75c:	b8 cf       	rjmp	.-144    	; 0x6ce <configure_io>

void matrix_keypad_init()
{
	configure_io();
     75e:	08 95       	ret

00000760 <matrix_keypad_get_x>:
}

int8_t matrix_keypad_get_x()
{
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
	
	for (uint8_t r = 0; r < PAD_SIZE; r++)
     76c:	d0 e0       	ldi	r29, 0x00	; 0
     76e:	3b c0       	rjmp	.+118    	; 0x7e6 <matrix_keypad_get_x+0x86>
	{
		output_set_state(row[r], ACTIVE);
     770:	ed 2e       	mov	r14, r29
     772:	f1 2c       	mov	r15, r1
     774:	f7 01       	movw	r30, r14
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	e6 59       	subi	r30, 0x96	; 150
     77c:	fd 4f       	sbci	r31, 0xFD	; 253
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	ed dc       	rcall	.-1574   	; 0x160 <output_set_state>
		for (uint8_t c = 0; c < PAD_SIZE; c++)
     786:	c0 e0       	ldi	r28, 0x00	; 0
     788:	22 c0       	rjmp	.+68     	; 0x7ce <matrix_keypad_get_x+0x6e>
		{
			if (input_activated(col[c])){
     78a:	0c 2f       	mov	r16, r28
     78c:	10 e0       	ldi	r17, 0x00	; 0
     78e:	f8 01       	movw	r30, r16
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	ee 59       	subi	r30, 0x9E	; 158
     796:	fd 4f       	sbci	r31, 0xFD	; 253
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	a6 dd       	rcall	.-1204   	; 0x2ea <input_activated>
     79e:	88 23       	and	r24, r24
     7a0:	a9 f0       	breq	.+42     	; 0x7cc <matrix_keypad_get_x+0x6c>
				output_set_state(row[r], INACTIVE);
     7a2:	f7 01       	movw	r30, r14
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	e6 59       	subi	r30, 0x96	; 150
     7aa:	fd 4f       	sbci	r31, 0xFD	; 253
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	91 81       	ldd	r25, Z+1	; 0x01
     7b2:	d6 dc       	rcall	.-1620   	; 0x160 <output_set_state>
				return keypad[r][c];
     7b4:	c7 01       	movw	r24, r14
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	87 5d       	subi	r24, 0xD7	; 215
     7c0:	9d 4f       	sbci	r25, 0xFD	; 253
     7c2:	fc 01       	movw	r30, r24
     7c4:	e0 0f       	add	r30, r16
     7c6:	f1 1f       	adc	r31, r17
     7c8:	80 81       	ld	r24, Z
     7ca:	11 c0       	rjmp	.+34     	; 0x7ee <matrix_keypad_get_x+0x8e>
{
	
	for (uint8_t r = 0; r < PAD_SIZE; r++)
	{
		output_set_state(row[r], ACTIVE);
		for (uint8_t c = 0; c < PAD_SIZE; c++)
     7cc:	cf 5f       	subi	r28, 0xFF	; 255
     7ce:	c4 30       	cpi	r28, 0x04	; 4
     7d0:	e0 f2       	brcs	.-72     	; 0x78a <matrix_keypad_get_x+0x2a>
			if (input_activated(col[c])){
				output_set_state(row[r], INACTIVE);
				return keypad[r][c];
			}
		}	
		output_set_state(row[r], INACTIVE);
     7d2:	f7 01       	movw	r30, r14
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	e6 59       	subi	r30, 0x96	; 150
     7da:	fd 4f       	sbci	r31, 0xFD	; 253
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	be dc       	rcall	.-1668   	; 0x160 <output_set_state>
}

int8_t matrix_keypad_get_x()
{
	
	for (uint8_t r = 0; r < PAD_SIZE; r++)
     7e4:	df 5f       	subi	r29, 0xFF	; 255
     7e6:	d4 30       	cpi	r29, 0x04	; 4
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <matrix_keypad_get_x+0x8c>
     7ea:	c2 cf       	rjmp	.-124    	; 0x770 <matrix_keypad_get_x+0x10>
				return keypad[r][c];
			}
		}	
		output_set_state(row[r], INACTIVE);
	}
	return KEYPAD_INACTIVE;
     7ec:	8f e7       	ldi	r24, 0x7F	; 127
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	08 95       	ret

000007fc <pump_init>:

static io_descriptor_t pump;

void pump_init()
{
	pump = output_init(P_PORT, P_PIN, P_ACTIVE_STATE, P_DEFAULT_STATE);
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	f0 dc       	rcall	.-1568   	; 0x1e6 <output_init>
     806:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <pump+0x1>
     80a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <pump>
     80e:	08 95       	ret

00000810 <pump_start>:
}

return_code_t pump_start()
{
	return output_set_state(pump, ACTIVE);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <pump>
     816:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <pump+0x1>
     81a:	a2 cc       	rjmp	.-1724   	; 0x160 <output_set_state>
}
     81c:	08 95       	ret

0000081e <pump_stop>:

return_code_t pump_stop()
{
	return output_set_state(pump, INACTIVE);
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <pump>
     824:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <pump+0x1>
     828:	9b cc       	rjmp	.-1738   	; 0x160 <output_set_state>
     82a:	08 95       	ret

0000082c <set_refresh_rate>:
 

static void set_refresh_rate() 
{
	// Set timer toggle on compare match
	TCCR4A |= _BV(COM4A0);
     82c:	e0 ea       	ldi	r30, 0xA0	; 160
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	80 64       	ori	r24, 0x40	; 64
     834:	80 83       	st	Z, r24
	
	// Set prescaler 8
	TCCR4B |= _BV(CS41);
     836:	e1 ea       	ldi	r30, 0xA1	; 161
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	82 60       	ori	r24, 0x02	; 2
     83e:	80 83       	st	Z, r24
	
	// Set to Clear timer on compare match (CTC mode)
	TCCR4B |= _BV(WGM42);
     840:	80 81       	ld	r24, Z
     842:	88 60       	ori	r24, 0x08	; 8
     844:	80 83       	st	Z, r24
	
	// Enable Timer interrupt
	TIMSK4 |= _BV(OCIE4A);
     846:	e2 e7       	ldi	r30, 0x72	; 114
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	82 60       	ori	r24, 0x02	; 2
     84e:	80 83       	st	Z, r24
	
	// Set timer frequency 60Hz/digit (16000000 / (2*60*4*8))-1 = 4165.6
	OCR4A = 4166;
     850:	86 e4       	ldi	r24, 0x46	; 70
     852:	90 e1       	ldi	r25, 0x10	; 16
     854:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     858:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     85c:	08 95       	ret

0000085e <configure_spi>:
}

static void configure_spi()
{
	// Setup CPOL functionality to sample at rising edge.
	SPCR &= ~ (_BV(CPOL) | _BV(CPHA));
     85e:	8c b5       	in	r24, 0x2c	; 44
     860:	83 7f       	andi	r24, 0xF3	; 243
     862:	8c bd       	out	0x2c, r24	; 44
	
	// DORD 0 OR 1: start from least significant bit or opposite.
	SPCR |=_BV(DORD);
     864:	8c b5       	in	r24, 0x2c	; 44
     866:	80 62       	ori	r24, 0x20	; 32
     868:	8c bd       	out	0x2c, r24	; 44
	
	// Set Master.
	SPCR |= _BV(MSTR);
     86a:	8c b5       	in	r24, 0x2c	; 44
     86c:	80 61       	ori	r24, 0x10	; 16
     86e:	8c bd       	out	0x2c, r24	; 44
	
	// Set SCK frequency to Fosc/128.
	SPCR |= _BV(SPR1) | _BV(SPR0);
     870:	8c b5       	in	r24, 0x2c	; 44
     872:	83 60       	ori	r24, 0x03	; 3
     874:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~_BV(SPI2X);
     876:	8d b5       	in	r24, 0x2d	; 45
     878:	8e 7f       	andi	r24, 0xFE	; 254
     87a:	8d bd       	out	0x2d, r24	; 45
	
	// Enable SPI.
	SPCR |= _BV(SPE);
     87c:	8c b5       	in	r24, 0x2c	; 44
     87e:	80 64       	ori	r24, 0x40	; 64
     880:	8c bd       	out	0x2c, r24	; 44
     882:	08 95       	ret

00000884 <get_display_code>:
// Returns display code equivalent to digit value.
// If a zero is found, it will determine if it should return code equivalent to 0 or turn off the segment based on values in more significant segments.
static uint8_t get_display_code(uint8_t segment)
{
	// Least significant segment is allowed to be zero.
	if (segment == D_NO_SEGMENTS - 1)
     884:	83 30       	cpi	r24, 0x03	; 3
     886:	51 f4       	brne	.+20     	; 0x89c <get_display_code+0x18>
		return display_code[digits[segment]];
     888:	e8 2f       	mov	r30, r24
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	ea 57       	subi	r30, 0x7A	; 122
     88e:	fd 4f       	sbci	r31, 0xFD	; 253
     890:	e0 81       	ld	r30, Z
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	e3 5c       	subi	r30, 0xC3	; 195
     896:	fd 4f       	sbci	r31, 0xFD	; 253
     898:	80 81       	ld	r24, Z
     89a:	08 95       	ret
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
     89c:	e8 2f       	mov	r30, r24
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	ea 57       	subi	r30, 0x7A	; 122
     8a2:	fd 4f       	sbci	r31, 0xFD	; 253
     8a4:	e0 81       	ld	r30, Z
     8a6:	e1 11       	cpse	r30, r1
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <get_display_code+0x2e>
     8aa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leading_zeros>
     8ae:	81 11       	cpse	r24, r1
     8b0:	0a c0       	rjmp	.+20     	; 0x8c6 <get_display_code+0x42>
		return BLANK_DIGIT;
	
	// First time a non-zero value is found leading zeros will be false. 
	// This effectively returns less significant zeros to display code equivalent to zero instead of having them turned off.
	if (leading_zeros)
     8b2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leading_zeros>
     8b6:	81 11       	cpse	r24, r1
		leading_zeros = 0;
     8b8:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <leading_zeros>

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	e3 5c       	subi	r30, 0xC3	; 195
     8c0:	fd 4f       	sbci	r31, 0xFD	; 253
     8c2:	80 81       	ld	r24, Z
     8c4:	08 95       	ret
	if (segment == D_NO_SEGMENTS - 1)
		return display_code[digits[segment]];
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
		return BLANK_DIGIT;
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
	if (leading_zeros)
		leading_zeros = 0;

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
}
     8c8:	08 95       	ret

000008ca <set_display_code>:

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
	leading_zeros = 1;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leading_zeros>
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++) 
     8d6:	c0 e0       	ldi	r28, 0x00	; 0
     8d8:	09 c0       	rjmp	.+18     	; 0x8ec <set_display_code+0x22>
		display[i] = get_display_code(i);
     8da:	0c 2f       	mov	r16, r28
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	8c 2f       	mov	r24, r28
     8e0:	d1 df       	rcall	.-94     	; 0x884 <get_display_code>
     8e2:	f8 01       	movw	r30, r16
     8e4:	ee 57       	subi	r30, 0x7E	; 126
     8e6:	fd 4f       	sbci	r31, 0xFD	; 253
     8e8:	80 83       	st	Z, r24
}

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
	leading_zeros = 1;
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++) 
     8ea:	cf 5f       	subi	r28, 0xFF	; 255
     8ec:	c4 30       	cpi	r28, 0x04	; 4
     8ee:	a8 f3       	brcs	.-22     	; 0x8da <set_display_code+0x10>
		display[i] = get_display_code(i);
}
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	08 95       	ret

000008f8 <split_digits>:

// Splits number into separate digits.
static void split_digits(uint16_t value, uint8_t digit) 
{	
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	fc 01       	movw	r30, r24
	// Base case - Done.
	if (digit == 0)
     8fe:	61 11       	cpse	r22, r1
     900:	1f c0       	rjmp	.+62     	; 0x940 <split_digits+0x48>
		digits[digit] = value % 10;
     902:	46 2f       	mov	r20, r22
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	9c 01       	movw	r18, r24
     908:	ad ec       	ldi	r26, 0xCD	; 205
     90a:	bc ec       	ldi	r27, 0xCC	; 204
     90c:	d2 d6       	rcall	.+3492   	; 0x16b2 <__umulhisi3>
     90e:	96 95       	lsr	r25
     910:	87 95       	ror	r24
     912:	96 95       	lsr	r25
     914:	87 95       	ror	r24
     916:	96 95       	lsr	r25
     918:	87 95       	ror	r24
     91a:	9c 01       	movw	r18, r24
     91c:	22 0f       	add	r18, r18
     91e:	33 1f       	adc	r19, r19
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	82 0f       	add	r24, r18
     92e:	93 1f       	adc	r25, r19
     930:	9f 01       	movw	r18, r30
     932:	28 1b       	sub	r18, r24
     934:	39 0b       	sbc	r19, r25
     936:	fa 01       	movw	r30, r20
     938:	ea 57       	subi	r30, 0x7A	; 122
     93a:	fd 4f       	sbci	r31, 0xFD	; 253
     93c:	20 83       	st	Z, r18
     93e:	29 c0       	rjmp	.+82     	; 0x992 <split_digits+0x9a>
     940:	46 2f       	mov	r20, r22
	else {
		digits[digit] = value % 10;
     942:	c6 2f       	mov	r28, r22
     944:	d0 e0       	ldi	r29, 0x00	; 0
     946:	9c 01       	movw	r18, r24
     948:	ad ec       	ldi	r26, 0xCD	; 205
     94a:	bc ec       	ldi	r27, 0xCC	; 204
     94c:	b2 d6       	rcall	.+3428   	; 0x16b2 <__umulhisi3>
     94e:	96 95       	lsr	r25
     950:	87 95       	ror	r24
     952:	96 95       	lsr	r25
     954:	87 95       	ror	r24
     956:	96 95       	lsr	r25
     958:	87 95       	ror	r24
     95a:	9c 01       	movw	r18, r24
     95c:	22 0f       	add	r18, r18
     95e:	33 1f       	adc	r19, r19
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	82 0f       	add	r24, r18
     96e:	93 1f       	adc	r25, r19
     970:	9f 01       	movw	r18, r30
     972:	28 1b       	sub	r18, r24
     974:	39 0b       	sbc	r19, r25
     976:	ca 57       	subi	r28, 0x7A	; 122
     978:	dd 4f       	sbci	r29, 0xFD	; 253
     97a:	28 83       	st	Y, r18
		value = value / 10;
     97c:	9f 01       	movw	r18, r30
     97e:	99 d6       	rcall	.+3378   	; 0x16b2 <__umulhisi3>
     980:	6f ef       	ldi	r22, 0xFF	; 255
		
		// Recurse until done.
		digit--;
     982:	64 0f       	add	r22, r20
     984:	96 95       	lsr	r25
		split_digits(value, digit);
     986:	87 95       	ror	r24
     988:	96 95       	lsr	r25
     98a:	87 95       	ror	r24
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	b3 df       	rcall	.-154    	; 0x8f8 <split_digits>
     992:	df 91       	pop	r29
	}
}
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <increment_current_segment>:
     998:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <current_segment>
	}
}

static void increment_current_segment()
{
	current_segment = (current_segment + 1) % D_NO_SEGMENTS;
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	83 70       	andi	r24, 0x03	; 3
     9a2:	90 78       	andi	r25, 0x80	; 128
     9a4:	99 23       	and	r25, r25
     9a6:	24 f4       	brge	.+8      	; 0x9b0 <increment_current_segment+0x18>
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	8c 6f       	ori	r24, 0xFC	; 252
     9ac:	9f 6f       	ori	r25, 0xFF	; 255
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <current_segment>
     9b4:	08 95       	ret

000009b6 <configure_outputs>:
	// Enable SPI.
	SPCR |= _BV(SPE);
}

static void configure_outputs()
{
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
	d_segments[0] =output_init(D_7_D1_PORT, D_7_D1_PIN, D_7_DN_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	85 e0       	ldi	r24, 0x05	; 5
     9c2:	11 dc       	rcall	.-2014   	; 0x1e6 <output_init>
     9c4:	ca e7       	ldi	r28, 0x7A	; 122
     9c6:	d2 e0       	ldi	r29, 0x02	; 2
     9c8:	99 83       	std	Y+1, r25	; 0x01
     9ca:	88 83       	st	Y, r24
	d_segments[1] =output_init(D_7_D2_PORT, D_7_D2_PIN, D_7_DN_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	85 e0       	ldi	r24, 0x05	; 5
     9d4:	08 dc       	rcall	.-2032   	; 0x1e6 <output_init>
     9d6:	9b 83       	std	Y+3, r25	; 0x03
     9d8:	8a 83       	std	Y+2, r24	; 0x02
	d_segments[2] =output_init(D_7_D3_PORT, D_7_D3_PIN, D_7_DN_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	01 dc       	rcall	.-2046   	; 0x1e6 <output_init>
     9e4:	9d 83       	std	Y+5, r25	; 0x05
     9e6:	8c 83       	std	Y+4, r24	; 0x04
	d_segments[3] =output_init(D_7_D4_PORT, D_7_D4_PIN, D_7_DN_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	63 e0       	ldi	r22, 0x03	; 3
     9ee:	85 e0       	ldi	r24, 0x05	; 5
     9f0:	fa db       	rcall	.-2060   	; 0x1e6 <output_init>
     9f2:	9f 83       	std	Y+7, r25	; 0x07
     9f4:	8e 83       	std	Y+6, r24	; 0x06

	d_rck = output_init(D_7_RCK_PORT, D_7_RCK_PIN, D_7_RCK_ACTIVE_STATE, D_7_RCK_DEFAULT_STATE);
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	f3 db       	rcall	.-2074   	; 0x1e6 <output_init>
     a00:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <d_rck+0x1>
     a04:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <d_rck>
	d_sck = output_init(D_7_SCK_PORT, D_7_SCK_PIN, D_7_SCK_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	ea db       	rcall	.-2092   	; 0x1e6 <output_init>
     a12:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <d_sck+0x1>
     a16:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <d_sck>
	d_si = output_init(D_7_SI_PORT, D_7_SI_PIN, D_7_SI_ACTIVE_STATE, D_7_SI_DEFAULT_STATE);
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	62 e0       	ldi	r22, 0x02	; 2
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	e1 db       	rcall	.-2110   	; 0x1e6 <output_init>
     a24:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <d_si+0x1>
     a28:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <d_si>
     a2c:	df 91       	pop	r29
}
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <turn_off_all_segments>:
     a32:	cf 93       	push	r28
	}
}

static void turn_off_all_segments()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     a34:	c0 e0       	ldi	r28, 0x00	; 0
     a36:	0b c0       	rjmp	.+22     	; 0xa4e <turn_off_all_segments+0x1c>
	{
		output_set_state(d_segments[i], INACTIVE);
     a38:	ec 2f       	mov	r30, r28
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	e6 58       	subi	r30, 0x86	; 134
     a42:	fd 4f       	sbci	r31, 0xFD	; 253
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	8a db       	rcall	.-2284   	; 0x160 <output_set_state>
	}
}

static void turn_off_all_segments()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     a4c:	cf 5f       	subi	r28, 0xFF	; 255
     a4e:	c4 30       	cpi	r28, 0x04	; 4
     a50:	98 f3       	brcs	.-26     	; 0xa38 <turn_off_all_segments+0x6>
	{
		output_set_state(d_segments[i], INACTIVE);
	}
}
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <toggle_pin>:


static void toggle_pin(io_descriptor_t pin)
{
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	ec 01       	movw	r28, r24
	output_set_state(pin, ACTIVE);
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	80 db       	rcall	.-2304   	; 0x160 <output_set_state>
	output_set_state(pin, INACTIVE);
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	ce 01       	movw	r24, r28
     a64:	7d db       	rcall	.-2310   	; 0x160 <output_set_state>
}
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <transfer_next_to_display>:

static void transfer_next_to_display()
{
	if (communication == SPI)
	// Load Shift register
	SPDR = display[current_segment];
     a6c:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <current_segment>
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	ee 57       	subi	r30, 0x7E	; 126
     a74:	fd 4f       	sbci	r31, 0xFD	; 253
     a76:	80 81       	ld	r24, Z
     a78:	8e bd       	out	0x2e, r24	; 46
     a7a:	08 95       	ret

00000a7c <display_init>:
}


void display_init() 
{
	configure_outputs();
     a7c:	9c df       	rcall	.-200    	; 0x9b6 <configure_outputs>
	
	if (communication == SPI) {
		configure_spi();
     a7e:	ef de       	rcall	.-546    	; 0x85e <configure_spi>
	}
	
	// Initializes timer and interrupt
	set_refresh_rate();
     a80:	d5 ce       	rjmp	.-598    	; 0x82c <set_refresh_rate>
     a82:	08 95       	ret

00000a84 <display_print_uint_4>:
     a84:	63 e0       	ldi	r22, 0x03	; 3

// Input from application
void display_print_uint_4(uint16_t value) 
{
	// Split digits from least significant value.
	split_digits(value, D_NO_SEGMENTS - 1);
     a86:	38 df       	rcall	.-400    	; 0x8f8 <split_digits>
	set_display_code();
     a88:	20 cf       	rjmp	.-448    	; 0x8ca <set_display_code>
     a8a:	08 95       	ret

00000a8c <display_save>:
     a8c:	20 e0       	ldi	r18, 0x00	; 0
}

void display_save()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     a8e:	0b c0       	rjmp	.+22     	; 0xaa6 <display_save+0x1a>
	{
		display[i] = display_code_save[i];
     a90:	82 2f       	mov	r24, r18
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	fc 01       	movw	r30, r24
     a96:	e7 5c       	subi	r30, 0xC7	; 199
     a98:	fd 4f       	sbci	r31, 0xFD	; 253
     a9a:	30 81       	ld	r19, Z
     a9c:	fc 01       	movw	r30, r24
     a9e:	ee 57       	subi	r30, 0x7E	; 126
     aa0:	fd 4f       	sbci	r31, 0xFD	; 253
     aa2:	30 83       	st	Z, r19
	set_display_code();
}

void display_save()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     aa4:	2f 5f       	subi	r18, 0xFF	; 255
     aa6:	24 30       	cpi	r18, 0x04	; 4
     aa8:	98 f3       	brcs	.-26     	; 0xa90 <display_save+0x4>
	{
		display[i] = display_code_save[i];
	}
}
     aaa:	08 95       	ret

00000aac <__vector_42>:
{
	current_segment = (current_segment + 1) % D_NO_SEGMENTS;
}

ISR(TIMER4_COMPA_vect)
{		
     aac:	1f 92       	push	r1
     aae:	0f 92       	push	r0
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	0f 92       	push	r0
     ab4:	11 24       	eor	r1, r1
     ab6:	0b b6       	in	r0, 0x3b	; 59
     ab8:	0f 92       	push	r0
     aba:	2f 93       	push	r18
     abc:	3f 93       	push	r19
     abe:	4f 93       	push	r20
     ac0:	5f 93       	push	r21
     ac2:	6f 93       	push	r22
     ac4:	7f 93       	push	r23
     ac6:	8f 93       	push	r24
     ac8:	9f 93       	push	r25
     aca:	af 93       	push	r26
     acc:	bf 93       	push	r27
     ace:	ef 93       	push	r30
     ad0:	ff 93       	push	r31
	turn_off_all_segments();
     ad2:	af df       	rcall	.-162    	; 0xa32 <turn_off_all_segments>
	
	// Move into storage register.
	toggle_pin(d_rck);
     ad4:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <d_rck>
     ad8:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <d_rck+0x1>
     adc:	bc df       	rcall	.-136    	; 0xa56 <toggle_pin>
		
	// Turn on current segment.
	output_set_state(d_segments[current_segment], ACTIVE);
     ade:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <current_segment>
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	e6 58       	subi	r30, 0x86	; 134
     aea:	fd 4f       	sbci	r31, 0xFD	; 253
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
	
	increment_current_segment();
     af2:	36 db       	rcall	.-2452   	; 0x160 <output_set_state>
     af4:	51 df       	rcall	.-350    	; 0x998 <increment_current_segment>
	
	transfer_next_to_display();
     af6:	ba df       	rcall	.-140    	; 0xa6c <transfer_next_to_display>
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	0f 90       	pop	r0
     b12:	0b be       	out	0x3b, r0	; 59
     b14:	0f 90       	pop	r0
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	0f 90       	pop	r0
     b1a:	1f 90       	pop	r1
     b1c:	18 95       	reti

00000b1e <mv_to_c>:
static io_descriptor_t enable;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
     b1e:	9c 01       	movw	r18, r24
     b20:	24 5f       	subi	r18, 0xF4	; 244
     b22:	31 40       	sbci	r19, 0x01	; 1
     b24:	ad ec       	ldi	r26, 0xCD	; 205
     b26:	bc ec       	ldi	r27, 0xCC	; 204
     b28:	c4 d5       	rcall	.+2952   	; 0x16b2 <__umulhisi3>
     b2a:	96 95       	lsr	r25
     b2c:	87 95       	ror	r24
     b2e:	96 95       	lsr	r25
     b30:	87 95       	ror	r24
     b32:	96 95       	lsr	r25
     b34:	87 95       	ror	r24
}
     b36:	08 95       	ret

00000b38 <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
     b38:	bc 01       	movw	r22, r24
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	9c d4       	rcall	.+2360   	; 0x1478 <__floatunsisf>
     b40:	2a e1       	ldi	r18, 0x1A	; 26
     b42:	37 e6       	ldi	r19, 0x67	; 103
     b44:	4c e9       	ldi	r20, 0x9C	; 156
     b46:	50 e4       	ldi	r21, 0x40	; 64
     b48:	49 d5       	rcall	.+2706   	; 0x15dc <__mulsf3>
     b4a:	6a d4       	rcall	.+2260   	; 0x1420 <__fixunssfsi>
}
     b4c:	cb 01       	movw	r24, r22
     b4e:	08 95       	ret

00000b50 <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	ec 01       	movw	r28, r24
	// configure io.
	enable = output_init(ENABLE_PORT, ENABLE_PIN, ENABLE_ACTIVE_STATE, ENABLE_DEFAULT_STATE);
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	86 e0       	ldi	r24, 0x06	; 6
     b62:	41 db       	rcall	.-2430   	; 0x1e6 <output_init>
     b64:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <enable+0x1>
     b68:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <enable>
	v_out = input_init(V_IN_PORT, V_IN_PIN, V_IN_ACTIVE_STATE, V_IN_PULL_UP, NULL);
     b6c:	00 e0       	ldi	r16, 0x00	; 0
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	42 e0       	ldi	r20, 0x02	; 2
     b74:	67 e0       	ldi	r22, 0x07	; 7
     b76:	89 e0       	ldi	r24, 0x09	; 9
     b78:	84 db       	rcall	.-2296   	; 0x282 <input_init>
	
	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
     b7a:	ec e7       	ldi	r30, 0x7C	; 124
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 64       	ori	r24, 0x40	; 64
     b82:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
     b84:	80 81       	ld	r24, Z
     b86:	87 60       	ori	r24, 0x07	; 7
     b88:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
     b8a:	ab e7       	ldi	r26, 0x7B	; 123
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	8c 91       	ld	r24, X
     b90:	88 60       	ori	r24, 0x08	; 8
     b92:	8c 93       	st	X, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
     b94:	ea e7       	ldi	r30, 0x7A	; 122
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	86 60       	ori	r24, 0x06	; 6
     b9c:	80 83       	st	Z, r24

	// Enable ADC  
	ADCSRA |= _BV(ADEN);
     b9e:	80 81       	ld	r24, Z
     ba0:	80 68       	ori	r24, 0x80	; 128
     ba2:	80 83       	st	Z, r24
	
	// ****** Interrupt and auto trigger ****
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
     ba4:	80 81       	ld	r24, Z
     ba6:	88 60       	ori	r24, 0x08	; 8
     ba8:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
     baa:	80 81       	ld	r24, Z
     bac:	80 62       	ori	r24, 0x20	; 32
     bae:	80 83       	st	Z, r24
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
     bb0:	8c 91       	ld	r24, X
     bb2:	85 60       	ori	r24, 0x05	; 5
     bb4:	8c 93       	st	X, r24
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
     bb6:	e0 e8       	ldi	r30, 0x80	; 128
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 61       	ori	r24, 0x10	; 16
     bbe:	80 83       	st	Z, r24
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
     bc0:	e1 e8       	ldi	r30, 0x81	; 129
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	84 60       	ori	r24, 0x04	; 4
     bc8:	80 83       	st	Z, r24
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1B |= _BV(WGM12);
     bca:	80 81       	ld	r24, Z
     bcc:	88 60       	ori	r24, 0x08	; 8
     bce:	80 83       	st	Z, r24
	
	// Enable Timer Interrupt
	TIMSK1 |= _BV(OCIE1B);
     bd0:	ef e6       	ldi	r30, 0x6F	; 111
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	80 83       	st	Z, r24

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
     bda:	81 e1       	ldi	r24, 0x11	; 17
     bdc:	9a e7       	ldi	r25, 0x7A	; 122
     bde:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     be2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
     be6:	20 97       	sbiw	r28, 0x00	; 0
     be8:	21 f0       	breq	.+8      	; 0xbf2 <tmp36_init+0xa2>
		cb = callback;
     bea:	d0 93 8e 02 	sts	0x028E, r29	; 0x80028e <cb+0x1>
     bee:	c0 93 8d 02 	sts	0x028D, r28	; 0x80028d <cb>
	
	// Enable TMP36
	output_set_state(enable, ACTIVE);
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <enable>
     bf8:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <enable+0x1>
     bfc:	b1 da       	rcall	.-2718   	; 0x160 <output_set_state>
	
	// Start Conversion.
	ADCSRA |= _BV(ADSC);
     bfe:	ea e7       	ldi	r30, 0x7A	; 122
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	80 83       	st	Z, r24
}
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <__vector_29>:

// AD Interrupt callback.
ISR(ADC_vect)
{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	0b b6       	in	r0, 0x3b	; 59
     c1e:	0f 92       	push	r0
     c20:	2f 93       	push	r18
     c22:	3f 93       	push	r19
     c24:	4f 93       	push	r20
     c26:	5f 93       	push	r21
     c28:	6f 93       	push	r22
     c2a:	7f 93       	push	r23
     c2c:	8f 93       	push	r24
     c2e:	9f 93       	push	r25
     c30:	af 93       	push	r26
     c32:	bf 93       	push	r27
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	ef 93       	push	r30
     c3a:	ff 93       	push	r31
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
     c3c:	c0 91 8d 02 	lds	r28, 0x028D	; 0x80028d <cb>
     c40:	d0 91 8e 02 	lds	r29, 0x028E	; 0x80028e <cb+0x1>
     c44:	20 97       	sbiw	r28, 0x00	; 0
     c46:	41 f0       	breq	.+16     	; 0xc58 <__vector_29+0x46>
		cb(mv_to_c(adc_to_mv(ADC)));
     c48:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     c4c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     c50:	73 df       	rcall	.-282    	; 0xb38 <adc_to_mv>
     c52:	65 df       	rcall	.-310    	; 0xb1e <mv_to_c>
     c54:	fe 01       	movw	r30, r28
     c56:	19 95       	eicall
	
	// ADC interrupt flag is high!
	// Clear ADC interrupt flag.
	ADCSRA |= ~_BV(ADIF);
     c58:	ea e7       	ldi	r30, 0x7A	; 122
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	8f 6e       	ori	r24, 0xEF	; 239
     c60:	80 83       	st	Z, r24
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	bf 91       	pop	r27
     c6c:	af 91       	pop	r26
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	7f 91       	pop	r23
     c74:	6f 91       	pop	r22
     c76:	5f 91       	pop	r21
     c78:	4f 91       	pop	r20
     c7a:	3f 91       	pop	r19
     c7c:	2f 91       	pop	r18
     c7e:	0f 90       	pop	r0
     c80:	0b be       	out	0x3b, r0	; 59
     c82:	0f 90       	pop	r0
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	0f 90       	pop	r0
     c88:	1f 90       	pop	r1
     c8a:	18 95       	reti

00000c8c <tmp36_callback>:


// Temperature callback.
static void tmp36_callback(uint8_t deg_c)
{
	t_current = deg_c;  
     c8c:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <t_current>
     c90:	08 95       	ret

00000c92 <array_to_int>:
	};
	led_init(leds);
}

static uint16_t array_to_int(uint8_t arr[])
{
     c92:	bc 01       	movw	r22, r24
	uint16_t k = 0;
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     c94:	90 e0       	ldi	r25, 0x00	; 0
	led_init(leds);
}

static uint16_t array_to_int(uint8_t arr[])
{
	uint16_t k = 0;
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     c9a:	12 c0       	rjmp	.+36     	; 0xcc0 <array_to_int+0x2e>
	{
		k = 10 * k + arr[i];
     c9c:	a9 01       	movw	r20, r18
     c9e:	44 0f       	add	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	22 0f       	add	r18, r18
     ca4:	33 1f       	adc	r19, r19
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	24 0f       	add	r18, r20
     cb0:	35 1f       	adc	r19, r21
     cb2:	fb 01       	movw	r30, r22
     cb4:	e9 0f       	add	r30, r25
     cb6:	f1 1d       	adc	r31, r1
     cb8:	40 81       	ld	r20, Z
     cba:	24 0f       	add	r18, r20
     cbc:	31 1d       	adc	r19, r1
}

static uint16_t array_to_int(uint8_t arr[])
{
	uint16_t k = 0;
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     cbe:	9f 5f       	subi	r25, 0xFF	; 255
     cc0:	94 30       	cpi	r25, 0x04	; 4
     cc2:	60 f3       	brcs	.-40     	; 0xc9c <array_to_int+0xa>
	{
		k = 10 * k + arr[i];
	}
	
	return k;
}
     cc4:	c9 01       	movw	r24, r18
     cc6:	08 95       	ret

00000cc8 <util_init>:
	tmp36_init(tmp36_callback);
	matrix_keypad_init();
}

static void util_init()
{
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
	// Initialize basic kalman filter
	kalman_init(0.001, 5, 1, 0, 1);
     cd8:	8f e3       	ldi	r24, 0x3F	; 63
     cda:	8f 93       	push	r24
     cdc:	80 e8       	ldi	r24, 0x80	; 128
     cde:	8f 93       	push	r24
     ce0:	1f 92       	push	r1
     ce2:	1f 92       	push	r1
     ce4:	a1 2c       	mov	r10, r1
     ce6:	b1 2c       	mov	r11, r1
     ce8:	65 01       	movw	r12, r10
     cea:	e1 2c       	mov	r14, r1
     cec:	f1 2c       	mov	r15, r1
     cee:	00 e8       	ldi	r16, 0x80	; 128
     cf0:	1f e3       	ldi	r17, 0x3F	; 63
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 ea       	ldi	r20, 0xA0	; 160
     cf8:	50 e4       	ldi	r21, 0x40	; 64
     cfa:	6f e6       	ldi	r22, 0x6F	; 111
     cfc:	72 e1       	ldi	r23, 0x12	; 18
     cfe:	83 e8       	ldi	r24, 0x83	; 131
     d00:	9a e3       	ldi	r25, 0x3A	; 58
     d02:	8a d1       	rcall	.+788    	; 0x1018 <kalman_init>
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	08 95       	ret

00000d1e <leds_init_all>:
	key_init(keys);
}


static void leds_init_all()
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	2e 97       	sbiw	r28, 0x0e	; 14
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
	io_definition_t leds[] = {
     d32:	8e e0       	ldi	r24, 0x0E	; 14
     d34:	e5 e1       	ldi	r30, 0x15	; 21
     d36:	f2 e0       	ldi	r31, 0x02	; 2
     d38:	de 01       	movw	r26, r28
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	01 90       	ld	r0, Z+
     d3e:	0d 92       	st	X+, r0
     d40:	8a 95       	dec	r24
     d42:	e1 f7       	brne	.-8      	; 0xd3c <leds_init_all+0x1e>
		{LED_5_PORT, LED_5_PIN},
		{LED_6_PORT, LED_6_PIN},
		{LED_7_PORT, LED_7_PIN},
		{LED_8_PORT, LED_8_PIN}
	};
	led_init(leds);
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	a1 dc       	rcall	.-1726   	; 0x68c <led_init>
}
     d4a:	2e 96       	adiw	r28, 0x0e	; 14
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <shift_keys_init>:
{
	t_current = deg_c;  
}

static void shift_keys_init()
{
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	00 d0       	rcall	.+0      	; 0xd62 <shift_keys_init+0x6>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <shift_keys_init+0x8>
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	io_definition_t keys[] = {
     d68:	86 e0       	ldi	r24, 0x06	; 6
     d6a:	e3 e2       	ldi	r30, 0x23	; 35
     d6c:	f2 e0       	ldi	r31, 0x02	; 2
     d6e:	de 01       	movw	r26, r28
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	01 90       	ld	r0, Z+
     d74:	0d 92       	st	X+, r0
     d76:	8a 95       	dec	r24
     d78:	e1 f7       	brne	.-8      	; 0xd72 <shift_keys_init+0x16>
		{KEY_T_LOW_PORT, KEY_T_LOW_PIN}, 
		{KEY_T_HIGH_PORT, KEY_T_HIGH_PIN},
		{KEY_T_CURR_PORT, KEY_T_CURR_PIN}
	};
	key_init(keys);
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	40 dc       	rcall	.-1920   	; 0x600 <key_init>
}
     d80:	26 96       	adiw	r28, 0x06	; 6
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <hal_init>:
	}
}

static void hal_init()
{
	leds_init_all();
     d92:	c5 df       	rcall	.-118    	; 0xd1e <leds_init_all>
	shift_keys_init();
     d94:	e3 df       	rcall	.-58     	; 0xd5c <shift_keys_init>
	pump_init();
     d96:	32 dd       	rcall	.-1436   	; 0x7fc <pump_init>
     d98:	71 de       	rcall	.-798    	; 0xa7c <display_init>
	display_init();
     d9a:	86 e4       	ldi	r24, 0x46	; 70
	tmp36_init(tmp36_callback);
     d9c:	96 e0       	ldi	r25, 0x06	; 6
     d9e:	d8 de       	rcall	.-592    	; 0xb50 <tmp36_init>
     da0:	dd cc       	rjmp	.-1606   	; 0x75c <matrix_keypad_init>
     da2:	08 95       	ret

00000da4 <enable_input>:
	matrix_keypad_init();
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
	
	return k;
}

static void enable_input()
{
     daa:	df 93       	push	r29
     dac:	00 d0       	rcall	.+0      	; 0xdae <enable_input+0xa>
     dae:	1f 92       	push	r1
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	uint16_t input_value = 0;
	uint8_t inputs[] = {0, 0, 0, 0};
     db4:	19 82       	std	Y+1, r1	; 0x01
     db6:	1a 82       	std	Y+2, r1	; 0x02
     db8:	1b 82       	std	Y+3, r1	; 0x03
     dba:	1c 82       	std	Y+4, r1	; 0x04

	display_print_uint_4(input_value);
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	61 de       	rcall	.-830    	; 0xa84 <display_print_uint_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dc2:	2f ef       	ldi	r18, 0xFF	; 255
     dc4:	43 ec       	ldi	r20, 0xC3	; 195
     dc6:	59 e0       	ldi	r21, 0x09	; 9
     dc8:	21 50       	subi	r18, 0x01	; 1
     dca:	40 40       	sbci	r20, 0x00	; 0
     dcc:	50 40       	sbci	r21, 0x00	; 0
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <enable_input+0x24>
     dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <enable_input+0x2e>
	_delay_ms(200);
	do
	{
		keypad_current = matrix_keypad_get_x();
     dd2:	00 00       	nop
     dd4:	c5 dc       	rcall	.-1654   	; 0x760 <matrix_keypad_get_x>
     dd6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <keypad_current>
		
		if (keypad_current >= KEYPAD_0 && keypad_current <= KEYPAD_9)
     dda:	8a 30       	cpi	r24, 0x0A	; 10
     ddc:	a8 f0       	brcs	.+42     	; 0xe08 <enable_input+0x64>
     dde:	19 c0       	rjmp	.+50     	; 0xe12 <enable_input+0x6e>
		{	
			// Left shift array to fit next number.
			for (uint8_t i = 0; i < D_NO_SEGMENTS - 1; i++) {
				inputs[i] = inputs[i + 1];
     de0:	29 2f       	mov	r18, r25
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	f9 01       	movw	r30, r18
     de6:	31 96       	adiw	r30, 0x01	; 1
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	4c 0f       	add	r20, r28
     dee:	5d 1f       	adc	r21, r29
     df0:	e4 0f       	add	r30, r20
     df2:	f5 1f       	adc	r31, r21
     df4:	40 81       	ld	r20, Z
     df6:	e1 e0       	ldi	r30, 0x01	; 1
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	ec 0f       	add	r30, r28
     dfc:	fd 1f       	adc	r31, r29
     dfe:	e2 0f       	add	r30, r18
     e00:	f3 1f       	adc	r31, r19
     e02:	40 83       	st	Z, r20
		keypad_current = matrix_keypad_get_x();
		
		if (keypad_current >= KEYPAD_0 && keypad_current <= KEYPAD_9)
		{	
			// Left shift array to fit next number.
			for (uint8_t i = 0; i < D_NO_SEGMENTS - 1; i++) {
     e04:	9f 5f       	subi	r25, 0xFF	; 255
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <enable_input+0x66>
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	93 30       	cpi	r25, 0x03	; 3
     e0c:	48 f3       	brcs	.-46     	; 0xde0 <enable_input+0x3c>
				inputs[i] = inputs[i + 1];
			}	
			// Add new digit to end of array.		
			inputs[3] = keypad_current;
     e0e:	8c 83       	std	Y+4, r24	; 0x04
     e10:	18 c0       	rjmp	.+48     	; 0xe42 <enable_input+0x9e>
		}
		else if (keypad_current == KEYPAD_D)
     e12:	8f 30       	cpi	r24, 0x0F	; 15
     e14:	b1 f4       	brne	.+44     	; 0xe42 <enable_input+0x9e>
     e16:	11 c0       	rjmp	.+34     	; 0xe3a <enable_input+0x96>
		{
			// right shift array to delete last input.
			for (uint8_t i = D_NO_SEGMENTS - 1; i > 0; i--)
			{
				inputs[i] = inputs[i - 1];			
     e18:	82 2f       	mov	r24, r18
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	fc 01       	movw	r30, r24
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	4c 0f       	add	r20, r28
     e26:	5d 1f       	adc	r21, r29
     e28:	e4 0f       	add	r30, r20
     e2a:	f5 1f       	adc	r31, r21
     e2c:	30 81       	ld	r19, Z
     e2e:	fa 01       	movw	r30, r20
     e30:	e8 0f       	add	r30, r24
     e32:	f9 1f       	adc	r31, r25
     e34:	30 83       	st	Z, r19
			inputs[3] = keypad_current;
		}
		else if (keypad_current == KEYPAD_D)
		{
			// right shift array to delete last input.
			for (uint8_t i = D_NO_SEGMENTS - 1; i > 0; i--)
     e36:	21 50       	subi	r18, 0x01	; 1
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <enable_input+0x98>
     e3a:	23 e0       	ldi	r18, 0x03	; 3
     e3c:	21 11       	cpse	r18, r1
     e3e:	ec cf       	rjmp	.-40     	; 0xe18 <enable_input+0x74>
			{
				inputs[i] = inputs[i - 1];			
			}
			inputs[0] = 0;		
     e40:	19 82       	std	Y+1, r1	; 0x01
		}
		
		// convert input array to int.
		input_value = array_to_int(inputs);
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	25 df       	rcall	.-438    	; 0xc92 <array_to_int>
		
		display_print_uint_4(input_value);
     e48:	8c 01       	movw	r16, r24
     e4a:	1c de       	rcall	.-968    	; 0xa84 <display_print_uint_4>
     e4c:	5f ef       	ldi	r21, 0xFF	; 255
     e4e:	85 ea       	ldi	r24, 0xA5	; 165
     e50:	9e e0       	ldi	r25, 0x0E	; 14
     e52:	51 50       	subi	r21, 0x01	; 1
     e54:	80 40       	sbci	r24, 0x00	; 0
     e56:	90 40       	sbci	r25, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <enable_input+0xae>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <enable_input+0xb8>
     e5c:	00 00       	nop
		_delay_ms(300);
		
	} while (keypad_current != SAVE && keypad_current != CANCEL);
     e5e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <keypad_current>
     e62:	93 ef       	ldi	r25, 0xF3	; 243
     e64:	98 0f       	add	r25, r24
     e66:	92 30       	cpi	r25, 0x02	; 2
     e68:	08 f0       	brcs	.+2      	; 0xe6c <enable_input+0xc8>
	
	if (keypad_current == SAVE)
     e6a:	b4 cf       	rjmp	.-152    	; 0xdd4 <enable_input+0x30>
     e6c:	8e 30       	cpi	r24, 0x0E	; 14
	{
		display_save();
     e6e:	e9 f4       	brne	.+58     	; 0xeaa <enable_input+0x106>
     e70:	0d de       	rcall	.-998    	; 0xa8c <display_save>
		switch (display_current)
     e72:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <display_current>
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	19 f0       	breq	.+6      	; 0xe80 <enable_input+0xdc>
     e7a:	82 30       	cpi	r24, 0x02	; 2
     e7c:	31 f0       	breq	.+12     	; 0xe8a <enable_input+0xe6>
     e7e:	09 c0       	rjmp	.+18     	; 0xe92 <enable_input+0xee>
		{
			case 1:
				t_low = input_value;
     e80:	10 93 0c 02 	sts	0x020C, r17	; 0x80020c <t_low+0x1>
     e84:	00 93 0b 02 	sts	0x020B, r16	; 0x80020b <t_low>
				break;
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <enable_input+0xee>
			case 2:
				t_high = input_value;
     e8a:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <t_high+0x1>
     e8e:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <t_high>
				break;
			default:
				break;
		}
		display_current = 3;
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <display_current>
     e98:	2f ef       	ldi	r18, 0xFF	; 255
     e9a:	43 ed       	ldi	r20, 0xD3	; 211
     e9c:	50 e3       	ldi	r21, 0x30	; 48
     e9e:	21 50       	subi	r18, 0x01	; 1
     ea0:	40 40       	sbci	r20, 0x00	; 0
     ea2:	50 40       	sbci	r21, 0x00	; 0
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <enable_input+0xfa>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <enable_input+0x104>
     ea8:	00 00       	nop
		_delay_ms(1000);
	}
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <run_solar_heating>:

// Application
static void run_solar_heating() {
	t_filtered = kalman_filter(t_current);
     ebc:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <t_current>
     ec0:	ee d0       	rcall	.+476    	; 0x109e <kalman_filter>
     ec2:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <t_filtered>
	
	display_selector = key_scan();
     ec6:	d3 db       	rcall	.-2138   	; 0x66e <key_scan>
     ec8:	81 11       	cpse	r24, r1
	
	if (display_selector)
     eca:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <display_current>
		display_current = display_selector;
	
	keypad_current = matrix_keypad_get_x();
     ece:	48 dc       	rcall	.-1904   	; 0x760 <matrix_keypad_get_x>
     ed0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <keypad_current>
     ed4:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <display_current>
	
	switch (display_current)
     ed8:	92 30       	cpi	r25, 0x02	; 2
     eda:	91 f0       	breq	.+36     	; 0xf00 <run_solar_heating+0x44>
     edc:	93 30       	cpi	r25, 0x03	; 3
     ede:	f1 f0       	breq	.+60     	; 0xf1c <run_solar_heating+0x60>
     ee0:	91 30       	cpi	r25, 0x01	; 1
     ee2:	01 f5       	brne	.+64     	; 0xf24 <run_solar_heating+0x68>
     ee4:	8f 37       	cpi	r24, 0x7F	; 127
	{
		case 1:
			if (keypad_current == KEYPAD_INACTIVE || keypad_current == SAVE || keypad_current == CANCEL)
     ee6:	21 f0       	breq	.+8      	; 0xef0 <run_solar_heating+0x34>
     ee8:	8e 30       	cpi	r24, 0x0E	; 14
     eea:	11 f0       	breq	.+4      	; 0xef0 <run_solar_heating+0x34>
     eec:	8d 30       	cpi	r24, 0x0D	; 13
     eee:	31 f4       	brne	.+12     	; 0xefc <run_solar_heating+0x40>
     ef0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <t_low>
				display_print_uint_4(t_low);
     ef4:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <t_low+0x1>
     ef8:	c5 dd       	rcall	.-1142   	; 0xa84 <display_print_uint_4>
     efa:	14 c0       	rjmp	.+40     	; 0xf24 <run_solar_heating+0x68>
			else 
				enable_input();
     efc:	53 df       	rcall	.-346    	; 0xda4 <enable_input>
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <run_solar_heating+0x68>
     f00:	8f 37       	cpi	r24, 0x7F	; 127
			break;
		case 2:
			if (keypad_current == KEYPAD_INACTIVE || keypad_current == SAVE || keypad_current == CANCEL)
     f02:	21 f0       	breq	.+8      	; 0xf0c <run_solar_heating+0x50>
     f04:	8e 30       	cpi	r24, 0x0E	; 14
     f06:	11 f0       	breq	.+4      	; 0xf0c <run_solar_heating+0x50>
     f08:	8d 30       	cpi	r24, 0x0D	; 13
     f0a:	31 f4       	brne	.+12     	; 0xf18 <run_solar_heating+0x5c>
				display_print_uint_4(t_high);
     f0c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <t_high>
     f10:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <t_high+0x1>
     f14:	b7 dd       	rcall	.-1170   	; 0xa84 <display_print_uint_4>
     f16:	06 c0       	rjmp	.+12     	; 0xf24 <run_solar_heating+0x68>
			else
				enable_input();
     f18:	45 df       	rcall	.-374    	; 0xda4 <enable_input>
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <run_solar_heating+0x68>
     f1c:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <t_filtered>
			break;
		case 3:
			display_print_uint_4(t_filtered);
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	b0 dd       	rcall	.-1184   	; 0xa84 <display_print_uint_4>
     f24:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <t_filtered>
			break;
		default:
			break;
	}
	
	if (t_filtered < t_low)
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <t_low>
     f2e:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <t_low+0x1>
     f32:	82 17       	cp	r24, r18
     f34:	93 07       	cpc	r25, r19
     f36:	10 f4       	brcc	.+4      	; 0xf3c <run_solar_heating+0x80>
     f38:	72 cc       	rjmp	.-1820   	; 0x81e <pump_stop>
	{
		pump_stop();
     f3a:	08 95       	ret
     f3c:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <t_high>
	}
	else if (t_filtered >= t_high)
     f40:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <t_high+0x1>
     f44:	82 17       	cp	r24, r18
     f46:	93 07       	cpc	r25, r19
     f48:	08 f0       	brcs	.+2      	; 0xf4c <run_solar_heating+0x90>
     f4a:	62 cc       	rjmp	.-1852   	; 0x810 <pump_start>
	{
		pump_start();
     f4c:	08 95       	ret

00000f4e <main>:
     f4e:	bc de       	rcall	.-648    	; 0xcc8 <util_init>
     f50:	20 df       	rcall	.-448    	; 0xd92 <hal_init>
}

int main(void)
{
	util_init();
	hal_init();
     f52:	78 94       	sei
	
	// Enable interrupt globally.
	sei();
     f54:	2f ef       	ldi	r18, 0xFF	; 255
     f56:	89 e6       	ldi	r24, 0x69	; 105
     f58:	98 e1       	ldi	r25, 0x18	; 24
     f5a:	21 50       	subi	r18, 0x01	; 1
     f5c:	80 40       	sbci	r24, 0x00	; 0
     f5e:	90 40       	sbci	r25, 0x00	; 0
     f60:	e1 f7       	brne	.-8      	; 0xf5a <main+0xc>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <main+0x16>
     f64:	00 00       	nop
	_delay_ms(500);
	
	// Application
    while (1)
    {	
		run_solar_heating();
     f66:	aa df       	rcall	.-172    	; 0xebc <run_solar_heating>
     f68:	fe cf       	rjmp	.-4      	; 0xf66 <main+0x18>

00000f6a <predict>:
     f6a:	cf 92       	push	r12
	_b = b;
	_c = c;
}

static double predict() 
{
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
	return (_a * _x) + (_b * _u);
     f72:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <_x>
     f76:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <_x+0x1>
     f7a:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <_x+0x2>
     f7e:	50 91 10 02 	lds	r21, 0x0210	; 0x800210 <_x+0x3>
     f82:	60 91 99 02 	lds	r22, 0x0299	; 0x800299 <_a>
     f86:	70 91 9a 02 	lds	r23, 0x029A	; 0x80029a <_a+0x1>
     f8a:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_a+0x2>
     f8e:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_a+0x3>
     f92:	24 d3       	rcall	.+1608   	; 0x15dc <__mulsf3>
     f94:	6b 01       	movw	r12, r22
     f96:	7c 01       	movw	r14, r24
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	a9 01       	movw	r20, r18
     f9e:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <_b>
     fa2:	70 91 96 02 	lds	r23, 0x0296	; 0x800296 <_b+0x1>
     fa6:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_b+0x2>
     faa:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <_b+0x3>
     fae:	16 d3       	rcall	.+1580   	; 0x15dc <__mulsf3>
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	c7 01       	movw	r24, r14
     fb6:	b6 01       	movw	r22, r12
     fb8:	63 d1       	rcall	.+710    	; 0x1280 <__addsf3>
}
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	08 95       	ret

00000fc4 <uncertenty>:

static double uncertenty()
{
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
	return ((_a * _cov) * _a) + _r; 
     fcc:	c0 90 99 02 	lds	r12, 0x0299	; 0x800299 <_a>
     fd0:	d0 90 9a 02 	lds	r13, 0x029A	; 0x80029a <_a+0x1>
     fd4:	e0 90 9b 02 	lds	r14, 0x029B	; 0x80029b <_a+0x2>
     fd8:	f0 90 9c 02 	lds	r15, 0x029C	; 0x80029c <_a+0x3>
     fdc:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <_cov>
     fe0:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <_cov+0x1>
     fe4:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <_cov+0x2>
     fe8:	50 91 14 02 	lds	r21, 0x0214	; 0x800214 <_cov+0x3>
     fec:	c7 01       	movw	r24, r14
     fee:	b6 01       	movw	r22, r12
     ff0:	f5 d2       	rcall	.+1514   	; 0x15dc <__mulsf3>
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	c7 01       	movw	r24, r14
     ff8:	b6 01       	movw	r22, r12
     ffa:	f0 d2       	rcall	.+1504   	; 0x15dc <__mulsf3>
     ffc:	20 91 a1 02 	lds	r18, 0x02A1	; 0x8002a1 <_r>
    1000:	30 91 a2 02 	lds	r19, 0x02A2	; 0x8002a2 <_r+0x1>
    1004:	40 91 a3 02 	lds	r20, 0x02A3	; 0x8002a3 <_r+0x2>
    1008:	50 91 a4 02 	lds	r21, 0x02A4	; 0x8002a4 <_r+0x3>
    100c:	39 d1       	rcall	.+626    	; 0x1280 <__addsf3>
}
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	df 90       	pop	r13
    1014:	cf 90       	pop	r12
    1016:	08 95       	ret

00001018 <kalman_init>:
static double _cov = -1;
static double _u = 0;
static double _x = 255; // estimated signal without noise

void kalman_init(double r, double q, double a, double b, double c)
{
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	_r = r;
    1030:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <_r>
    1034:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <_r+0x1>
    1038:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <_r+0x2>
    103c:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <_r+0x3>
	_q = q;
    1040:	20 93 9d 02 	sts	0x029D, r18	; 0x80029d <_q>
    1044:	30 93 9e 02 	sts	0x029E, r19	; 0x80029e <_q+0x1>
    1048:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <_q+0x2>
    104c:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <_q+0x3>
	_a = a;
    1050:	e0 92 99 02 	sts	0x0299, r14	; 0x800299 <_a>
    1054:	f0 92 9a 02 	sts	0x029A, r15	; 0x80029a <_a+0x1>
    1058:	00 93 9b 02 	sts	0x029B, r16	; 0x80029b <_a+0x2>
    105c:	10 93 9c 02 	sts	0x029C, r17	; 0x80029c <_a+0x3>
	_b = b;
    1060:	a0 92 95 02 	sts	0x0295, r10	; 0x800295 <_b>
    1064:	b0 92 96 02 	sts	0x0296, r11	; 0x800296 <_b+0x1>
    1068:	c0 92 97 02 	sts	0x0297, r12	; 0x800297 <_b+0x2>
    106c:	d0 92 98 02 	sts	0x0298, r13	; 0x800298 <_b+0x3>
	_c = c;
    1070:	8e 85       	ldd	r24, Y+14	; 0x0e
    1072:	9f 85       	ldd	r25, Y+15	; 0x0f
    1074:	a8 89       	ldd	r26, Y+16	; 0x10
    1076:	b9 89       	ldd	r27, Y+17	; 0x11
    1078:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_c>
    107c:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <_c+0x1>
    1080:	a0 93 93 02 	sts	0x0293, r26	; 0x800293 <_c+0x2>
    1084:	b0 93 94 02 	sts	0x0294, r27	; 0x800294 <_c+0x3>
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	bf 90       	pop	r11
    109a:	af 90       	pop	r10
    109c:	08 95       	ret

0000109e <kalman_filter>:
{
	return ((_a * _cov) * _a) + _r; 
}

uint8_t kalman_filter(uint8_t measurement)
{
    109e:	4f 92       	push	r4
    10a0:	5f 92       	push	r5
    10a2:	6f 92       	push	r6
    10a4:	7f 92       	push	r7
    10a6:	8f 92       	push	r8
    10a8:	9f 92       	push	r9
    10aa:	af 92       	push	r10
    10ac:	bf 92       	push	r11
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	29 97       	sbiw	r28, 0x09	; 9
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	89 87       	std	Y+9, r24	; 0x09
	if (_x == 255)
    10cc:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <_x>
    10d0:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <_x+0x1>
    10d4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <_x+0x2>
    10d8:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_x+0x3>
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4f e7       	ldi	r20, 0x7F	; 127
    10e2:	53 e4       	ldi	r21, 0x43	; 67
    10e4:	31 d1       	rcall	.+610    	; 0x1348 <__cmpsf2>
    10e6:	81 11       	cpse	r24, r1
    10e8:	39 c0       	rjmp	.+114    	; 0x115c <kalman_filter+0xbe>
	{
		_x = (1 / _c) * measurement;
    10ea:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <_c>
    10ee:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <_c+0x1>
    10f2:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <_c+0x2>
    10f6:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <_c+0x3>
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	80 e8       	ldi	r24, 0x80	; 128
    1100:	9f e3       	ldi	r25, 0x3F	; 63
    1102:	26 d1       	rcall	.+588    	; 0x1350 <__divsf3>
    1104:	6b 01       	movw	r12, r22
    1106:	7c 01       	movw	r14, r24
    1108:	29 85       	ldd	r18, Y+9	; 0x09
    110a:	62 2f       	mov	r22, r18
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	b4 d1       	rcall	.+872    	; 0x147c <__floatsisf>
    1114:	a7 01       	movw	r20, r14
    1116:	96 01       	movw	r18, r12
    1118:	61 d2       	rcall	.+1218   	; 0x15dc <__mulsf3>
    111a:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <_x>
    111e:	70 93 0e 02 	sts	0x020E, r23	; 0x80020e <_x+0x1>
    1122:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_x+0x2>
    1126:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <_x+0x3>
		_cov = (1 / _c) * _q * (1 / _c); 
    112a:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <_q>
    112e:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <_q+0x1>
    1132:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <_q+0x2>
    1136:	50 91 a0 02 	lds	r21, 0x02A0	; 0x8002a0 <_q+0x3>
    113a:	c7 01       	movw	r24, r14
    113c:	b6 01       	movw	r22, r12
    113e:	4e d2       	rcall	.+1180   	; 0x15dc <__mulsf3>
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	c7 01       	movw	r24, r14
    1146:	b6 01       	movw	r22, r12
    1148:	49 d2       	rcall	.+1170   	; 0x15dc <__mulsf3>
    114a:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <_cov>
    114e:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <_cov+0x1>
    1152:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_cov+0x2>
    1156:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <_cov+0x3>
	}
	else 
	{
		// compute prediction
		double pred_x = predict();
    115a:	72 c0       	rjmp	.+228    	; 0x1240 <kalman_filter+0x1a2>
    115c:	06 df       	rcall	.-500    	; 0xf6a <predict>
    115e:	69 83       	std	Y+1, r22	; 0x01
    1160:	7a 83       	std	Y+2, r23	; 0x02
    1162:	8b 83       	std	Y+3, r24	; 0x03
    1164:	9c 83       	std	Y+4, r25	; 0x04
		double pred_cov = uncertenty();
    1166:	2e df       	rcall	.-420    	; 0xfc4 <uncertenty>
    1168:	6b 01       	movw	r12, r22
    116a:	7c 01       	movw	r14, r24
    116c:	80 90 91 02 	lds	r8, 0x0291	; 0x800291 <_c>
		
		// kalman gain
		double k = pred_cov  * _c * (1 / ((_c * pred_cov * _c) + _q));
    1170:	90 90 92 02 	lds	r9, 0x0292	; 0x800292 <_c+0x1>
    1174:	a0 90 93 02 	lds	r10, 0x0293	; 0x800293 <_c+0x2>
    1178:	b0 90 94 02 	lds	r11, 0x0294	; 0x800294 <_c+0x3>
    117c:	a5 01       	movw	r20, r10
    117e:	94 01       	movw	r18, r8
    1180:	2d d2       	rcall	.+1114   	; 0x15dc <__mulsf3>
    1182:	2b 01       	movw	r4, r22
    1184:	3c 01       	movw	r6, r24
    1186:	9b 01       	movw	r18, r22
    1188:	ac 01       	movw	r20, r24
    118a:	c5 01       	movw	r24, r10
    118c:	b4 01       	movw	r22, r8
    118e:	26 d2       	rcall	.+1100   	; 0x15dc <__mulsf3>
    1190:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <_q>
    1194:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <_q+0x1>
    1198:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <_q+0x2>
    119c:	50 91 a0 02 	lds	r21, 0x02A0	; 0x8002a0 <_q+0x3>
    11a0:	6f d0       	rcall	.+222    	; 0x1280 <__addsf3>
    11a2:	9b 01       	movw	r18, r22
    11a4:	ac 01       	movw	r20, r24
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	9f e3       	ldi	r25, 0x3F	; 63
    11ae:	d0 d0       	rcall	.+416    	; 0x1350 <__divsf3>
    11b0:	9b 01       	movw	r18, r22
    11b2:	ac 01       	movw	r20, r24
    11b4:	c3 01       	movw	r24, r6
    11b6:	b2 01       	movw	r22, r4
    11b8:	11 d2       	rcall	.+1058   	; 0x15dc <__mulsf3>
    11ba:	2b 01       	movw	r4, r22
    11bc:	3c 01       	movw	r6, r24
		
		// Correction
		_x = pred_x + k * (measurement - (_c * pred_x));
    11be:	a5 01       	movw	r20, r10
    11c0:	94 01       	movw	r18, r8
    11c2:	69 81       	ldd	r22, Y+1	; 0x01
    11c4:	7a 81       	ldd	r23, Y+2	; 0x02
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	08 d2       	rcall	.+1040   	; 0x15dc <__mulsf3>
    11cc:	6d 83       	std	Y+5, r22	; 0x05
    11ce:	7e 83       	std	Y+6, r23	; 0x06
    11d0:	8f 83       	std	Y+7, r24	; 0x07
    11d2:	98 87       	std	Y+8, r25	; 0x08
    11d4:	29 85       	ldd	r18, Y+9	; 0x09
    11d6:	62 2f       	mov	r22, r18
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	4e d1       	rcall	.+668    	; 0x147c <__floatsisf>
    11e0:	2d 81       	ldd	r18, Y+5	; 0x05
    11e2:	3e 81       	ldd	r19, Y+6	; 0x06
    11e4:	4f 81       	ldd	r20, Y+7	; 0x07
    11e6:	58 85       	ldd	r21, Y+8	; 0x08
    11e8:	4a d0       	rcall	.+148    	; 0x127e <__subsf3>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	c3 01       	movw	r24, r6
    11f0:	b2 01       	movw	r22, r4
    11f2:	f4 d1       	rcall	.+1000   	; 0x15dc <__mulsf3>
    11f4:	9b 01       	movw	r18, r22
    11f6:	ac 01       	movw	r20, r24
    11f8:	69 81       	ldd	r22, Y+1	; 0x01
    11fa:	7a 81       	ldd	r23, Y+2	; 0x02
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	3f d0       	rcall	.+126    	; 0x1280 <__addsf3>
    1202:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <_x>
    1206:	70 93 0e 02 	sts	0x020E, r23	; 0x80020e <_x+0x1>
    120a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_x+0x2>
    120e:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <_x+0x3>
		_cov = pred_cov - (k * _c * pred_cov);
    1212:	a3 01       	movw	r20, r6
    1214:	92 01       	movw	r18, r4
    1216:	c5 01       	movw	r24, r10
    1218:	b4 01       	movw	r22, r8
    121a:	e0 d1       	rcall	.+960    	; 0x15dc <__mulsf3>
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	c7 01       	movw	r24, r14
    1222:	b6 01       	movw	r22, r12
    1224:	db d1       	rcall	.+950    	; 0x15dc <__mulsf3>
    1226:	9b 01       	movw	r18, r22
    1228:	ac 01       	movw	r20, r24
    122a:	c7 01       	movw	r24, r14
    122c:	b6 01       	movw	r22, r12
    122e:	27 d0       	rcall	.+78     	; 0x127e <__subsf3>
    1230:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <_cov>
    1234:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <_cov+0x1>
    1238:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_cov+0x2>
    123c:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <_cov+0x3>
    1240:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <_x>
	}
	 return _x;
    1244:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <_x+0x1>
    1248:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <_x+0x2>
    124c:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_x+0x3>
    1250:	e7 d0       	rcall	.+462    	; 0x1420 <__fixunssfsi>
    1252:	86 2f       	mov	r24, r22
    1254:	29 96       	adiw	r28, 0x09	; 9
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	bf 90       	pop	r11
    126e:	af 90       	pop	r10
    1270:	9f 90       	pop	r9
    1272:	8f 90       	pop	r8
    1274:	7f 90       	pop	r7
    1276:	6f 90       	pop	r6
    1278:	5f 90       	pop	r5
    127a:	4f 90       	pop	r4
    127c:	08 95       	ret

0000127e <__subsf3>:
    127e:	50 58       	subi	r21, 0x80	; 128

00001280 <__addsf3>:
    1280:	bb 27       	eor	r27, r27
    1282:	aa 27       	eor	r26, r26
    1284:	0e d0       	rcall	.+28     	; 0x12a2 <__addsf3x>
    1286:	70 c1       	rjmp	.+736    	; 0x1568 <__fp_round>
    1288:	61 d1       	rcall	.+706    	; 0x154c <__fp_pscA>
    128a:	30 f0       	brcs	.+12     	; 0x1298 <__addsf3+0x18>
    128c:	66 d1       	rcall	.+716    	; 0x155a <__fp_pscB>
    128e:	20 f0       	brcs	.+8      	; 0x1298 <__addsf3+0x18>
    1290:	31 f4       	brne	.+12     	; 0x129e <__addsf3+0x1e>
    1292:	9f 3f       	cpi	r25, 0xFF	; 255
    1294:	11 f4       	brne	.+4      	; 0x129a <__addsf3+0x1a>
    1296:	1e f4       	brtc	.+6      	; 0x129e <__addsf3+0x1e>
    1298:	56 c1       	rjmp	.+684    	; 0x1546 <__fp_nan>
    129a:	0e f4       	brtc	.+2      	; 0x129e <__addsf3+0x1e>
    129c:	e0 95       	com	r30
    129e:	e7 fb       	bst	r30, 7
    12a0:	4c c1       	rjmp	.+664    	; 0x153a <__fp_inf>

000012a2 <__addsf3x>:
    12a2:	e9 2f       	mov	r30, r25
    12a4:	72 d1       	rcall	.+740    	; 0x158a <__fp_split3>
    12a6:	80 f3       	brcs	.-32     	; 0x1288 <__addsf3+0x8>
    12a8:	ba 17       	cp	r27, r26
    12aa:	62 07       	cpc	r22, r18
    12ac:	73 07       	cpc	r23, r19
    12ae:	84 07       	cpc	r24, r20
    12b0:	95 07       	cpc	r25, r21
    12b2:	18 f0       	brcs	.+6      	; 0x12ba <__addsf3x+0x18>
    12b4:	71 f4       	brne	.+28     	; 0x12d2 <__addsf3x+0x30>
    12b6:	9e f5       	brtc	.+102    	; 0x131e <__addsf3x+0x7c>
    12b8:	8a c1       	rjmp	.+788    	; 0x15ce <__fp_zero>
    12ba:	0e f4       	brtc	.+2      	; 0x12be <__addsf3x+0x1c>
    12bc:	e0 95       	com	r30
    12be:	0b 2e       	mov	r0, r27
    12c0:	ba 2f       	mov	r27, r26
    12c2:	a0 2d       	mov	r26, r0
    12c4:	0b 01       	movw	r0, r22
    12c6:	b9 01       	movw	r22, r18
    12c8:	90 01       	movw	r18, r0
    12ca:	0c 01       	movw	r0, r24
    12cc:	ca 01       	movw	r24, r20
    12ce:	a0 01       	movw	r20, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	ff 27       	eor	r31, r31
    12d4:	59 1b       	sub	r21, r25
    12d6:	99 f0       	breq	.+38     	; 0x12fe <__addsf3x+0x5c>
    12d8:	59 3f       	cpi	r21, 0xF9	; 249
    12da:	50 f4       	brcc	.+20     	; 0x12f0 <__addsf3x+0x4e>
    12dc:	50 3e       	cpi	r21, 0xE0	; 224
    12de:	68 f1       	brcs	.+90     	; 0x133a <__addsf3x+0x98>
    12e0:	1a 16       	cp	r1, r26
    12e2:	f0 40       	sbci	r31, 0x00	; 0
    12e4:	a2 2f       	mov	r26, r18
    12e6:	23 2f       	mov	r18, r19
    12e8:	34 2f       	mov	r19, r20
    12ea:	44 27       	eor	r20, r20
    12ec:	58 5f       	subi	r21, 0xF8	; 248
    12ee:	f3 cf       	rjmp	.-26     	; 0x12d6 <__addsf3x+0x34>
    12f0:	46 95       	lsr	r20
    12f2:	37 95       	ror	r19
    12f4:	27 95       	ror	r18
    12f6:	a7 95       	ror	r26
    12f8:	f0 40       	sbci	r31, 0x00	; 0
    12fa:	53 95       	inc	r21
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__addsf3x+0x4e>
    12fe:	7e f4       	brtc	.+30     	; 0x131e <__addsf3x+0x7c>
    1300:	1f 16       	cp	r1, r31
    1302:	ba 0b       	sbc	r27, r26
    1304:	62 0b       	sbc	r22, r18
    1306:	73 0b       	sbc	r23, r19
    1308:	84 0b       	sbc	r24, r20
    130a:	ba f0       	brmi	.+46     	; 0x133a <__addsf3x+0x98>
    130c:	91 50       	subi	r25, 0x01	; 1
    130e:	a1 f0       	breq	.+40     	; 0x1338 <__addsf3x+0x96>
    1310:	ff 0f       	add	r31, r31
    1312:	bb 1f       	adc	r27, r27
    1314:	66 1f       	adc	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	88 1f       	adc	r24, r24
    131a:	c2 f7       	brpl	.-16     	; 0x130c <__addsf3x+0x6a>
    131c:	0e c0       	rjmp	.+28     	; 0x133a <__addsf3x+0x98>
    131e:	ba 0f       	add	r27, r26
    1320:	62 1f       	adc	r22, r18
    1322:	73 1f       	adc	r23, r19
    1324:	84 1f       	adc	r24, r20
    1326:	48 f4       	brcc	.+18     	; 0x133a <__addsf3x+0x98>
    1328:	87 95       	ror	r24
    132a:	77 95       	ror	r23
    132c:	67 95       	ror	r22
    132e:	b7 95       	ror	r27
    1330:	f7 95       	ror	r31
    1332:	9e 3f       	cpi	r25, 0xFE	; 254
    1334:	08 f0       	brcs	.+2      	; 0x1338 <__addsf3x+0x96>
    1336:	b3 cf       	rjmp	.-154    	; 0x129e <__addsf3+0x1e>
    1338:	93 95       	inc	r25
    133a:	88 0f       	add	r24, r24
    133c:	08 f0       	brcs	.+2      	; 0x1340 <__addsf3x+0x9e>
    133e:	99 27       	eor	r25, r25
    1340:	ee 0f       	add	r30, r30
    1342:	97 95       	ror	r25
    1344:	87 95       	ror	r24
    1346:	08 95       	ret

00001348 <__cmpsf2>:
    1348:	d4 d0       	rcall	.+424    	; 0x14f2 <__fp_cmp>
    134a:	08 f4       	brcc	.+2      	; 0x134e <__cmpsf2+0x6>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	08 95       	ret

00001350 <__divsf3>:
    1350:	0c d0       	rcall	.+24     	; 0x136a <__divsf3x>
    1352:	0a c1       	rjmp	.+532    	; 0x1568 <__fp_round>
    1354:	02 d1       	rcall	.+516    	; 0x155a <__fp_pscB>
    1356:	40 f0       	brcs	.+16     	; 0x1368 <__divsf3+0x18>
    1358:	f9 d0       	rcall	.+498    	; 0x154c <__fp_pscA>
    135a:	30 f0       	brcs	.+12     	; 0x1368 <__divsf3+0x18>
    135c:	21 f4       	brne	.+8      	; 0x1366 <__divsf3+0x16>
    135e:	5f 3f       	cpi	r21, 0xFF	; 255
    1360:	19 f0       	breq	.+6      	; 0x1368 <__divsf3+0x18>
    1362:	eb c0       	rjmp	.+470    	; 0x153a <__fp_inf>
    1364:	51 11       	cpse	r21, r1
    1366:	34 c1       	rjmp	.+616    	; 0x15d0 <__fp_szero>
    1368:	ee c0       	rjmp	.+476    	; 0x1546 <__fp_nan>

0000136a <__divsf3x>:
    136a:	0f d1       	rcall	.+542    	; 0x158a <__fp_split3>
    136c:	98 f3       	brcs	.-26     	; 0x1354 <__divsf3+0x4>

0000136e <__divsf3_pse>:
    136e:	99 23       	and	r25, r25
    1370:	c9 f3       	breq	.-14     	; 0x1364 <__divsf3+0x14>
    1372:	55 23       	and	r21, r21
    1374:	b1 f3       	breq	.-20     	; 0x1362 <__divsf3+0x12>
    1376:	95 1b       	sub	r25, r21
    1378:	55 0b       	sbc	r21, r21
    137a:	bb 27       	eor	r27, r27
    137c:	aa 27       	eor	r26, r26
    137e:	62 17       	cp	r22, r18
    1380:	73 07       	cpc	r23, r19
    1382:	84 07       	cpc	r24, r20
    1384:	38 f0       	brcs	.+14     	; 0x1394 <__divsf3_pse+0x26>
    1386:	9f 5f       	subi	r25, 0xFF	; 255
    1388:	5f 4f       	sbci	r21, 0xFF	; 255
    138a:	22 0f       	add	r18, r18
    138c:	33 1f       	adc	r19, r19
    138e:	44 1f       	adc	r20, r20
    1390:	aa 1f       	adc	r26, r26
    1392:	a9 f3       	breq	.-22     	; 0x137e <__divsf3_pse+0x10>
    1394:	33 d0       	rcall	.+102    	; 0x13fc <__divsf3_pse+0x8e>
    1396:	0e 2e       	mov	r0, r30
    1398:	3a f0       	brmi	.+14     	; 0x13a8 <__divsf3_pse+0x3a>
    139a:	e0 e8       	ldi	r30, 0x80	; 128
    139c:	30 d0       	rcall	.+96     	; 0x13fe <__divsf3_pse+0x90>
    139e:	91 50       	subi	r25, 0x01	; 1
    13a0:	50 40       	sbci	r21, 0x00	; 0
    13a2:	e6 95       	lsr	r30
    13a4:	00 1c       	adc	r0, r0
    13a6:	ca f7       	brpl	.-14     	; 0x139a <__divsf3_pse+0x2c>
    13a8:	29 d0       	rcall	.+82     	; 0x13fc <__divsf3_pse+0x8e>
    13aa:	fe 2f       	mov	r31, r30
    13ac:	27 d0       	rcall	.+78     	; 0x13fc <__divsf3_pse+0x8e>
    13ae:	66 0f       	add	r22, r22
    13b0:	77 1f       	adc	r23, r23
    13b2:	88 1f       	adc	r24, r24
    13b4:	bb 1f       	adc	r27, r27
    13b6:	26 17       	cp	r18, r22
    13b8:	37 07       	cpc	r19, r23
    13ba:	48 07       	cpc	r20, r24
    13bc:	ab 07       	cpc	r26, r27
    13be:	b0 e8       	ldi	r27, 0x80	; 128
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <__divsf3_pse+0x56>
    13c2:	bb 0b       	sbc	r27, r27
    13c4:	80 2d       	mov	r24, r0
    13c6:	bf 01       	movw	r22, r30
    13c8:	ff 27       	eor	r31, r31
    13ca:	93 58       	subi	r25, 0x83	; 131
    13cc:	5f 4f       	sbci	r21, 0xFF	; 255
    13ce:	2a f0       	brmi	.+10     	; 0x13da <__divsf3_pse+0x6c>
    13d0:	9e 3f       	cpi	r25, 0xFE	; 254
    13d2:	51 05       	cpc	r21, r1
    13d4:	68 f0       	brcs	.+26     	; 0x13f0 <__divsf3_pse+0x82>
    13d6:	b1 c0       	rjmp	.+354    	; 0x153a <__fp_inf>
    13d8:	fb c0       	rjmp	.+502    	; 0x15d0 <__fp_szero>
    13da:	5f 3f       	cpi	r21, 0xFF	; 255
    13dc:	ec f3       	brlt	.-6      	; 0x13d8 <__divsf3_pse+0x6a>
    13de:	98 3e       	cpi	r25, 0xE8	; 232
    13e0:	dc f3       	brlt	.-10     	; 0x13d8 <__divsf3_pse+0x6a>
    13e2:	86 95       	lsr	r24
    13e4:	77 95       	ror	r23
    13e6:	67 95       	ror	r22
    13e8:	b7 95       	ror	r27
    13ea:	f7 95       	ror	r31
    13ec:	9f 5f       	subi	r25, 0xFF	; 255
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__divsf3_pse+0x74>
    13f0:	88 0f       	add	r24, r24
    13f2:	91 1d       	adc	r25, r1
    13f4:	96 95       	lsr	r25
    13f6:	87 95       	ror	r24
    13f8:	97 f9       	bld	r25, 7
    13fa:	08 95       	ret
    13fc:	e1 e0       	ldi	r30, 0x01	; 1
    13fe:	66 0f       	add	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	bb 1f       	adc	r27, r27
    1406:	62 17       	cp	r22, r18
    1408:	73 07       	cpc	r23, r19
    140a:	84 07       	cpc	r24, r20
    140c:	ba 07       	cpc	r27, r26
    140e:	20 f0       	brcs	.+8      	; 0x1418 <__divsf3_pse+0xaa>
    1410:	62 1b       	sub	r22, r18
    1412:	73 0b       	sbc	r23, r19
    1414:	84 0b       	sbc	r24, r20
    1416:	ba 0b       	sbc	r27, r26
    1418:	ee 1f       	adc	r30, r30
    141a:	88 f7       	brcc	.-30     	; 0x13fe <__divsf3_pse+0x90>
    141c:	e0 95       	com	r30
    141e:	08 95       	ret

00001420 <__fixunssfsi>:
    1420:	bc d0       	rcall	.+376    	; 0x159a <__fp_splitA>
    1422:	88 f0       	brcs	.+34     	; 0x1446 <__fixunssfsi+0x26>
    1424:	9f 57       	subi	r25, 0x7F	; 127
    1426:	90 f0       	brcs	.+36     	; 0x144c <__fixunssfsi+0x2c>
    1428:	b9 2f       	mov	r27, r25
    142a:	99 27       	eor	r25, r25
    142c:	b7 51       	subi	r27, 0x17	; 23
    142e:	a0 f0       	brcs	.+40     	; 0x1458 <__fixunssfsi+0x38>
    1430:	d1 f0       	breq	.+52     	; 0x1466 <__fixunssfsi+0x46>
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	1a f0       	brmi	.+6      	; 0x1442 <__fixunssfsi+0x22>
    143c:	ba 95       	dec	r27
    143e:	c9 f7       	brne	.-14     	; 0x1432 <__fixunssfsi+0x12>
    1440:	12 c0       	rjmp	.+36     	; 0x1466 <__fixunssfsi+0x46>
    1442:	b1 30       	cpi	r27, 0x01	; 1
    1444:	81 f0       	breq	.+32     	; 0x1466 <__fixunssfsi+0x46>
    1446:	c3 d0       	rcall	.+390    	; 0x15ce <__fp_zero>
    1448:	b1 e0       	ldi	r27, 0x01	; 1
    144a:	08 95       	ret
    144c:	c0 c0       	rjmp	.+384    	; 0x15ce <__fp_zero>
    144e:	67 2f       	mov	r22, r23
    1450:	78 2f       	mov	r23, r24
    1452:	88 27       	eor	r24, r24
    1454:	b8 5f       	subi	r27, 0xF8	; 248
    1456:	39 f0       	breq	.+14     	; 0x1466 <__fixunssfsi+0x46>
    1458:	b9 3f       	cpi	r27, 0xF9	; 249
    145a:	cc f3       	brlt	.-14     	; 0x144e <__fixunssfsi+0x2e>
    145c:	86 95       	lsr	r24
    145e:	77 95       	ror	r23
    1460:	67 95       	ror	r22
    1462:	b3 95       	inc	r27
    1464:	d9 f7       	brne	.-10     	; 0x145c <__fixunssfsi+0x3c>
    1466:	3e f4       	brtc	.+14     	; 0x1476 <__fixunssfsi+0x56>
    1468:	90 95       	com	r25
    146a:	80 95       	com	r24
    146c:	70 95       	com	r23
    146e:	61 95       	neg	r22
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	8f 4f       	sbci	r24, 0xFF	; 255
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	08 95       	ret

00001478 <__floatunsisf>:
    1478:	e8 94       	clt
    147a:	09 c0       	rjmp	.+18     	; 0x148e <__floatsisf+0x12>

0000147c <__floatsisf>:
    147c:	97 fb       	bst	r25, 7
    147e:	3e f4       	brtc	.+14     	; 0x148e <__floatsisf+0x12>
    1480:	90 95       	com	r25
    1482:	80 95       	com	r24
    1484:	70 95       	com	r23
    1486:	61 95       	neg	r22
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	8f 4f       	sbci	r24, 0xFF	; 255
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	99 23       	and	r25, r25
    1490:	a9 f0       	breq	.+42     	; 0x14bc <__floatsisf+0x40>
    1492:	f9 2f       	mov	r31, r25
    1494:	96 e9       	ldi	r25, 0x96	; 150
    1496:	bb 27       	eor	r27, r27
    1498:	93 95       	inc	r25
    149a:	f6 95       	lsr	r31
    149c:	87 95       	ror	r24
    149e:	77 95       	ror	r23
    14a0:	67 95       	ror	r22
    14a2:	b7 95       	ror	r27
    14a4:	f1 11       	cpse	r31, r1
    14a6:	f8 cf       	rjmp	.-16     	; 0x1498 <__floatsisf+0x1c>
    14a8:	fa f4       	brpl	.+62     	; 0x14e8 <__floatsisf+0x6c>
    14aa:	bb 0f       	add	r27, r27
    14ac:	11 f4       	brne	.+4      	; 0x14b2 <__floatsisf+0x36>
    14ae:	60 ff       	sbrs	r22, 0
    14b0:	1b c0       	rjmp	.+54     	; 0x14e8 <__floatsisf+0x6c>
    14b2:	6f 5f       	subi	r22, 0xFF	; 255
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	8f 4f       	sbci	r24, 0xFF	; 255
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	16 c0       	rjmp	.+44     	; 0x14e8 <__floatsisf+0x6c>
    14bc:	88 23       	and	r24, r24
    14be:	11 f0       	breq	.+4      	; 0x14c4 <__floatsisf+0x48>
    14c0:	96 e9       	ldi	r25, 0x96	; 150
    14c2:	11 c0       	rjmp	.+34     	; 0x14e6 <__floatsisf+0x6a>
    14c4:	77 23       	and	r23, r23
    14c6:	21 f0       	breq	.+8      	; 0x14d0 <__floatsisf+0x54>
    14c8:	9e e8       	ldi	r25, 0x8E	; 142
    14ca:	87 2f       	mov	r24, r23
    14cc:	76 2f       	mov	r23, r22
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <__floatsisf+0x5e>
    14d0:	66 23       	and	r22, r22
    14d2:	71 f0       	breq	.+28     	; 0x14f0 <__floatsisf+0x74>
    14d4:	96 e8       	ldi	r25, 0x86	; 134
    14d6:	86 2f       	mov	r24, r22
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	2a f0       	brmi	.+10     	; 0x14e8 <__floatsisf+0x6c>
    14de:	9a 95       	dec	r25
    14e0:	66 0f       	add	r22, r22
    14e2:	77 1f       	adc	r23, r23
    14e4:	88 1f       	adc	r24, r24
    14e6:	da f7       	brpl	.-10     	; 0x14de <__floatsisf+0x62>
    14e8:	88 0f       	add	r24, r24
    14ea:	96 95       	lsr	r25
    14ec:	87 95       	ror	r24
    14ee:	97 f9       	bld	r25, 7
    14f0:	08 95       	ret

000014f2 <__fp_cmp>:
    14f2:	99 0f       	add	r25, r25
    14f4:	00 08       	sbc	r0, r0
    14f6:	55 0f       	add	r21, r21
    14f8:	aa 0b       	sbc	r26, r26
    14fa:	e0 e8       	ldi	r30, 0x80	; 128
    14fc:	fe ef       	ldi	r31, 0xFE	; 254
    14fe:	16 16       	cp	r1, r22
    1500:	17 06       	cpc	r1, r23
    1502:	e8 07       	cpc	r30, r24
    1504:	f9 07       	cpc	r31, r25
    1506:	c0 f0       	brcs	.+48     	; 0x1538 <__fp_cmp+0x46>
    1508:	12 16       	cp	r1, r18
    150a:	13 06       	cpc	r1, r19
    150c:	e4 07       	cpc	r30, r20
    150e:	f5 07       	cpc	r31, r21
    1510:	98 f0       	brcs	.+38     	; 0x1538 <__fp_cmp+0x46>
    1512:	62 1b       	sub	r22, r18
    1514:	73 0b       	sbc	r23, r19
    1516:	84 0b       	sbc	r24, r20
    1518:	95 0b       	sbc	r25, r21
    151a:	39 f4       	brne	.+14     	; 0x152a <__fp_cmp+0x38>
    151c:	0a 26       	eor	r0, r26
    151e:	61 f0       	breq	.+24     	; 0x1538 <__fp_cmp+0x46>
    1520:	23 2b       	or	r18, r19
    1522:	24 2b       	or	r18, r20
    1524:	25 2b       	or	r18, r21
    1526:	21 f4       	brne	.+8      	; 0x1530 <__fp_cmp+0x3e>
    1528:	08 95       	ret
    152a:	0a 26       	eor	r0, r26
    152c:	09 f4       	brne	.+2      	; 0x1530 <__fp_cmp+0x3e>
    152e:	a1 40       	sbci	r26, 0x01	; 1
    1530:	a6 95       	lsr	r26
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	81 1d       	adc	r24, r1
    1536:	81 1d       	adc	r24, r1
    1538:	08 95       	ret

0000153a <__fp_inf>:
    153a:	97 f9       	bld	r25, 7
    153c:	9f 67       	ori	r25, 0x7F	; 127
    153e:	80 e8       	ldi	r24, 0x80	; 128
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	08 95       	ret

00001546 <__fp_nan>:
    1546:	9f ef       	ldi	r25, 0xFF	; 255
    1548:	80 ec       	ldi	r24, 0xC0	; 192
    154a:	08 95       	ret

0000154c <__fp_pscA>:
    154c:	00 24       	eor	r0, r0
    154e:	0a 94       	dec	r0
    1550:	16 16       	cp	r1, r22
    1552:	17 06       	cpc	r1, r23
    1554:	18 06       	cpc	r1, r24
    1556:	09 06       	cpc	r0, r25
    1558:	08 95       	ret

0000155a <__fp_pscB>:
    155a:	00 24       	eor	r0, r0
    155c:	0a 94       	dec	r0
    155e:	12 16       	cp	r1, r18
    1560:	13 06       	cpc	r1, r19
    1562:	14 06       	cpc	r1, r20
    1564:	05 06       	cpc	r0, r21
    1566:	08 95       	ret

00001568 <__fp_round>:
    1568:	09 2e       	mov	r0, r25
    156a:	03 94       	inc	r0
    156c:	00 0c       	add	r0, r0
    156e:	11 f4       	brne	.+4      	; 0x1574 <__fp_round+0xc>
    1570:	88 23       	and	r24, r24
    1572:	52 f0       	brmi	.+20     	; 0x1588 <__fp_round+0x20>
    1574:	bb 0f       	add	r27, r27
    1576:	40 f4       	brcc	.+16     	; 0x1588 <__fp_round+0x20>
    1578:	bf 2b       	or	r27, r31
    157a:	11 f4       	brne	.+4      	; 0x1580 <__fp_round+0x18>
    157c:	60 ff       	sbrs	r22, 0
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <__fp_round+0x20>
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	08 95       	ret

0000158a <__fp_split3>:
    158a:	57 fd       	sbrc	r21, 7
    158c:	90 58       	subi	r25, 0x80	; 128
    158e:	44 0f       	add	r20, r20
    1590:	55 1f       	adc	r21, r21
    1592:	59 f0       	breq	.+22     	; 0x15aa <__fp_splitA+0x10>
    1594:	5f 3f       	cpi	r21, 0xFF	; 255
    1596:	71 f0       	breq	.+28     	; 0x15b4 <__fp_splitA+0x1a>
    1598:	47 95       	ror	r20

0000159a <__fp_splitA>:
    159a:	88 0f       	add	r24, r24
    159c:	97 fb       	bst	r25, 7
    159e:	99 1f       	adc	r25, r25
    15a0:	61 f0       	breq	.+24     	; 0x15ba <__fp_splitA+0x20>
    15a2:	9f 3f       	cpi	r25, 0xFF	; 255
    15a4:	79 f0       	breq	.+30     	; 0x15c4 <__fp_splitA+0x2a>
    15a6:	87 95       	ror	r24
    15a8:	08 95       	ret
    15aa:	12 16       	cp	r1, r18
    15ac:	13 06       	cpc	r1, r19
    15ae:	14 06       	cpc	r1, r20
    15b0:	55 1f       	adc	r21, r21
    15b2:	f2 cf       	rjmp	.-28     	; 0x1598 <__fp_split3+0xe>
    15b4:	46 95       	lsr	r20
    15b6:	f1 df       	rcall	.-30     	; 0x159a <__fp_splitA>
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <__fp_splitA+0x30>
    15ba:	16 16       	cp	r1, r22
    15bc:	17 06       	cpc	r1, r23
    15be:	18 06       	cpc	r1, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	f1 cf       	rjmp	.-30     	; 0x15a6 <__fp_splitA+0xc>
    15c4:	86 95       	lsr	r24
    15c6:	71 05       	cpc	r23, r1
    15c8:	61 05       	cpc	r22, r1
    15ca:	08 94       	sec
    15cc:	08 95       	ret

000015ce <__fp_zero>:
    15ce:	e8 94       	clt

000015d0 <__fp_szero>:
    15d0:	bb 27       	eor	r27, r27
    15d2:	66 27       	eor	r22, r22
    15d4:	77 27       	eor	r23, r23
    15d6:	cb 01       	movw	r24, r22
    15d8:	97 f9       	bld	r25, 7
    15da:	08 95       	ret

000015dc <__mulsf3>:
    15dc:	0b d0       	rcall	.+22     	; 0x15f4 <__mulsf3x>
    15de:	c4 cf       	rjmp	.-120    	; 0x1568 <__fp_round>
    15e0:	b5 df       	rcall	.-150    	; 0x154c <__fp_pscA>
    15e2:	28 f0       	brcs	.+10     	; 0x15ee <__mulsf3+0x12>
    15e4:	ba df       	rcall	.-140    	; 0x155a <__fp_pscB>
    15e6:	18 f0       	brcs	.+6      	; 0x15ee <__mulsf3+0x12>
    15e8:	95 23       	and	r25, r21
    15ea:	09 f0       	breq	.+2      	; 0x15ee <__mulsf3+0x12>
    15ec:	a6 cf       	rjmp	.-180    	; 0x153a <__fp_inf>
    15ee:	ab cf       	rjmp	.-170    	; 0x1546 <__fp_nan>
    15f0:	11 24       	eor	r1, r1
    15f2:	ee cf       	rjmp	.-36     	; 0x15d0 <__fp_szero>

000015f4 <__mulsf3x>:
    15f4:	ca df       	rcall	.-108    	; 0x158a <__fp_split3>
    15f6:	a0 f3       	brcs	.-24     	; 0x15e0 <__mulsf3+0x4>

000015f8 <__mulsf3_pse>:
    15f8:	95 9f       	mul	r25, r21
    15fa:	d1 f3       	breq	.-12     	; 0x15f0 <__mulsf3+0x14>
    15fc:	95 0f       	add	r25, r21
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	55 1f       	adc	r21, r21
    1602:	62 9f       	mul	r22, r18
    1604:	f0 01       	movw	r30, r0
    1606:	72 9f       	mul	r23, r18
    1608:	bb 27       	eor	r27, r27
    160a:	f0 0d       	add	r31, r0
    160c:	b1 1d       	adc	r27, r1
    160e:	63 9f       	mul	r22, r19
    1610:	aa 27       	eor	r26, r26
    1612:	f0 0d       	add	r31, r0
    1614:	b1 1d       	adc	r27, r1
    1616:	aa 1f       	adc	r26, r26
    1618:	64 9f       	mul	r22, r20
    161a:	66 27       	eor	r22, r22
    161c:	b0 0d       	add	r27, r0
    161e:	a1 1d       	adc	r26, r1
    1620:	66 1f       	adc	r22, r22
    1622:	82 9f       	mul	r24, r18
    1624:	22 27       	eor	r18, r18
    1626:	b0 0d       	add	r27, r0
    1628:	a1 1d       	adc	r26, r1
    162a:	62 1f       	adc	r22, r18
    162c:	73 9f       	mul	r23, r19
    162e:	b0 0d       	add	r27, r0
    1630:	a1 1d       	adc	r26, r1
    1632:	62 1f       	adc	r22, r18
    1634:	83 9f       	mul	r24, r19
    1636:	a0 0d       	add	r26, r0
    1638:	61 1d       	adc	r22, r1
    163a:	22 1f       	adc	r18, r18
    163c:	74 9f       	mul	r23, r20
    163e:	33 27       	eor	r19, r19
    1640:	a0 0d       	add	r26, r0
    1642:	61 1d       	adc	r22, r1
    1644:	23 1f       	adc	r18, r19
    1646:	84 9f       	mul	r24, r20
    1648:	60 0d       	add	r22, r0
    164a:	21 1d       	adc	r18, r1
    164c:	82 2f       	mov	r24, r18
    164e:	76 2f       	mov	r23, r22
    1650:	6a 2f       	mov	r22, r26
    1652:	11 24       	eor	r1, r1
    1654:	9f 57       	subi	r25, 0x7F	; 127
    1656:	50 40       	sbci	r21, 0x00	; 0
    1658:	8a f0       	brmi	.+34     	; 0x167c <__mulsf3_pse+0x84>
    165a:	e1 f0       	breq	.+56     	; 0x1694 <__mulsf3_pse+0x9c>
    165c:	88 23       	and	r24, r24
    165e:	4a f0       	brmi	.+18     	; 0x1672 <__mulsf3_pse+0x7a>
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	bb 1f       	adc	r27, r27
    1666:	66 1f       	adc	r22, r22
    1668:	77 1f       	adc	r23, r23
    166a:	88 1f       	adc	r24, r24
    166c:	91 50       	subi	r25, 0x01	; 1
    166e:	50 40       	sbci	r21, 0x00	; 0
    1670:	a9 f7       	brne	.-22     	; 0x165c <__mulsf3_pse+0x64>
    1672:	9e 3f       	cpi	r25, 0xFE	; 254
    1674:	51 05       	cpc	r21, r1
    1676:	70 f0       	brcs	.+28     	; 0x1694 <__mulsf3_pse+0x9c>
    1678:	60 cf       	rjmp	.-320    	; 0x153a <__fp_inf>
    167a:	aa cf       	rjmp	.-172    	; 0x15d0 <__fp_szero>
    167c:	5f 3f       	cpi	r21, 0xFF	; 255
    167e:	ec f3       	brlt	.-6      	; 0x167a <__mulsf3_pse+0x82>
    1680:	98 3e       	cpi	r25, 0xE8	; 232
    1682:	dc f3       	brlt	.-10     	; 0x167a <__mulsf3_pse+0x82>
    1684:	86 95       	lsr	r24
    1686:	77 95       	ror	r23
    1688:	67 95       	ror	r22
    168a:	b7 95       	ror	r27
    168c:	f7 95       	ror	r31
    168e:	e7 95       	ror	r30
    1690:	9f 5f       	subi	r25, 0xFF	; 255
    1692:	c1 f7       	brne	.-16     	; 0x1684 <__mulsf3_pse+0x8c>
    1694:	fe 2b       	or	r31, r30
    1696:	88 0f       	add	r24, r24
    1698:	91 1d       	adc	r25, r1
    169a:	96 95       	lsr	r25
    169c:	87 95       	ror	r24
    169e:	97 f9       	bld	r25, 7
    16a0:	08 95       	ret

000016a2 <__tablejump2__>:
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	88 1f       	adc	r24, r24
    16a8:	8b bf       	out	0x3b, r24	; 59
    16aa:	07 90       	elpm	r0, Z+
    16ac:	f6 91       	elpm	r31, Z
    16ae:	e0 2d       	mov	r30, r0
    16b0:	19 94       	eijmp

000016b2 <__umulhisi3>:
    16b2:	a2 9f       	mul	r26, r18
    16b4:	b0 01       	movw	r22, r0
    16b6:	b3 9f       	mul	r27, r19
    16b8:	c0 01       	movw	r24, r0
    16ba:	a3 9f       	mul	r26, r19
    16bc:	70 0d       	add	r23, r0
    16be:	81 1d       	adc	r24, r1
    16c0:	11 24       	eor	r1, r1
    16c2:	91 1d       	adc	r25, r1
    16c4:	b2 9f       	mul	r27, r18
    16c6:	70 0d       	add	r23, r0
    16c8:	81 1d       	adc	r24, r1
    16ca:	11 24       	eor	r1, r1
    16cc:	91 1d       	adc	r25, r1
    16ce:	08 95       	ret

000016d0 <malloc>:
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	91 05       	cpc	r25, r1
    16dc:	10 f4       	brcc	.+4      	; 0x16e2 <malloc+0x12>
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <__flp>
    16e6:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <__flp+0x1>
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	a0 e0       	ldi	r26, 0x00	; 0
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	30 97       	sbiw	r30, 0x00	; 0
    16f4:	19 f1       	breq	.+70     	; 0x173c <malloc+0x6c>
    16f6:	40 81       	ld	r20, Z
    16f8:	51 81       	ldd	r21, Z+1	; 0x01
    16fa:	02 81       	ldd	r16, Z+2	; 0x02
    16fc:	13 81       	ldd	r17, Z+3	; 0x03
    16fe:	48 17       	cp	r20, r24
    1700:	59 07       	cpc	r21, r25
    1702:	c8 f0       	brcs	.+50     	; 0x1736 <malloc+0x66>
    1704:	84 17       	cp	r24, r20
    1706:	95 07       	cpc	r25, r21
    1708:	69 f4       	brne	.+26     	; 0x1724 <malloc+0x54>
    170a:	10 97       	sbiw	r26, 0x00	; 0
    170c:	31 f0       	breq	.+12     	; 0x171a <malloc+0x4a>
    170e:	12 96       	adiw	r26, 0x02	; 2
    1710:	0c 93       	st	X, r16
    1712:	12 97       	sbiw	r26, 0x02	; 2
    1714:	13 96       	adiw	r26, 0x03	; 3
    1716:	1c 93       	st	X, r17
    1718:	27 c0       	rjmp	.+78     	; 0x1768 <malloc+0x98>
    171a:	00 93 a7 02 	sts	0x02A7, r16	; 0x8002a7 <__flp>
    171e:	10 93 a8 02 	sts	0x02A8, r17	; 0x8002a8 <__flp+0x1>
    1722:	22 c0       	rjmp	.+68     	; 0x1768 <malloc+0x98>
    1724:	21 15       	cp	r18, r1
    1726:	31 05       	cpc	r19, r1
    1728:	19 f0       	breq	.+6      	; 0x1730 <malloc+0x60>
    172a:	42 17       	cp	r20, r18
    172c:	53 07       	cpc	r21, r19
    172e:	18 f4       	brcc	.+6      	; 0x1736 <malloc+0x66>
    1730:	9a 01       	movw	r18, r20
    1732:	bd 01       	movw	r22, r26
    1734:	ef 01       	movw	r28, r30
    1736:	df 01       	movw	r26, r30
    1738:	f8 01       	movw	r30, r16
    173a:	db cf       	rjmp	.-74     	; 0x16f2 <malloc+0x22>
    173c:	21 15       	cp	r18, r1
    173e:	31 05       	cpc	r19, r1
    1740:	f9 f0       	breq	.+62     	; 0x1780 <malloc+0xb0>
    1742:	28 1b       	sub	r18, r24
    1744:	39 0b       	sbc	r19, r25
    1746:	24 30       	cpi	r18, 0x04	; 4
    1748:	31 05       	cpc	r19, r1
    174a:	80 f4       	brcc	.+32     	; 0x176c <malloc+0x9c>
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	9b 81       	ldd	r25, Y+3	; 0x03
    1750:	61 15       	cp	r22, r1
    1752:	71 05       	cpc	r23, r1
    1754:	21 f0       	breq	.+8      	; 0x175e <malloc+0x8e>
    1756:	fb 01       	movw	r30, r22
    1758:	93 83       	std	Z+3, r25	; 0x03
    175a:	82 83       	std	Z+2, r24	; 0x02
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <malloc+0x96>
    175e:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <__flp+0x1>
    1762:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <__flp>
    1766:	fe 01       	movw	r30, r28
    1768:	32 96       	adiw	r30, 0x02	; 2
    176a:	44 c0       	rjmp	.+136    	; 0x17f4 <malloc+0x124>
    176c:	fe 01       	movw	r30, r28
    176e:	e2 0f       	add	r30, r18
    1770:	f3 1f       	adc	r31, r19
    1772:	81 93       	st	Z+, r24
    1774:	91 93       	st	Z+, r25
    1776:	22 50       	subi	r18, 0x02	; 2
    1778:	31 09       	sbc	r19, r1
    177a:	39 83       	std	Y+1, r19	; 0x01
    177c:	28 83       	st	Y, r18
    177e:	3a c0       	rjmp	.+116    	; 0x17f4 <malloc+0x124>
    1780:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__brkval>
    1784:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__brkval+0x1>
    1788:	23 2b       	or	r18, r19
    178a:	41 f4       	brne	.+16     	; 0x179c <malloc+0xcc>
    178c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1790:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1794:	30 93 a6 02 	sts	0x02A6, r19	; 0x8002a6 <__brkval+0x1>
    1798:	20 93 a5 02 	sts	0x02A5, r18	; 0x8002a5 <__brkval>
    179c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    17a0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    17a4:	21 15       	cp	r18, r1
    17a6:	31 05       	cpc	r19, r1
    17a8:	41 f4       	brne	.+16     	; 0x17ba <malloc+0xea>
    17aa:	2d b7       	in	r18, 0x3d	; 61
    17ac:	3e b7       	in	r19, 0x3e	; 62
    17ae:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    17b2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    17b6:	24 1b       	sub	r18, r20
    17b8:	35 0b       	sbc	r19, r21
    17ba:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <__brkval>
    17be:	f0 91 a6 02 	lds	r31, 0x02A6	; 0x8002a6 <__brkval+0x1>
    17c2:	e2 17       	cp	r30, r18
    17c4:	f3 07       	cpc	r31, r19
    17c6:	a0 f4       	brcc	.+40     	; 0x17f0 <malloc+0x120>
    17c8:	2e 1b       	sub	r18, r30
    17ca:	3f 0b       	sbc	r19, r31
    17cc:	28 17       	cp	r18, r24
    17ce:	39 07       	cpc	r19, r25
    17d0:	78 f0       	brcs	.+30     	; 0x17f0 <malloc+0x120>
    17d2:	ac 01       	movw	r20, r24
    17d4:	4e 5f       	subi	r20, 0xFE	; 254
    17d6:	5f 4f       	sbci	r21, 0xFF	; 255
    17d8:	24 17       	cp	r18, r20
    17da:	35 07       	cpc	r19, r21
    17dc:	48 f0       	brcs	.+18     	; 0x17f0 <malloc+0x120>
    17de:	4e 0f       	add	r20, r30
    17e0:	5f 1f       	adc	r21, r31
    17e2:	50 93 a6 02 	sts	0x02A6, r21	; 0x8002a6 <__brkval+0x1>
    17e6:	40 93 a5 02 	sts	0x02A5, r20	; 0x8002a5 <__brkval>
    17ea:	81 93       	st	Z+, r24
    17ec:	91 93       	st	Z+, r25
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <malloc+0x124>
    17f0:	e0 e0       	ldi	r30, 0x00	; 0
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	cf 01       	movw	r24, r30
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	08 95       	ret

00001800 <free>:
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	09 f4       	brne	.+2      	; 0x180a <free+0xa>
    1808:	81 c0       	rjmp	.+258    	; 0x190c <free+0x10c>
    180a:	fc 01       	movw	r30, r24
    180c:	32 97       	sbiw	r30, 0x02	; 2
    180e:	13 82       	std	Z+3, r1	; 0x03
    1810:	12 82       	std	Z+2, r1	; 0x02
    1812:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <__flp>
    1816:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <__flp+0x1>
    181a:	10 97       	sbiw	r26, 0x00	; 0
    181c:	81 f4       	brne	.+32     	; 0x183e <free+0x3e>
    181e:	20 81       	ld	r18, Z
    1820:	31 81       	ldd	r19, Z+1	; 0x01
    1822:	82 0f       	add	r24, r18
    1824:	93 1f       	adc	r25, r19
    1826:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__brkval>
    182a:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__brkval+0x1>
    182e:	28 17       	cp	r18, r24
    1830:	39 07       	cpc	r19, r25
    1832:	51 f5       	brne	.+84     	; 0x1888 <free+0x88>
    1834:	f0 93 a6 02 	sts	0x02A6, r31	; 0x8002a6 <__brkval+0x1>
    1838:	e0 93 a5 02 	sts	0x02A5, r30	; 0x8002a5 <__brkval>
    183c:	67 c0       	rjmp	.+206    	; 0x190c <free+0x10c>
    183e:	ed 01       	movw	r28, r26
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	ce 17       	cp	r28, r30
    1846:	df 07       	cpc	r29, r31
    1848:	40 f4       	brcc	.+16     	; 0x185a <free+0x5a>
    184a:	4a 81       	ldd	r20, Y+2	; 0x02
    184c:	5b 81       	ldd	r21, Y+3	; 0x03
    184e:	9e 01       	movw	r18, r28
    1850:	41 15       	cp	r20, r1
    1852:	51 05       	cpc	r21, r1
    1854:	f1 f0       	breq	.+60     	; 0x1892 <free+0x92>
    1856:	ea 01       	movw	r28, r20
    1858:	f5 cf       	rjmp	.-22     	; 0x1844 <free+0x44>
    185a:	d3 83       	std	Z+3, r29	; 0x03
    185c:	c2 83       	std	Z+2, r28	; 0x02
    185e:	40 81       	ld	r20, Z
    1860:	51 81       	ldd	r21, Z+1	; 0x01
    1862:	84 0f       	add	r24, r20
    1864:	95 1f       	adc	r25, r21
    1866:	c8 17       	cp	r28, r24
    1868:	d9 07       	cpc	r29, r25
    186a:	59 f4       	brne	.+22     	; 0x1882 <free+0x82>
    186c:	88 81       	ld	r24, Y
    186e:	99 81       	ldd	r25, Y+1	; 0x01
    1870:	84 0f       	add	r24, r20
    1872:	95 1f       	adc	r25, r21
    1874:	02 96       	adiw	r24, 0x02	; 2
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	80 83       	st	Z, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	93 83       	std	Z+3, r25	; 0x03
    1880:	82 83       	std	Z+2, r24	; 0x02
    1882:	21 15       	cp	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	29 f4       	brne	.+10     	; 0x1892 <free+0x92>
    1888:	f0 93 a8 02 	sts	0x02A8, r31	; 0x8002a8 <__flp+0x1>
    188c:	e0 93 a7 02 	sts	0x02A7, r30	; 0x8002a7 <__flp>
    1890:	3d c0       	rjmp	.+122    	; 0x190c <free+0x10c>
    1892:	e9 01       	movw	r28, r18
    1894:	fb 83       	std	Y+3, r31	; 0x03
    1896:	ea 83       	std	Y+2, r30	; 0x02
    1898:	49 91       	ld	r20, Y+
    189a:	59 91       	ld	r21, Y+
    189c:	c4 0f       	add	r28, r20
    189e:	d5 1f       	adc	r29, r21
    18a0:	ec 17       	cp	r30, r28
    18a2:	fd 07       	cpc	r31, r29
    18a4:	61 f4       	brne	.+24     	; 0x18be <free+0xbe>
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	84 0f       	add	r24, r20
    18ac:	95 1f       	adc	r25, r21
    18ae:	02 96       	adiw	r24, 0x02	; 2
    18b0:	e9 01       	movw	r28, r18
    18b2:	99 83       	std	Y+1, r25	; 0x01
    18b4:	88 83       	st	Y, r24
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	9b 83       	std	Y+3, r25	; 0x03
    18bc:	8a 83       	std	Y+2, r24	; 0x02
    18be:	e0 e0       	ldi	r30, 0x00	; 0
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	12 96       	adiw	r26, 0x02	; 2
    18c4:	8d 91       	ld	r24, X+
    18c6:	9c 91       	ld	r25, X
    18c8:	13 97       	sbiw	r26, 0x03	; 3
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	19 f0       	breq	.+6      	; 0x18d4 <free+0xd4>
    18ce:	fd 01       	movw	r30, r26
    18d0:	dc 01       	movw	r26, r24
    18d2:	f7 cf       	rjmp	.-18     	; 0x18c2 <free+0xc2>
    18d4:	8d 91       	ld	r24, X+
    18d6:	9c 91       	ld	r25, X
    18d8:	11 97       	sbiw	r26, 0x01	; 1
    18da:	9d 01       	movw	r18, r26
    18dc:	2e 5f       	subi	r18, 0xFE	; 254
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	82 0f       	add	r24, r18
    18e2:	93 1f       	adc	r25, r19
    18e4:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__brkval>
    18e8:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__brkval+0x1>
    18ec:	28 17       	cp	r18, r24
    18ee:	39 07       	cpc	r19, r25
    18f0:	69 f4       	brne	.+26     	; 0x190c <free+0x10c>
    18f2:	30 97       	sbiw	r30, 0x00	; 0
    18f4:	29 f4       	brne	.+10     	; 0x1900 <free+0x100>
    18f6:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <__flp+0x1>
    18fa:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <__flp>
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <free+0x104>
    1900:	13 82       	std	Z+3, r1	; 0x03
    1902:	12 82       	std	Z+2, r1	; 0x02
    1904:	b0 93 a6 02 	sts	0x02A6, r27	; 0x8002a6 <__brkval+0x1>
    1908:	a0 93 a5 02 	sts	0x02A5, r26	; 0x8002a5 <__brkval>
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <_exit>:
    1912:	f8 94       	cli

00001914 <__stop_program>:
    1914:	ff cf       	rjmp	.-2      	; 0x1914 <__stop_program>
