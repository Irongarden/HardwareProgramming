
assignment_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  000019b6  00001a4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800248  00800248  00001a92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003407  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a45  00000000  00000000  000051fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c8c  00000000  00000000  00006c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000864  00000000  00000000  000088cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c0d  00000000  00000000  00009130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018b2  00000000  00000000  00009d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000b5ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	c8 c1       	rjmp	.+912    	; 0x39e <__vector_3>
       e:	00 00       	nop
      10:	f3 c1       	rjmp	.+998    	; 0x3f8 <__vector_4>
      12:	00 00       	nop
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	00 00       	nop
      18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	15 c6       	rjmp	.+3114   	; 0xca0 <__vector_29>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c5       	rjmp	.+2704   	; 0xb3a <__vector_42>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4d 02       	muls	r20, r29
      e6:	61 02       	muls	r22, r17
      e8:	75 02       	muls	r23, r21
      ea:	89 02       	muls	r24, r25
      ec:	9d 02       	muls	r25, r29
      ee:	b1 02       	muls	r27, r17
      f0:	c5 02       	muls	r28, r21
      f2:	d9 02       	muls	r29, r25
      f4:	ed 02       	muls	r30, r29
      f6:	01 03       	mulsu	r16, r17
      f8:	15 03       	mulsu	r17, r21

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d1 e2       	ldi	r29, 0x21	; 33
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_copy_data>:
     10a:	12 e0       	ldi	r17, 0x02	; 2
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b2 e0       	ldi	r27, 0x02	; 2
     110:	e6 eb       	ldi	r30, 0xB6	; 182
     112:	f9 e1       	ldi	r31, 0x19	; 25
     114:	00 e0       	ldi	r16, 0x00	; 0
     116:	0b bf       	out	0x3b, r16	; 59
     118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x14>
     11a:	07 90       	elpm	r0, Z+
     11c:	0d 92       	st	X+, r0
     11e:	a8 34       	cpi	r26, 0x48	; 72
     120:	b1 07       	cpc	r27, r17
     122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0x10>

00000124 <__do_clear_bss>:
     124:	22 e0       	ldi	r18, 0x02	; 2
     126:	a8 e4       	ldi	r26, 0x48	; 72
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
     12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
     12e:	a9 3a       	cpi	r26, 0xA9	; 169
     130:	b2 07       	cpc	r27, r18
     132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>
     134:	5c d7       	rcall	.+3768   	; 0xfee <main>
     136:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <configure_output>:
#include <stdlib.h>
#include <avr/io.h>
#include "../include/digital_output.h"

static void configure_output(io_descriptor_t output)
{
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	8c 01       	movw	r16, r24
	// Initialize Data Direction Register for each output-pin.
	*(io_ddr(output)) |= _BV(io_bit(output));
     146:	a0 d2       	rcall	.+1344   	; 0x688 <io_bit>
     148:	c1 e0       	ldi	r28, 0x01	; 1
     14a:	d0 e0       	ldi	r29, 0x00	; 0
     14c:	02 c0       	rjmp	.+4      	; 0x152 <configure_output+0x16>
     14e:	cc 0f       	add	r28, r28
     150:	dd 1f       	adc	r29, r29
     152:	8a 95       	dec	r24
     154:	e2 f7       	brpl	.-8      	; 0x14e <configure_output+0x12>
     156:	c8 01       	movw	r24, r16
     158:	88 d2       	rcall	.+1296   	; 0x66a <io_ddr>
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	c2 2b       	or	r28, r18
     160:	c0 83       	st	Z, r28
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	1f 91       	pop	r17
     168:	0f 91       	pop	r16
     16a:	08 95       	ret

0000016c <output_set_state>:
	
	return output;
}

return_code_t output_set_state(io_descriptor_t output, state_t state)
{
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ec 01       	movw	r28, r24
     176:	16 2f       	mov	r17, r22
	if (io_active_state(output) == ACTIVE_LOW) {
     178:	84 d2       	rcall	.+1288   	; 0x682 <io_active_state>
     17a:	81 11       	cpse	r24, r1
     17c:	24 c0       	rjmp	.+72     	; 0x1c6 <output_set_state+0x5a>
		if (state == ACTIVE) {
     17e:	11 30       	cpi	r17, 0x01	; 1
     180:	91 f4       	brne	.+36     	; 0x1a6 <output_set_state+0x3a>
			// Set port low.
			*(io_port(output)) &= ~_BV(io_bit(output));
     182:	ce 01       	movw	r24, r28
     184:	81 d2       	rcall	.+1282   	; 0x688 <io_bit>
     186:	01 e0       	ldi	r16, 0x01	; 1
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	02 c0       	rjmp	.+4      	; 0x190 <output_set_state+0x24>
     18c:	00 0f       	add	r16, r16
     18e:	11 1f       	adc	r17, r17
     190:	8a 95       	dec	r24
     192:	e2 f7       	brpl	.-8      	; 0x18c <output_set_state+0x20>
     194:	00 95       	com	r16
     196:	10 95       	com	r17
     198:	ce 01       	movw	r24, r28
     19a:	6f d2       	rcall	.+1246   	; 0x67a <io_port>
     19c:	fc 01       	movw	r30, r24
     19e:	20 81       	ld	r18, Z
     1a0:	02 23       	and	r16, r18
     1a2:	00 83       	st	Z, r16
     1a4:	33 c0       	rjmp	.+102    	; 0x20c <output_set_state+0xa0>
		}
		else {
			// Set port high.
			*(io_port(output)) |= _BV(io_bit(output));
     1a6:	ce 01       	movw	r24, r28
     1a8:	6f d2       	rcall	.+1246   	; 0x688 <io_bit>
     1aa:	01 e0       	ldi	r16, 0x01	; 1
     1ac:	10 e0       	ldi	r17, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <output_set_state+0x48>
     1b0:	00 0f       	add	r16, r16
     1b2:	11 1f       	adc	r17, r17
     1b4:	8a 95       	dec	r24
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <output_set_state+0x44>
     1b8:	ce 01       	movw	r24, r28
     1ba:	5f d2       	rcall	.+1214   	; 0x67a <io_port>
     1bc:	fc 01       	movw	r30, r24
     1be:	20 81       	ld	r18, Z
     1c0:	02 2b       	or	r16, r18
     1c2:	00 83       	st	Z, r16
     1c4:	23 c0       	rjmp	.+70     	; 0x20c <output_set_state+0xa0>
		}
	}
	else {
		if (state == ACTIVE) {
     1c6:	11 30       	cpi	r17, 0x01	; 1
     1c8:	81 f4       	brne	.+32     	; 0x1ea <output_set_state+0x7e>
			// set port high.
			*(io_port(output)) |= _BV(io_bit(output));
     1ca:	ce 01       	movw	r24, r28
     1cc:	5d d2       	rcall	.+1210   	; 0x688 <io_bit>
     1ce:	01 e0       	ldi	r16, 0x01	; 1
     1d0:	10 e0       	ldi	r17, 0x00	; 0
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <output_set_state+0x6c>
     1d4:	00 0f       	add	r16, r16
     1d6:	11 1f       	adc	r17, r17
     1d8:	8a 95       	dec	r24
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <output_set_state+0x68>
     1dc:	ce 01       	movw	r24, r28
     1de:	4d d2       	rcall	.+1178   	; 0x67a <io_port>
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 81       	ld	r18, Z
     1e4:	02 2b       	or	r16, r18
     1e6:	00 83       	st	Z, r16
     1e8:	11 c0       	rjmp	.+34     	; 0x20c <output_set_state+0xa0>
		}
		else {
			// Set port low.
			*(io_port(output)) &= ~_BV(io_bit(output));
     1ea:	ce 01       	movw	r24, r28
     1ec:	4d d2       	rcall	.+1178   	; 0x688 <io_bit>
     1ee:	01 e0       	ldi	r16, 0x01	; 1
     1f0:	10 e0       	ldi	r17, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <output_set_state+0x8c>
     1f4:	00 0f       	add	r16, r16
     1f6:	11 1f       	adc	r17, r17
     1f8:	8a 95       	dec	r24
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <output_set_state+0x88>
     1fc:	00 95       	com	r16
     1fe:	10 95       	com	r17
     200:	ce 01       	movw	r24, r28
     202:	3b d2       	rcall	.+1142   	; 0x67a <io_port>
     204:	fc 01       	movw	r30, r24
     206:	20 81       	ld	r18, Z
     208:	02 23       	and	r16, r18
     20a:	00 83       	st	Z, r16
     20c:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	
	// Could preform a check of the actual pin state. 
	return OK;
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <output_init>:
     218:	1f 93       	push	r17
	// Initialize Data Direction Register for each output-pin.
	*(io_ddr(output)) |= _BV(io_bit(output));
}

io_descriptor_t output_init(port_t port, uint8_t bit, active_state_t active, state_t default_state)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	12 2f       	mov	r17, r18
	io_descriptor_t output = io_descriptor_init(port, bit, active);
     220:	18 d1       	rcall	.+560    	; 0x452 <io_descriptor_init>
     222:	ec 01       	movw	r28, r24
	
	configure_output(output);
     224:	8b df       	rcall	.-234    	; 0x13c <configure_output>
     226:	61 2f       	mov	r22, r17
	
	output_set_state(output, default_state);
     228:	ce 01       	movw	r24, r28
     22a:	a0 df       	rcall	.-192    	; 0x16c <output_set_state>
     22c:	ce 01       	movw	r24, r28
	
	return output;
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	1f 91       	pop	r17
     234:	08 95       	ret

00000236 <set_trigger>:
     236:	e9 e6       	ldi	r30, 0x69	; 105
}

return_code_t input_destroy(io_descriptor_t input)
{
	return io_descriptor_destroy(input);
}
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	90 81       	ld	r25, Z
     23c:	21 e0       	ldi	r18, 0x01	; 1
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	d9 01       	movw	r26, r18
     242:	02 c0       	rjmp	.+4      	; 0x248 <set_trigger+0x12>
     244:	aa 0f       	add	r26, r26
     246:	bb 1f       	adc	r27, r27
     248:	8a 95       	dec	r24
     24a:	e2 f7       	brpl	.-8      	; 0x244 <set_trigger+0xe>
     24c:	a0 95       	com	r26
     24e:	9a 23       	and	r25, r26
     250:	90 83       	st	Z, r25
     252:	50 81       	ld	r21, Z
     254:	c9 01       	movw	r24, r18
     256:	02 c0       	rjmp	.+4      	; 0x25c <set_trigger+0x26>
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	6a 95       	dec	r22
     25e:	e2 f7       	brpl	.-8      	; 0x258 <set_trigger+0x22>
     260:	85 2b       	or	r24, r21
     262:	80 83       	st	Z, r24
     264:	8d b3       	in	r24, 0x1d	; 29
     266:	02 c0       	rjmp	.+4      	; 0x26c <set_trigger+0x36>
     268:	22 0f       	add	r18, r18
     26a:	33 1f       	adc	r19, r19
     26c:	4a 95       	dec	r20
     26e:	e2 f7       	brpl	.-8      	; 0x268 <set_trigger+0x32>
     270:	28 2b       	or	r18, r24
     272:	2d bb       	out	0x1d, r18	; 29
     274:	08 95       	ret

00000276 <configure_input>:
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	8c 01       	movw	r16, r24
     282:	f6 2e       	mov	r15, r22
     284:	01 d2       	rcall	.+1026   	; 0x688 <io_bit>
     286:	c1 e0       	ldi	r28, 0x01	; 1
     288:	d0 e0       	ldi	r29, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <configure_input+0x1a>
     28c:	cc 0f       	add	r28, r28
     28e:	dd 1f       	adc	r29, r29
     290:	8a 95       	dec	r24
     292:	e2 f7       	brpl	.-8      	; 0x28c <configure_input+0x16>
     294:	c0 95       	com	r28
     296:	d0 95       	com	r29
     298:	c8 01       	movw	r24, r16
     29a:	e7 d1       	rcall	.+974    	; 0x66a <io_ddr>
     29c:	fc 01       	movw	r30, r24
     29e:	20 81       	ld	r18, Z
     2a0:	c2 23       	and	r28, r18
     2a2:	c0 83       	st	Z, r28
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	ff 12       	cpse	r15, r31
     2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <configure_input+0x52>
     2aa:	c8 01       	movw	r24, r16
     2ac:	ed d1       	rcall	.+986    	; 0x688 <io_bit>
     2ae:	c1 e0       	ldi	r28, 0x01	; 1
     2b0:	d0 e0       	ldi	r29, 0x00	; 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <configure_input+0x42>
     2b4:	cc 0f       	add	r28, r28
     2b6:	dd 1f       	adc	r29, r29
     2b8:	8a 95       	dec	r24
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <configure_input+0x3e>
     2bc:	c8 01       	movw	r24, r16
     2be:	dd d1       	rcall	.+954    	; 0x67a <io_port>
     2c0:	fc 01       	movw	r30, r24
     2c2:	20 81       	ld	r18, Z
     2c4:	c2 2b       	or	r28, r18
     2c6:	c0 83       	st	Z, r28
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	08 95       	ret

000002d4 <input_init>:
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	f8 2e       	mov	r15, r24
     2e4:	e6 2e       	mov	r14, r22
     2e6:	d2 2e       	mov	r13, r18
     2e8:	b4 d0       	rcall	.+360    	; 0x452 <io_descriptor_init>
     2ea:	ec 01       	movw	r28, r24
     2ec:	6d 2d       	mov	r22, r13
     2ee:	c3 df       	rcall	.-122    	; 0x276 <configure_input>
     2f0:	01 15       	cp	r16, r1
     2f2:	11 05       	cpc	r17, r1
     2f4:	d1 f0       	breq	.+52     	; 0x32a <input_init+0x56>
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	f8 12       	cpse	r15, r24
     2fa:	17 c0       	rjmp	.+46     	; 0x32a <input_init+0x56>
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	e8 12       	cpse	r14, r24
     300:	09 c0       	rjmp	.+18     	; 0x314 <input_init+0x40>
     302:	10 93 4b 02 	sts	0x024B, r17	; 0x80024b <cb2+0x1>
     306:	00 93 4a 02 	sts	0x024A, r16	; 0x80024a <cb2>
     30a:	42 e0       	ldi	r20, 0x02	; 2
     30c:	65 e0       	ldi	r22, 0x05	; 5
     30e:	84 e0       	ldi	r24, 0x04	; 4
     310:	92 df       	rcall	.-220    	; 0x236 <set_trigger>
     312:	0b c0       	rjmp	.+22     	; 0x32a <input_init+0x56>
     314:	83 e0       	ldi	r24, 0x03	; 3
     316:	e8 12       	cpse	r14, r24
     318:	08 c0       	rjmp	.+16     	; 0x32a <input_init+0x56>
     31a:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <__data_end+0x1>
     31e:	00 93 48 02 	sts	0x0248, r16	; 0x800248 <__data_end>
     322:	43 e0       	ldi	r20, 0x03	; 3
     324:	67 e0       	ldi	r22, 0x07	; 7
     326:	86 e0       	ldi	r24, 0x06	; 6
     328:	86 df       	rcall	.-244    	; 0x236 <set_trigger>
     32a:	ce 01       	movw	r24, r28
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	08 95       	ret

0000033c <input_activated>:
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	8c 01       	movw	r16, r24
     344:	9e d1       	rcall	.+828    	; 0x682 <io_active_state>
     346:	88 23       	and	r24, r24
     348:	19 f0       	breq	.+6      	; 0x350 <input_activated+0x14>
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	99 f0       	breq	.+38     	; 0x374 <input_activated+0x38>
     34e:	22 c0       	rjmp	.+68     	; 0x394 <input_activated+0x58>
     350:	c8 01       	movw	r24, r16
     352:	8f d1       	rcall	.+798    	; 0x672 <io_pin>
     354:	fc 01       	movw	r30, r24
     356:	c0 81       	ld	r28, Z
     358:	c8 01       	movw	r24, r16
     35a:	96 d1       	rcall	.+812    	; 0x688 <io_bit>
     35c:	2c 2f       	mov	r18, r28
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	02 c0       	rjmp	.+4      	; 0x366 <input_activated+0x2a>
     362:	35 95       	asr	r19
     364:	27 95       	ror	r18
     366:	8a 95       	dec	r24
     368:	e2 f7       	brpl	.-8      	; 0x362 <input_activated+0x26>
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	2f 27       	eor	r18, r31
     36e:	82 2f       	mov	r24, r18
     370:	81 70       	andi	r24, 0x01	; 1
     372:	11 c0       	rjmp	.+34     	; 0x396 <input_activated+0x5a>
     374:	c8 01       	movw	r24, r16
     376:	7d d1       	rcall	.+762    	; 0x672 <io_pin>
     378:	fc 01       	movw	r30, r24
     37a:	c0 81       	ld	r28, Z
     37c:	c8 01       	movw	r24, r16
     37e:	84 d1       	rcall	.+776    	; 0x688 <io_bit>
     380:	2c 2f       	mov	r18, r28
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	02 c0       	rjmp	.+4      	; 0x38a <input_activated+0x4e>
     386:	35 95       	asr	r19
     388:	27 95       	ror	r18
     38a:	8a 95       	dec	r24
     38c:	e2 f7       	brpl	.-8      	; 0x386 <input_activated+0x4a>
     38e:	82 2f       	mov	r24, r18
     390:	81 70       	andi	r24, 0x01	; 1
     392:	01 c0       	rjmp	.+2      	; 0x396 <input_activated+0x5a>
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <__vector_3>:

ISR(INT2_vect)
{
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	0b b6       	in	r0, 0x3b	; 59
     3aa:	0f 92       	push	r0
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
	if (0 != cb2)
     3c4:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <cb2>
     3c8:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <cb2+0x1>
     3cc:	30 97       	sbiw	r30, 0x00	; 0
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <__vector_3+0x34>
	cb2();
     3d0:	19 95       	eicall
}
     3d2:	ff 91       	pop	r31
     3d4:	ef 91       	pop	r30
     3d6:	bf 91       	pop	r27
     3d8:	af 91       	pop	r26
     3da:	9f 91       	pop	r25
     3dc:	8f 91       	pop	r24
     3de:	7f 91       	pop	r23
     3e0:	6f 91       	pop	r22
     3e2:	5f 91       	pop	r21
     3e4:	4f 91       	pop	r20
     3e6:	3f 91       	pop	r19
     3e8:	2f 91       	pop	r18
     3ea:	0f 90       	pop	r0
     3ec:	0b be       	out	0x3b, r0	; 59
     3ee:	0f 90       	pop	r0
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <__vector_4>:

ISR(INT3_vect)
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	0b b6       	in	r0, 0x3b	; 59
     404:	0f 92       	push	r0
     406:	2f 93       	push	r18
     408:	3f 93       	push	r19
     40a:	4f 93       	push	r20
     40c:	5f 93       	push	r21
     40e:	6f 93       	push	r22
     410:	7f 93       	push	r23
     412:	8f 93       	push	r24
     414:	9f 93       	push	r25
     416:	af 93       	push	r26
     418:	bf 93       	push	r27
     41a:	ef 93       	push	r30
     41c:	ff 93       	push	r31
	if (0 != cb3)
     41e:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <__data_end>
     422:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <__data_end+0x1>
     426:	30 97       	sbiw	r30, 0x00	; 0
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	cb3();
     42a:	19 95       	eicall
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
     430:	bf 91       	pop	r27
     432:	af 91       	pop	r26
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	7f 91       	pop	r23
     43a:	6f 91       	pop	r22
     43c:	5f 91       	pop	r21
     43e:	4f 91       	pop	r20
     440:	3f 91       	pop	r19
     442:	2f 91       	pop	r18
     444:	0f 90       	pop	r0
     446:	0b be       	out	0x3b, r0	; 59
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti

00000452 <io_descriptor_init>:
	active_state_t active;
	uint8_t bit;
} io_desc_st;

io_descriptor_t io_descriptor_init(port_t port, uint8_t bit, active_state_t active)
{
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	c8 2f       	mov	r28, r24
     45a:	d6 2f       	mov	r29, r22
     45c:	14 2f       	mov	r17, r20
	// Reserving memory.
	io_descriptor_t desc = malloc(sizeof(io_desc_st));
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 b8 0b 	call	0x1770	; 0x1770 <malloc>
     466:	dc 01       	movw	r26, r24
	
	// Checking that memory is reserved.
	if (0 == desc) {
     468:	89 2b       	or	r24, r25
     46a:	09 f4       	brne	.+2      	; 0x46e <io_descriptor_init+0x1c>
     46c:	f2 c0       	rjmp	.+484    	; 0x652 <io_descriptor_init+0x200>
		return 0;
	}
	
	// Input validation.
	if (!(bit >= 0 && bit <= 7)) {
     46e:	d8 30       	cpi	r29, 0x08	; 8
     470:	08 f0       	brcs	.+2      	; 0x474 <io_descriptor_init+0x22>
     472:	f2 c0       	rjmp	.+484    	; 0x658 <io_descriptor_init+0x206>
		return 0;
	}
	
	// Assign values.
	desc->bit = bit;
     474:	17 96       	adiw	r26, 0x07	; 7
     476:	dc 93       	st	X, r29
     478:	17 97       	sbiw	r26, 0x07	; 7
	desc->active = active;
     47a:	16 96       	adiw	r26, 0x06	; 6
     47c:	1c 93       	st	X, r17
     47e:	16 97       	sbiw	r26, 0x06	; 6
	
	switch (port) {
     480:	4c 2f       	mov	r20, r28
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	4b 30       	cpi	r20, 0x0B	; 11
     486:	51 05       	cpc	r21, r1
     488:	08 f0       	brcs	.+2      	; 0x48c <io_descriptor_init+0x3a>
     48a:	e9 c0       	rjmp	.+466    	; 0x65e <io_descriptor_init+0x20c>
     48c:	fa 01       	movw	r30, r20
     48e:	88 27       	eor	r24, r24
     490:	ee 58       	subi	r30, 0x8E	; 142
     492:	ff 4f       	sbci	r31, 0xFF	; 255
     494:	8f 4f       	sbci	r24, 0xFF	; 255
     496:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__tablejump2__>
		case PA:
			desc->ddr = &DDRA;
     49a:	81 e2       	ldi	r24, 0x21	; 33
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	11 96       	adiw	r26, 0x01	; 1
     4a0:	9c 93       	st	X, r25
     4a2:	8e 93       	st	-X, r24
			desc->pin = &PINA;
     4a4:	80 e2       	ldi	r24, 0x20	; 32
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	13 96       	adiw	r26, 0x03	; 3
     4aa:	9c 93       	st	X, r25
     4ac:	8e 93       	st	-X, r24
     4ae:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTA;
     4b0:	82 e2       	ldi	r24, 0x22	; 34
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	15 96       	adiw	r26, 0x05	; 5
     4b6:	9c 93       	st	X, r25
     4b8:	8e 93       	st	-X, r24
     4ba:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     4bc:	8a 2f       	mov	r24, r26
     4be:	9b 2f       	mov	r25, r27
	switch (port) {
		case PA:
			desc->ddr = &DDRA;
			desc->pin = &PINA;
			desc->port = &PORTA;
			break;
     4c0:	d0 c0       	rjmp	.+416    	; 0x662 <io_descriptor_init+0x210>
		case PB:
			desc->ddr = &DDRB;
     4c2:	84 e2       	ldi	r24, 0x24	; 36
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	11 96       	adiw	r26, 0x01	; 1
     4c8:	9c 93       	st	X, r25
     4ca:	8e 93       	st	-X, r24
			desc->pin = &PINB;
     4cc:	83 e2       	ldi	r24, 0x23	; 35
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	13 96       	adiw	r26, 0x03	; 3
     4d2:	9c 93       	st	X, r25
     4d4:	8e 93       	st	-X, r24
     4d6:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTB;
     4d8:	85 e2       	ldi	r24, 0x25	; 37
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	15 96       	adiw	r26, 0x05	; 5
     4de:	9c 93       	st	X, r25
     4e0:	8e 93       	st	-X, r24
     4e2:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     4e4:	8a 2f       	mov	r24, r26
     4e6:	9b 2f       	mov	r25, r27
			break;
		case PB:
			desc->ddr = &DDRB;
			desc->pin = &PINB;
			desc->port = &PORTB;
			break;
     4e8:	bc c0       	rjmp	.+376    	; 0x662 <io_descriptor_init+0x210>
		case PC:
			desc->ddr = &DDRC;
     4ea:	87 e2       	ldi	r24, 0x27	; 39
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	11 96       	adiw	r26, 0x01	; 1
     4f0:	9c 93       	st	X, r25
     4f2:	8e 93       	st	-X, r24
			desc->pin = &PINC;
     4f4:	86 e2       	ldi	r24, 0x26	; 38
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	13 96       	adiw	r26, 0x03	; 3
     4fa:	9c 93       	st	X, r25
     4fc:	8e 93       	st	-X, r24
     4fe:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTC;
     500:	88 e2       	ldi	r24, 0x28	; 40
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	15 96       	adiw	r26, 0x05	; 5
     506:	9c 93       	st	X, r25
     508:	8e 93       	st	-X, r24
     50a:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     50c:	8a 2f       	mov	r24, r26
     50e:	9b 2f       	mov	r25, r27
			break;
		case PC:
			desc->ddr = &DDRC;
			desc->pin = &PINC;
			desc->port = &PORTC;
			break;
     510:	a8 c0       	rjmp	.+336    	; 0x662 <io_descriptor_init+0x210>
		case PD:
			desc->ddr = &DDRD;
     512:	8a e2       	ldi	r24, 0x2A	; 42
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	11 96       	adiw	r26, 0x01	; 1
     518:	9c 93       	st	X, r25
     51a:	8e 93       	st	-X, r24
			desc->pin = &PIND;
     51c:	89 e2       	ldi	r24, 0x29	; 41
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	13 96       	adiw	r26, 0x03	; 3
     522:	9c 93       	st	X, r25
     524:	8e 93       	st	-X, r24
     526:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTD;
     528:	8b e2       	ldi	r24, 0x2B	; 43
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	15 96       	adiw	r26, 0x05	; 5
     52e:	9c 93       	st	X, r25
     530:	8e 93       	st	-X, r24
     532:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     534:	8a 2f       	mov	r24, r26
     536:	9b 2f       	mov	r25, r27
			break;
		case PD:
			desc->ddr = &DDRD;
			desc->pin = &PIND;
			desc->port = &PORTD;
			break;
     538:	94 c0       	rjmp	.+296    	; 0x662 <io_descriptor_init+0x210>
		case PE:
			desc->ddr = &DDRE;
     53a:	8d e2       	ldi	r24, 0x2D	; 45
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	11 96       	adiw	r26, 0x01	; 1
     540:	9c 93       	st	X, r25
     542:	8e 93       	st	-X, r24
			desc->pin = &PINE;
     544:	8c e2       	ldi	r24, 0x2C	; 44
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	13 96       	adiw	r26, 0x03	; 3
     54a:	9c 93       	st	X, r25
     54c:	8e 93       	st	-X, r24
     54e:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTE;
     550:	8e e2       	ldi	r24, 0x2E	; 46
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	15 96       	adiw	r26, 0x05	; 5
     556:	9c 93       	st	X, r25
     558:	8e 93       	st	-X, r24
     55a:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     55c:	8a 2f       	mov	r24, r26
     55e:	9b 2f       	mov	r25, r27
			break;
		case PE:
			desc->ddr = &DDRE;
			desc->pin = &PINE;
			desc->port = &PORTE;
			break;
     560:	80 c0       	rjmp	.+256    	; 0x662 <io_descriptor_init+0x210>
		case PF:
			desc->ddr = &DDRF;
     562:	80 e3       	ldi	r24, 0x30	; 48
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	11 96       	adiw	r26, 0x01	; 1
     568:	9c 93       	st	X, r25
     56a:	8e 93       	st	-X, r24
			desc->pin = &PINF;
     56c:	8f e2       	ldi	r24, 0x2F	; 47
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	13 96       	adiw	r26, 0x03	; 3
     572:	9c 93       	st	X, r25
     574:	8e 93       	st	-X, r24
     576:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTF;
     578:	81 e3       	ldi	r24, 0x31	; 49
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	15 96       	adiw	r26, 0x05	; 5
     57e:	9c 93       	st	X, r25
     580:	8e 93       	st	-X, r24
     582:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     584:	8a 2f       	mov	r24, r26
     586:	9b 2f       	mov	r25, r27
			break;
		case PF:
			desc->ddr = &DDRF;
			desc->pin = &PINF;
			desc->port = &PORTF;
			break;
     588:	6c c0       	rjmp	.+216    	; 0x662 <io_descriptor_init+0x210>
		case PG:
			desc->ddr = &DDRG;
     58a:	83 e3       	ldi	r24, 0x33	; 51
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	11 96       	adiw	r26, 0x01	; 1
     590:	9c 93       	st	X, r25
     592:	8e 93       	st	-X, r24
			desc->pin = &PING;
     594:	82 e3       	ldi	r24, 0x32	; 50
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	13 96       	adiw	r26, 0x03	; 3
     59a:	9c 93       	st	X, r25
     59c:	8e 93       	st	-X, r24
     59e:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTG;
     5a0:	84 e3       	ldi	r24, 0x34	; 52
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	15 96       	adiw	r26, 0x05	; 5
     5a6:	9c 93       	st	X, r25
     5a8:	8e 93       	st	-X, r24
     5aa:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     5ac:	8a 2f       	mov	r24, r26
     5ae:	9b 2f       	mov	r25, r27
			break;
		case PG:
			desc->ddr = &DDRG;
			desc->pin = &PING;
			desc->port = &PORTG;
			break;
     5b0:	58 c0       	rjmp	.+176    	; 0x662 <io_descriptor_init+0x210>
		case PH:
			desc->ddr = &DDRH;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	11 96       	adiw	r26, 0x01	; 1
     5b8:	9c 93       	st	X, r25
     5ba:	8e 93       	st	-X, r24
			desc->pin = &PINH;
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	13 96       	adiw	r26, 0x03	; 3
     5c2:	9c 93       	st	X, r25
     5c4:	8e 93       	st	-X, r24
     5c6:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTH;
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	15 96       	adiw	r26, 0x05	; 5
     5ce:	9c 93       	st	X, r25
     5d0:	8e 93       	st	-X, r24
     5d2:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     5d4:	8a 2f       	mov	r24, r26
     5d6:	9b 2f       	mov	r25, r27
			break;
		case PH:
			desc->ddr = &DDRH;
			desc->pin = &PINH;
			desc->port = &PORTH;
			break;
     5d8:	44 c0       	rjmp	.+136    	; 0x662 <io_descriptor_init+0x210>
		case PJ:
			desc->ddr = &DDRJ;
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	11 96       	adiw	r26, 0x01	; 1
     5e0:	9c 93       	st	X, r25
     5e2:	8e 93       	st	-X, r24
			desc->pin = &PINJ;
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	13 96       	adiw	r26, 0x03	; 3
     5ea:	9c 93       	st	X, r25
     5ec:	8e 93       	st	-X, r24
     5ee:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTJ;
     5f0:	85 e0       	ldi	r24, 0x05	; 5
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	15 96       	adiw	r26, 0x05	; 5
     5f6:	9c 93       	st	X, r25
     5f8:	8e 93       	st	-X, r24
     5fa:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     5fc:	8a 2f       	mov	r24, r26
     5fe:	9b 2f       	mov	r25, r27
			break;
		case PJ:
			desc->ddr = &DDRJ;
			desc->pin = &PINJ;
			desc->port = &PORTJ;
			break;
     600:	30 c0       	rjmp	.+96     	; 0x662 <io_descriptor_init+0x210>
		case PK:
			desc->ddr = &DDRK;
     602:	87 e0       	ldi	r24, 0x07	; 7
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	11 96       	adiw	r26, 0x01	; 1
     608:	9c 93       	st	X, r25
     60a:	8e 93       	st	-X, r24
			desc->pin = &PINK;
     60c:	86 e0       	ldi	r24, 0x06	; 6
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	13 96       	adiw	r26, 0x03	; 3
     612:	9c 93       	st	X, r25
     614:	8e 93       	st	-X, r24
     616:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTK;
     618:	88 e0       	ldi	r24, 0x08	; 8
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	15 96       	adiw	r26, 0x05	; 5
     61e:	9c 93       	st	X, r25
     620:	8e 93       	st	-X, r24
     622:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     624:	8a 2f       	mov	r24, r26
     626:	9b 2f       	mov	r25, r27
			break;
		case PK:
			desc->ddr = &DDRK;
			desc->pin = &PINK;
			desc->port = &PORTK;
			break;
     628:	1c c0       	rjmp	.+56     	; 0x662 <io_descriptor_init+0x210>
		case PL:
			desc->ddr = &DDRL;
     62a:	8a e0       	ldi	r24, 0x0A	; 10
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	11 96       	adiw	r26, 0x01	; 1
     630:	9c 93       	st	X, r25
     632:	8e 93       	st	-X, r24
			desc->pin = &PINL;
     634:	89 e0       	ldi	r24, 0x09	; 9
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	13 96       	adiw	r26, 0x03	; 3
     63a:	9c 93       	st	X, r25
     63c:	8e 93       	st	-X, r24
     63e:	12 97       	sbiw	r26, 0x02	; 2
			desc->port = &PORTL;
     640:	8b e0       	ldi	r24, 0x0B	; 11
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	15 96       	adiw	r26, 0x05	; 5
     646:	9c 93       	st	X, r25
     648:	8e 93       	st	-X, r24
     64a:	14 97       	sbiw	r26, 0x04	; 4
			break;
		default:
			return 0;
	}
	
	return desc;
     64c:	8a 2f       	mov	r24, r26
     64e:	9b 2f       	mov	r25, r27
			break;
		case PL:
			desc->ddr = &DDRL;
			desc->pin = &PINL;
			desc->port = &PORTL;
			break;
     650:	08 c0       	rjmp	.+16     	; 0x662 <io_descriptor_init+0x210>
	// Reserving memory.
	io_descriptor_t desc = malloc(sizeof(io_desc_st));
	
	// Checking that memory is reserved.
	if (0 == desc) {
		return 0;
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	05 c0       	rjmp	.+10     	; 0x662 <io_descriptor_init+0x210>
	}
	
	// Input validation.
	if (!(bit >= 0 && bit <= 7)) {
		return 0;
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <io_descriptor_init+0x210>
			desc->ddr = &DDRL;
			desc->pin = &PINL;
			desc->port = &PORTL;
			break;
		default:
			return 0;
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return desc;
}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	08 95       	ret

0000066a <io_ddr>:

volatile uint8_t* io_ddr(io_descriptor_t self)
{
	return self->ddr;
}
     66a:	fc 01       	movw	r30, r24
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	08 95       	ret

00000672 <io_pin>:

volatile uint8_t* io_pin(io_descriptor_t self)
{
	return self->pin;
}
     672:	fc 01       	movw	r30, r24
     674:	82 81       	ldd	r24, Z+2	; 0x02
     676:	93 81       	ldd	r25, Z+3	; 0x03
     678:	08 95       	ret

0000067a <io_port>:

volatile uint8_t* io_port(io_descriptor_t self)
{
	return self->port;
}
     67a:	fc 01       	movw	r30, r24
     67c:	84 81       	ldd	r24, Z+4	; 0x04
     67e:	95 81       	ldd	r25, Z+5	; 0x05
     680:	08 95       	ret

00000682 <io_active_state>:

active_state_t io_active_state(io_descriptor_t self)
{
	return self->active;
}
     682:	fc 01       	movw	r30, r24
     684:	86 81       	ldd	r24, Z+6	; 0x06
     686:	08 95       	ret

00000688 <io_bit>:

uint8_t io_bit(io_descriptor_t self)
{
	return self->bit;
}
     688:	fc 01       	movw	r30, r24
     68a:	87 81       	ldd	r24, Z+7	; 0x07
     68c:	08 95       	ret

0000068e <key_init>:
#include "../include/key.h"

static io_descriptor_t keys[K_NO];

void key_init(io_definition_t io[])
{
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	6c 01       	movw	r12, r24
	for (uint8_t i = 0; i < K_NO; i++)
     69e:	f1 2c       	mov	r15, r1
     6a0:	13 c0       	rjmp	.+38     	; 0x6c8 <key_init+0x3a>
	{
		keys[i] = input_init(io[i].port, io[i].pin, K_ACTIVE_STATE, K_PULL_UP_STATE, NULL);
     6a2:	cf 2d       	mov	r28, r15
     6a4:	d0 e0       	ldi	r29, 0x00	; 0
     6a6:	cc 0f       	add	r28, r28
     6a8:	dd 1f       	adc	r29, r29
     6aa:	f6 01       	movw	r30, r12
     6ac:	ec 0f       	add	r30, r28
     6ae:	fd 1f       	adc	r31, r29
     6b0:	00 e0       	ldi	r16, 0x00	; 0
     6b2:	10 e0       	ldi	r17, 0x00	; 0
     6b4:	21 e0       	ldi	r18, 0x01	; 1
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	61 81       	ldd	r22, Z+1	; 0x01
     6ba:	80 81       	ld	r24, Z
     6bc:	0b de       	rcall	.-1002   	; 0x2d4 <input_init>
     6be:	c4 5b       	subi	r28, 0xB4	; 180
     6c0:	dd 4f       	sbci	r29, 0xFD	; 253
     6c2:	99 83       	std	Y+1, r25	; 0x01
     6c4:	88 83       	st	Y, r24

static io_descriptor_t keys[K_NO];

void key_init(io_definition_t io[])
{
	for (uint8_t i = 0; i < K_NO; i++)
     6c6:	f3 94       	inc	r15
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	8f 15       	cp	r24, r15
     6cc:	50 f7       	brcc	.-44     	; 0x6a2 <key_init+0x14>
	{
		keys[i] = input_init(io[i].port, io[i].pin, K_ACTIVE_STATE, K_PULL_UP_STATE, NULL);
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	08 95       	ret

000006de <key_get>:

uint8_t key_get(uint8_t key_no)
{
	if((key_no >= 1) && (key_no <= 8))
     6de:	81 50       	subi	r24, 0x01	; 1
     6e0:	88 30       	cpi	r24, 0x08	; 8
     6e2:	50 f4       	brcc	.+20     	; 0x6f8 <key_get+0x1a>
	{
		key_no--;	// Convert key number to index
		
		return input_activated(keys[key_no]);
     6e4:	e8 2f       	mov	r30, r24
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	e4 5b       	subi	r30, 0xB4	; 180
     6ee:	fd 4f       	sbci	r31, 0xFD	; 253
     6f0:	80 81       	ld	r24, Z
     6f2:	91 81       	ldd	r25, Z+1	; 0x01
     6f4:	23 ce       	rjmp	.-954    	; 0x33c <input_activated>
     6f6:	08 95       	ret
	}
	return 0;
     6f8:	80 e0       	ldi	r24, 0x00	; 0
}
     6fa:	08 95       	ret

000006fc <key_scan>:

uint8_t key_scan()
{
     6fc:	cf 93       	push	r28
	for(uint8_t i = 1; i <= K_NO; i++)
     6fe:	c1 e0       	ldi	r28, 0x01	; 1
     700:	05 c0       	rjmp	.+10     	; 0x70c <key_scan+0x10>
	{
		if(key_get(i))
     702:	8c 2f       	mov	r24, r28
     704:	ec df       	rcall	.-40     	; 0x6de <key_get>
     706:	81 11       	cpse	r24, r1
     708:	05 c0       	rjmp	.+10     	; 0x714 <key_scan+0x18>
	return 0;
}

uint8_t key_scan()
{
	for(uint8_t i = 1; i <= K_NO; i++)
     70a:	cf 5f       	subi	r28, 0xFF	; 255
     70c:	c4 30       	cpi	r28, 0x04	; 4
     70e:	c8 f3       	brcs	.-14     	; 0x702 <key_scan+0x6>
		if(key_get(i))
		{
			return i;
		}
	}
	return 0;
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	01 c0       	rjmp	.+2      	; 0x716 <key_scan+0x1a>
{
	for(uint8_t i = 1; i <= K_NO; i++)
	{
		if(key_get(i))
		{
			return i;
     714:	8c 2f       	mov	r24, r28
		}
	}
	return 0;
}
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <led_init>:
#include "../../digital_output/include/digital_output.h"

static io_descriptor_t leds[L_NO];

void led_init(io_definition_t io[])
{	
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	7c 01       	movw	r14, r24
	for (uint8_t i = 0; i < L_NO; i++)
     726:	10 e0       	ldi	r17, 0x00	; 0
     728:	11 c0       	rjmp	.+34     	; 0x74c <led_init+0x32>
	{
		leds[i] = output_init(io[i].port, io[i].pin, L_ACTIVE_STATE, L_DEFAULT_STATE);
     72a:	c1 2f       	mov	r28, r17
     72c:	d0 e0       	ldi	r29, 0x00	; 0
     72e:	cc 0f       	add	r28, r28
     730:	dd 1f       	adc	r29, r29
     732:	f7 01       	movw	r30, r14
     734:	ec 0f       	add	r30, r28
     736:	fd 1f       	adc	r31, r29
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	61 81       	ldd	r22, Z+1	; 0x01
     73e:	80 81       	ld	r24, Z
     740:	6b dd       	rcall	.-1322   	; 0x218 <output_init>
     742:	ce 5a       	subi	r28, 0xAE	; 174
     744:	dd 4f       	sbci	r29, 0xFD	; 253
     746:	99 83       	std	Y+1, r25	; 0x01
     748:	88 83       	st	Y, r24

static io_descriptor_t leds[L_NO];

void led_init(io_definition_t io[])
{	
	for (uint8_t i = 0; i < L_NO; i++)
     74a:	1f 5f       	subi	r17, 0xFF	; 255
     74c:	18 30       	cpi	r17, 0x08	; 8
     74e:	68 f3       	brcs	.-38     	; 0x72a <led_init+0x10>
	{
		leds[i] = output_init(io[i].port, io[i].pin, L_ACTIVE_STATE, L_DEFAULT_STATE);
	}
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	08 95       	ret

0000075c <configure_io>:
	{KEYPAD_7, KEYPAD_8, KEYPAD_9, KEYPAD_C},
	{KEYPAD_ASTRIX, KEYPAD_0, KEYPAD_NO, KEYPAD_D},
};

static void configure_io()
{
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
	row[0] = output_init(PAD_R1_PORT, PAD_R1_PIN, ACTIVE_LOW, INACTIVE);
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	67 e0       	ldi	r22, 0x07	; 7
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	55 dd       	rcall	.-1366   	; 0x218 <output_init>
     76e:	ca e6       	ldi	r28, 0x6A	; 106
     770:	d2 e0       	ldi	r29, 0x02	; 2
     772:	99 83       	std	Y+1, r25	; 0x01
     774:	88 83       	st	Y, r24
	row[1] = output_init(PAD_R2_PORT, PAD_R2_PIN, ACTIVE_LOW, INACTIVE);
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	65 e0       	ldi	r22, 0x05	; 5
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	4c dd       	rcall	.-1384   	; 0x218 <output_init>
     780:	9b 83       	std	Y+3, r25	; 0x03
     782:	8a 83       	std	Y+2, r24	; 0x02
	row[2] = output_init(PAD_R3_PORT, PAD_R3_PIN, ACTIVE_LOW, INACTIVE);
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	64 e0       	ldi	r22, 0x04	; 4
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	45 dd       	rcall	.-1398   	; 0x218 <output_init>
     78e:	9d 83       	std	Y+5, r25	; 0x05
     790:	8c 83       	std	Y+4, r24	; 0x04
	row[3] = output_init(PAD_R4_PORT, PAD_R4_PIN, ACTIVE_LOW, INACTIVE);
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	63 e0       	ldi	r22, 0x03	; 3
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	3e dd       	rcall	.-1412   	; 0x218 <output_init>
     79c:	9f 83       	std	Y+7, r25	; 0x07
     79e:	8e 83       	std	Y+6, r24	; 0x06
	
	col[0] = input_init(PAD_C1_PORT, PAD_C1_PIN, ACTIVE_LOW, PAD_COL_PULL_UP, 0);
     7a0:	00 e0       	ldi	r16, 0x00	; 0
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	65 e0       	ldi	r22, 0x05	; 5
     7aa:	84 e0       	ldi	r24, 0x04	; 4
     7ac:	93 dd       	rcall	.-1242   	; 0x2d4 <input_init>
     7ae:	c2 e6       	ldi	r28, 0x62	; 98
     7b0:	d2 e0       	ldi	r29, 0x02	; 2
     7b2:	99 83       	std	Y+1, r25	; 0x01
     7b4:	88 83       	st	Y, r24
	col[1] = input_init(PAD_C2_PORT, PAD_C2_PIN, ACTIVE_LOW, PAD_COL_PULL_UP, 0);
     7b6:	21 e0       	ldi	r18, 0x01	; 1
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	63 e0       	ldi	r22, 0x03	; 3
     7bc:	87 e0       	ldi	r24, 0x07	; 7
     7be:	8a dd       	rcall	.-1260   	; 0x2d4 <input_init>
     7c0:	9b 83       	std	Y+3, r25	; 0x03
     7c2:	8a 83       	std	Y+2, r24	; 0x02
	col[2] = input_init(PAD_C3_PORT, PAD_C3_PIN, ACTIVE_LOW, PAD_COL_PULL_UP, 0);
     7c4:	21 e0       	ldi	r18, 0x01	; 1
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	65 e0       	ldi	r22, 0x05	; 5
     7ca:	87 e0       	ldi	r24, 0x07	; 7
     7cc:	83 dd       	rcall	.-1274   	; 0x2d4 <input_init>
     7ce:	9d 83       	std	Y+5, r25	; 0x05
     7d0:	8c 83       	std	Y+4, r24	; 0x04
	col[3] = input_init(PAD_C4_PORT, PAD_C4_PIN, ACTIVE_LOW, PAD_COL_PULL_UP, 0);
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	7c dd       	rcall	.-1288   	; 0x2d4 <input_init>
     7dc:	9f 83       	std	Y+7, r25	; 0x07
     7de:	8e 83       	std	Y+6, r24	; 0x06
     7e0:	df 91       	pop	r29
}
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	08 95       	ret

000007ea <matrix_keypad_init>:
     7ea:	b8 cf       	rjmp	.-144    	; 0x75c <configure_io>

void matrix_keypad_init()
{
	configure_io();
     7ec:	08 95       	ret

000007ee <matrix_keypad_get_x>:
}

int8_t matrix_keypad_get_x()
{
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
	
	for (uint8_t r = 0; r < PAD_SIZE; r++)
     7fa:	d0 e0       	ldi	r29, 0x00	; 0
     7fc:	3b c0       	rjmp	.+118    	; 0x874 <matrix_keypad_get_x+0x86>
	{
		output_set_state(row[r], ACTIVE);
     7fe:	ed 2e       	mov	r14, r29
     800:	f1 2c       	mov	r15, r1
     802:	f7 01       	movw	r30, r14
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	e6 59       	subi	r30, 0x96	; 150
     80a:	fd 4f       	sbci	r31, 0xFD	; 253
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	ac dc       	rcall	.-1704   	; 0x16c <output_set_state>
		for (uint8_t c = 0; c < PAD_SIZE; c++)
     814:	c0 e0       	ldi	r28, 0x00	; 0
     816:	22 c0       	rjmp	.+68     	; 0x85c <matrix_keypad_get_x+0x6e>
		{
			if (input_activated(col[c])){
     818:	0c 2f       	mov	r16, r28
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	f8 01       	movw	r30, r16
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	ee 59       	subi	r30, 0x9E	; 158
     824:	fd 4f       	sbci	r31, 0xFD	; 253
     826:	80 81       	ld	r24, Z
     828:	91 81       	ldd	r25, Z+1	; 0x01
     82a:	88 dd       	rcall	.-1264   	; 0x33c <input_activated>
     82c:	88 23       	and	r24, r24
     82e:	a9 f0       	breq	.+42     	; 0x85a <matrix_keypad_get_x+0x6c>
				output_set_state(row[r], INACTIVE);
     830:	f7 01       	movw	r30, r14
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	e6 59       	subi	r30, 0x96	; 150
     838:	fd 4f       	sbci	r31, 0xFD	; 253
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	91 81       	ldd	r25, Z+1	; 0x01
     840:	95 dc       	rcall	.-1750   	; 0x16c <output_set_state>
				return keypad[r][c];
     842:	c7 01       	movw	r24, r14
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	87 5d       	subi	r24, 0xD7	; 215
     84e:	9d 4f       	sbci	r25, 0xFD	; 253
     850:	fc 01       	movw	r30, r24
     852:	e0 0f       	add	r30, r16
     854:	f1 1f       	adc	r31, r17
     856:	80 81       	ld	r24, Z
     858:	11 c0       	rjmp	.+34     	; 0x87c <matrix_keypad_get_x+0x8e>
{
	
	for (uint8_t r = 0; r < PAD_SIZE; r++)
	{
		output_set_state(row[r], ACTIVE);
		for (uint8_t c = 0; c < PAD_SIZE; c++)
     85a:	cf 5f       	subi	r28, 0xFF	; 255
     85c:	c4 30       	cpi	r28, 0x04	; 4
     85e:	e0 f2       	brcs	.-72     	; 0x818 <matrix_keypad_get_x+0x2a>
			if (input_activated(col[c])){
				output_set_state(row[r], INACTIVE);
				return keypad[r][c];
			}
		}	
		output_set_state(row[r], INACTIVE);
     860:	f7 01       	movw	r30, r14
     862:	ee 0f       	add	r30, r30
     864:	ff 1f       	adc	r31, r31
     866:	e6 59       	subi	r30, 0x96	; 150
     868:	fd 4f       	sbci	r31, 0xFD	; 253
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	91 81       	ldd	r25, Z+1	; 0x01
     870:	7d dc       	rcall	.-1798   	; 0x16c <output_set_state>
}

int8_t matrix_keypad_get_x()
{
	
	for (uint8_t r = 0; r < PAD_SIZE; r++)
     872:	df 5f       	subi	r29, 0xFF	; 255
     874:	d4 30       	cpi	r29, 0x04	; 4
     876:	08 f4       	brcc	.+2      	; 0x87a <matrix_keypad_get_x+0x8c>
     878:	c2 cf       	rjmp	.-124    	; 0x7fe <matrix_keypad_get_x+0x10>
				return keypad[r][c];
			}
		}	
		output_set_state(row[r], INACTIVE);
	}
	return KEYPAD_INACTIVE;
     87a:	8f e7       	ldi	r24, 0x7F	; 127
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	08 95       	ret

0000088a <pump_init>:

static io_descriptor_t pump;

void pump_init()
{
	pump = output_init(P_PORT, P_PIN, P_ACTIVE_STATE, P_DEFAULT_STATE);
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	c2 dc       	rcall	.-1660   	; 0x218 <output_init>
     894:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <pump+0x1>
     898:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <pump>
     89c:	08 95       	ret

0000089e <pump_start>:
}

return_code_t pump_start()
{
	return output_set_state(pump, ACTIVE);
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <pump>
     8a4:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <pump+0x1>
     8a8:	61 cc       	rjmp	.-1854   	; 0x16c <output_set_state>
}
     8aa:	08 95       	ret

000008ac <pump_stop>:

return_code_t pump_stop()
{
	return output_set_state(pump, INACTIVE);
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <pump>
     8b2:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <pump+0x1>
     8b6:	5a cc       	rjmp	.-1868   	; 0x16c <output_set_state>
     8b8:	08 95       	ret

000008ba <set_refresh_rate>:
 

static void set_refresh_rate() 
{
	// Set timer toggle on compare match
	TCCR4A |= _BV(COM4A0);
     8ba:	e0 ea       	ldi	r30, 0xA0	; 160
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	80 64       	ori	r24, 0x40	; 64
     8c2:	80 83       	st	Z, r24
	
	// Set prescaler 8
	TCCR4B |= _BV(CS41);
     8c4:	e1 ea       	ldi	r30, 0xA1	; 161
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	82 60       	ori	r24, 0x02	; 2
     8cc:	80 83       	st	Z, r24
	
	// Set to Clear timer on compare match (CTC mode)
	TCCR4B |= _BV(WGM42);
     8ce:	80 81       	ld	r24, Z
     8d0:	88 60       	ori	r24, 0x08	; 8
     8d2:	80 83       	st	Z, r24
	
	// Enable Timer interrupt
	TIMSK4 |= _BV(OCIE4A);
     8d4:	e2 e7       	ldi	r30, 0x72	; 114
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	82 60       	ori	r24, 0x02	; 2
     8dc:	80 83       	st	Z, r24
	
	// Set timer frequency 60Hz/digit (16000000 / (2*60*4*8))-1 = 4165.6
	OCR4A = 4166;
     8de:	86 e4       	ldi	r24, 0x46	; 70
     8e0:	90 e1       	ldi	r25, 0x10	; 16
     8e2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     8e6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     8ea:	08 95       	ret

000008ec <configure_spi>:
}

static void configure_spi()
{
	// Setup CPOL functionality to sample at rising edge.
	SPCR &= ~ (_BV(CPOL) | _BV(CPHA));
     8ec:	8c b5       	in	r24, 0x2c	; 44
     8ee:	83 7f       	andi	r24, 0xF3	; 243
     8f0:	8c bd       	out	0x2c, r24	; 44
	
	// DORD 0 OR 1: start from least significant bit or opposite.
	SPCR |=_BV(DORD);
     8f2:	8c b5       	in	r24, 0x2c	; 44
     8f4:	80 62       	ori	r24, 0x20	; 32
     8f6:	8c bd       	out	0x2c, r24	; 44
	
	// Set Master.
	SPCR |= _BV(MSTR);
     8f8:	8c b5       	in	r24, 0x2c	; 44
     8fa:	80 61       	ori	r24, 0x10	; 16
     8fc:	8c bd       	out	0x2c, r24	; 44
	
	// Set SCK frequency to Fosc/128.
	SPCR |= _BV(SPR1) | _BV(SPR0);
     8fe:	8c b5       	in	r24, 0x2c	; 44
     900:	83 60       	ori	r24, 0x03	; 3
     902:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~_BV(SPI2X);
     904:	8d b5       	in	r24, 0x2d	; 45
     906:	8e 7f       	andi	r24, 0xFE	; 254
     908:	8d bd       	out	0x2d, r24	; 45
	
	// Enable SPI.
	SPCR |= _BV(SPE);
     90a:	8c b5       	in	r24, 0x2c	; 44
     90c:	80 64       	ori	r24, 0x40	; 64
     90e:	8c bd       	out	0x2c, r24	; 44
     910:	08 95       	ret

00000912 <get_display_code>:
// Returns display code equivalent to digit value.
// If a zero is found, it will determine if it should return code equivalent to 0 or turn off the segment based on values in more significant segments.
static uint8_t get_display_code(uint8_t segment)
{
	// Least significant segment is allowed to be zero.
	if (segment == D_NO_SEGMENTS - 1)
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	51 f4       	brne	.+20     	; 0x92a <get_display_code+0x18>
		return display_code[digits[segment]];
     916:	e8 2f       	mov	r30, r24
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	ea 57       	subi	r30, 0x7A	; 122
     91c:	fd 4f       	sbci	r31, 0xFD	; 253
     91e:	e0 81       	ld	r30, Z
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	e3 5c       	subi	r30, 0xC3	; 195
     924:	fd 4f       	sbci	r31, 0xFD	; 253
     926:	80 81       	ld	r24, Z
     928:	08 95       	ret
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
     92a:	e8 2f       	mov	r30, r24
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	ea 57       	subi	r30, 0x7A	; 122
     930:	fd 4f       	sbci	r31, 0xFD	; 253
     932:	e0 81       	ld	r30, Z
     934:	e1 11       	cpse	r30, r1
     936:	04 c0       	rjmp	.+8      	; 0x940 <get_display_code+0x2e>
     938:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leading_zeros>
     93c:	81 11       	cpse	r24, r1
     93e:	0a c0       	rjmp	.+20     	; 0x954 <get_display_code+0x42>
		return BLANK_DIGIT;
	
	// First time a non-zero value is found leading zeros will be false. 
	// This effectively returns less significant zeros to display code equivalent to zero instead of having them turned off.
	if (leading_zeros)
     940:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <leading_zeros>
     944:	81 11       	cpse	r24, r1
		leading_zeros = 0;
     946:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <leading_zeros>

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	e3 5c       	subi	r30, 0xC3	; 195
     94e:	fd 4f       	sbci	r31, 0xFD	; 253
     950:	80 81       	ld	r24, Z
     952:	08 95       	ret
	if (segment == D_NO_SEGMENTS - 1)
		return display_code[digits[segment]];
	
	// If a value is zero and all more significant segments are zero it will return display code equivalent to be turned off. 
	if (digits[segment] == 0 && leading_zeros) 
		return BLANK_DIGIT;
     954:	8f ef       	ldi	r24, 0xFF	; 255
	if (leading_zeros)
		leading_zeros = 0;

	// Returns display code equivalent to digit value.
	return display_code[digits[segment]];
}
     956:	08 95       	ret

00000958 <set_display_code>:

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
	leading_zeros = 1;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <leading_zeros>
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++) 
     964:	c0 e0       	ldi	r28, 0x00	; 0
     966:	09 c0       	rjmp	.+18     	; 0x97a <set_display_code+0x22>
		display[i] = get_display_code(i);
     968:	0c 2f       	mov	r16, r28
     96a:	10 e0       	ldi	r17, 0x00	; 0
     96c:	8c 2f       	mov	r24, r28
     96e:	d1 df       	rcall	.-94     	; 0x912 <get_display_code>
     970:	f8 01       	movw	r30, r16
     972:	ee 57       	subi	r30, 0x7E	; 126
     974:	fd 4f       	sbci	r31, 0xFD	; 253
     976:	80 83       	st	Z, r24
}

// Sets display code from separated digit values starting from most significant segment.
static void set_display_code() {
	leading_zeros = 1;
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++) 
     978:	cf 5f       	subi	r28, 0xFF	; 255
     97a:	c4 30       	cpi	r28, 0x04	; 4
     97c:	a8 f3       	brcs	.-22     	; 0x968 <set_display_code+0x10>
		display[i] = get_display_code(i);
}
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <split_digits>:

// Splits number into separate digits.
static void split_digits(uint16_t value, uint8_t digit) 
{	
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	fc 01       	movw	r30, r24
	// Base case - Done.
	if (digit == 0)
     98c:	61 11       	cpse	r22, r1
     98e:	1f c0       	rjmp	.+62     	; 0x9ce <split_digits+0x48>
		digits[digit] = value % 10;
     990:	46 2f       	mov	r20, r22
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	9c 01       	movw	r18, r24
     996:	ad ec       	ldi	r26, 0xCD	; 205
     998:	bc ec       	ldi	r27, 0xCC	; 204
     99a:	db d6       	rcall	.+3510   	; 0x1752 <__umulhisi3>
     99c:	96 95       	lsr	r25
     99e:	87 95       	ror	r24
     9a0:	96 95       	lsr	r25
     9a2:	87 95       	ror	r24
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	9c 01       	movw	r18, r24
     9aa:	22 0f       	add	r18, r18
     9ac:	33 1f       	adc	r19, r19
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	82 0f       	add	r24, r18
     9bc:	93 1f       	adc	r25, r19
     9be:	9f 01       	movw	r18, r30
     9c0:	28 1b       	sub	r18, r24
     9c2:	39 0b       	sbc	r19, r25
     9c4:	fa 01       	movw	r30, r20
     9c6:	ea 57       	subi	r30, 0x7A	; 122
     9c8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ca:	20 83       	st	Z, r18
     9cc:	29 c0       	rjmp	.+82     	; 0xa20 <split_digits+0x9a>
     9ce:	46 2f       	mov	r20, r22
	else {
		digits[digit] = value % 10;
     9d0:	c6 2f       	mov	r28, r22
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
     9d4:	9c 01       	movw	r18, r24
     9d6:	ad ec       	ldi	r26, 0xCD	; 205
     9d8:	bc ec       	ldi	r27, 0xCC	; 204
     9da:	bb d6       	rcall	.+3446   	; 0x1752 <__umulhisi3>
     9dc:	96 95       	lsr	r25
     9de:	87 95       	ror	r24
     9e0:	96 95       	lsr	r25
     9e2:	87 95       	ror	r24
     9e4:	96 95       	lsr	r25
     9e6:	87 95       	ror	r24
     9e8:	9c 01       	movw	r18, r24
     9ea:	22 0f       	add	r18, r18
     9ec:	33 1f       	adc	r19, r19
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	82 0f       	add	r24, r18
     9fc:	93 1f       	adc	r25, r19
     9fe:	9f 01       	movw	r18, r30
     a00:	28 1b       	sub	r18, r24
     a02:	39 0b       	sbc	r19, r25
     a04:	ca 57       	subi	r28, 0x7A	; 122
     a06:	dd 4f       	sbci	r29, 0xFD	; 253
     a08:	28 83       	st	Y, r18
		value = value / 10;
     a0a:	9f 01       	movw	r18, r30
     a0c:	a2 d6       	rcall	.+3396   	; 0x1752 <__umulhisi3>
     a0e:	6f ef       	ldi	r22, 0xFF	; 255
		
		// Recurse until done.
		digit--;
     a10:	64 0f       	add	r22, r20
     a12:	96 95       	lsr	r25
		split_digits(value, digit);
     a14:	87 95       	ror	r24
     a16:	96 95       	lsr	r25
     a18:	87 95       	ror	r24
     a1a:	96 95       	lsr	r25
     a1c:	87 95       	ror	r24
     a1e:	b3 df       	rcall	.-154    	; 0x986 <split_digits>
     a20:	df 91       	pop	r29
	}
}
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <increment_current_segment>:
     a26:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <current_segment>
	}
}

static void increment_current_segment()
{
	current_segment = (current_segment + 1) % D_NO_SEGMENTS;
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	83 70       	andi	r24, 0x03	; 3
     a30:	90 78       	andi	r25, 0x80	; 128
     a32:	99 23       	and	r25, r25
     a34:	24 f4       	brge	.+8      	; 0xa3e <increment_current_segment+0x18>
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	8c 6f       	ori	r24, 0xFC	; 252
     a3a:	9f 6f       	ori	r25, 0xFF	; 255
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <current_segment>
     a42:	08 95       	ret

00000a44 <configure_outputs>:
	// Enable SPI.
	SPCR |= _BV(SPE);
}

static void configure_outputs()
{
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
	d_segments[0] =output_init(D_7_D1_PORT, D_7_D1_PIN, D_7_DN_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	85 e0       	ldi	r24, 0x05	; 5
     a50:	e3 db       	rcall	.-2106   	; 0x218 <output_init>
     a52:	ca e7       	ldi	r28, 0x7A	; 122
     a54:	d2 e0       	ldi	r29, 0x02	; 2
     a56:	99 83       	std	Y+1, r25	; 0x01
     a58:	88 83       	st	Y, r24
	d_segments[1] =output_init(D_7_D2_PORT, D_7_D2_PIN, D_7_DN_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	85 e0       	ldi	r24, 0x05	; 5
     a62:	da db       	rcall	.-2124   	; 0x218 <output_init>
     a64:	9b 83       	std	Y+3, r25	; 0x03
     a66:	8a 83       	std	Y+2, r24	; 0x02
	d_segments[2] =output_init(D_7_D3_PORT, D_7_D3_PIN, D_7_DN_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	85 e0       	ldi	r24, 0x05	; 5
     a70:	d3 db       	rcall	.-2138   	; 0x218 <output_init>
     a72:	9d 83       	std	Y+5, r25	; 0x05
     a74:	8c 83       	std	Y+4, r24	; 0x04
	d_segments[3] =output_init(D_7_D4_PORT, D_7_D4_PIN, D_7_DN_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	63 e0       	ldi	r22, 0x03	; 3
     a7c:	85 e0       	ldi	r24, 0x05	; 5
     a7e:	cc db       	rcall	.-2152   	; 0x218 <output_init>
     a80:	9f 83       	std	Y+7, r25	; 0x07
     a82:	8e 83       	std	Y+6, r24	; 0x06

	d_rck = output_init(D_7_RCK_PORT, D_7_RCK_PIN, D_7_RCK_ACTIVE_STATE, D_7_RCK_DEFAULT_STATE);
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	c5 db       	rcall	.-2166   	; 0x218 <output_init>
     a8e:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <d_rck+0x1>
     a92:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <d_rck>
	d_sck = output_init(D_7_SCK_PORT, D_7_SCK_PIN, D_7_SCK_ACTIVE_STATE, D_7_SCK_DEFAULT_STATE);
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	41 e0       	ldi	r20, 0x01	; 1
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	bc db       	rcall	.-2184   	; 0x218 <output_init>
     aa0:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <d_sck+0x1>
     aa4:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <d_sck>
	d_si = output_init(D_7_SI_PORT, D_7_SI_PIN, D_7_SI_ACTIVE_STATE, D_7_SI_DEFAULT_STATE);
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	41 e0       	ldi	r20, 0x01	; 1
     aac:	62 e0       	ldi	r22, 0x02	; 2
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	b3 db       	rcall	.-2202   	; 0x218 <output_init>
     ab2:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <d_si+0x1>
     ab6:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <d_si>
     aba:	df 91       	pop	r29
}
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <turn_off_all_segments>:
     ac0:	cf 93       	push	r28
	}
}

static void turn_off_all_segments()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     ac2:	c0 e0       	ldi	r28, 0x00	; 0
     ac4:	0b c0       	rjmp	.+22     	; 0xadc <turn_off_all_segments+0x1c>
	{
		output_set_state(d_segments[i], INACTIVE);
     ac6:	ec 2f       	mov	r30, r28
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	e6 58       	subi	r30, 0x86	; 134
     ad0:	fd 4f       	sbci	r31, 0xFD	; 253
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	49 db       	rcall	.-2414   	; 0x16c <output_set_state>
	}
}

static void turn_off_all_segments()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     ada:	cf 5f       	subi	r28, 0xFF	; 255
     adc:	c4 30       	cpi	r28, 0x04	; 4
     ade:	98 f3       	brcs	.-26     	; 0xac6 <turn_off_all_segments+0x6>
	{
		output_set_state(d_segments[i], INACTIVE);
	}
}
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <toggle_pin>:


static void toggle_pin(io_descriptor_t pin)
{
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
	output_set_state(pin, ACTIVE);
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	3f db       	rcall	.-2434   	; 0x16c <output_set_state>
	output_set_state(pin, INACTIVE);
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	ce 01       	movw	r24, r28
     af2:	3c db       	rcall	.-2440   	; 0x16c <output_set_state>
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <transfer_next_to_display>:

static void transfer_next_to_display()
{
	if (communication == SPI)
	// Load Shift register
	SPDR = display[current_segment];
     afa:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <current_segment>
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	ee 57       	subi	r30, 0x7E	; 126
     b02:	fd 4f       	sbci	r31, 0xFD	; 253
     b04:	80 81       	ld	r24, Z
     b06:	8e bd       	out	0x2e, r24	; 46
     b08:	08 95       	ret

00000b0a <display_init>:
}


void display_init() 
{
	configure_outputs();
     b0a:	9c df       	rcall	.-200    	; 0xa44 <configure_outputs>
	
	if (communication == SPI) {
		configure_spi();
     b0c:	ef de       	rcall	.-546    	; 0x8ec <configure_spi>
	}
	
	// Initializes timer and interrupt
	set_refresh_rate();
     b0e:	d5 ce       	rjmp	.-598    	; 0x8ba <set_refresh_rate>
     b10:	08 95       	ret

00000b12 <display_print_uint_4>:
     b12:	63 e0       	ldi	r22, 0x03	; 3

// Input from application
void display_print_uint_4(uint16_t value) 
{
	// Split digits from least significant value.
	split_digits(value, D_NO_SEGMENTS - 1);
     b14:	38 df       	rcall	.-400    	; 0x986 <split_digits>
	set_display_code();
     b16:	20 cf       	rjmp	.-448    	; 0x958 <set_display_code>
     b18:	08 95       	ret

00000b1a <display_save>:
     b1a:	20 e0       	ldi	r18, 0x00	; 0
}

void display_save()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     b1c:	0b c0       	rjmp	.+22     	; 0xb34 <display_save+0x1a>
	{
		display[i] = display_code_save[i];
     b1e:	82 2f       	mov	r24, r18
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	fc 01       	movw	r30, r24
     b24:	e7 5c       	subi	r30, 0xC7	; 199
     b26:	fd 4f       	sbci	r31, 0xFD	; 253
     b28:	30 81       	ld	r19, Z
     b2a:	fc 01       	movw	r30, r24
     b2c:	ee 57       	subi	r30, 0x7E	; 126
     b2e:	fd 4f       	sbci	r31, 0xFD	; 253
     b30:	30 83       	st	Z, r19
	set_display_code();
}

void display_save()
{
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     b32:	2f 5f       	subi	r18, 0xFF	; 255
     b34:	24 30       	cpi	r18, 0x04	; 4
     b36:	98 f3       	brcs	.-26     	; 0xb1e <display_save+0x4>
	{
		display[i] = display_code_save[i];
	}
}
     b38:	08 95       	ret

00000b3a <__vector_42>:
{
	current_segment = (current_segment + 1) % D_NO_SEGMENTS;
}

ISR(TIMER4_COMPA_vect)
{		
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	0b b6       	in	r0, 0x3b	; 59
     b46:	0f 92       	push	r0
     b48:	2f 93       	push	r18
     b4a:	3f 93       	push	r19
     b4c:	4f 93       	push	r20
     b4e:	5f 93       	push	r21
     b50:	6f 93       	push	r22
     b52:	7f 93       	push	r23
     b54:	8f 93       	push	r24
     b56:	9f 93       	push	r25
     b58:	af 93       	push	r26
     b5a:	bf 93       	push	r27
     b5c:	ef 93       	push	r30
     b5e:	ff 93       	push	r31
	turn_off_all_segments();
     b60:	af df       	rcall	.-162    	; 0xac0 <turn_off_all_segments>
	
	// Move into storage register.
	toggle_pin(d_rck);
     b62:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <d_rck>
     b66:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <d_rck+0x1>
     b6a:	bc df       	rcall	.-136    	; 0xae4 <toggle_pin>
		
	// Turn on current segment.
	output_set_state(d_segments[current_segment], ACTIVE);
     b6c:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <current_segment>
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	e6 58       	subi	r30, 0x86	; 134
     b78:	fd 4f       	sbci	r31, 0xFD	; 253
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
	
	increment_current_segment();
     b80:	f5 da       	rcall	.-2582   	; 0x16c <output_set_state>
     b82:	51 df       	rcall	.-350    	; 0xa26 <increment_current_segment>
	
	transfer_next_to_display();
     b84:	ba df       	rcall	.-140    	; 0xafa <transfer_next_to_display>
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	bf 91       	pop	r27
     b8c:	af 91       	pop	r26
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	7f 91       	pop	r23
     b94:	6f 91       	pop	r22
     b96:	5f 91       	pop	r21
     b98:	4f 91       	pop	r20
     b9a:	3f 91       	pop	r19
     b9c:	2f 91       	pop	r18
     b9e:	0f 90       	pop	r0
     ba0:	0b be       	out	0x3b, r0	; 59
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <mv_to_c>:
static io_descriptor_t enable;

// Not static for testing purposes.
uint8_t mv_to_c(uint16_t mv)
{
	return (mv - 500) / 10;	
     bac:	9c 01       	movw	r18, r24
     bae:	24 5f       	subi	r18, 0xF4	; 244
     bb0:	31 40       	sbci	r19, 0x01	; 1
     bb2:	ad ec       	ldi	r26, 0xCD	; 205
     bb4:	bc ec       	ldi	r27, 0xCC	; 204
     bb6:	cd d5       	rcall	.+2970   	; 0x1752 <__umulhisi3>
     bb8:	96 95       	lsr	r25
     bba:	87 95       	ror	r24
     bbc:	96 95       	lsr	r25
     bbe:	87 95       	ror	r24
     bc0:	96 95       	lsr	r25
     bc2:	87 95       	ror	r24
}
     bc4:	08 95       	ret

00000bc6 <adc_to_mv>:

// Not static for testing purposes.
uint16_t adc_to_mv(uint16_t adc)
{
	// Should have been adc * (v_ref / adc_max) = (uint16_t)((float) adc * ( (float) 5000 / (float) 1023)), but had truble with int devision.
	return adc * 4.887585533;
     bc6:	bc 01       	movw	r22, r24
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a5 d4       	rcall	.+2378   	; 0x1518 <__floatunsisf>
     bce:	2a e1       	ldi	r18, 0x1A	; 26
     bd0:	37 e6       	ldi	r19, 0x67	; 103
     bd2:	4c e9       	ldi	r20, 0x9C	; 156
     bd4:	50 e4       	ldi	r21, 0x40	; 64
     bd6:	52 d5       	rcall	.+2724   	; 0x167c <__mulsf3>
     bd8:	73 d4       	rcall	.+2278   	; 0x14c0 <__fixunssfsi>
}
     bda:	cb 01       	movw	r24, r22
     bdc:	08 95       	ret

00000bde <tmp36_init>:

void tmp36_init(void (*callback)(uint8_t deg_c))
{
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	ec 01       	movw	r28, r24
	// configure io.
	enable = output_init(ENABLE_PORT, ENABLE_PIN, ENABLE_ACTIVE_STATE, ENABLE_DEFAULT_STATE);
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	41 e0       	ldi	r20, 0x01	; 1
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	86 e0       	ldi	r24, 0x06	; 6
     bf0:	13 db       	rcall	.-2522   	; 0x218 <output_init>
     bf2:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <enable+0x1>
     bf6:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <enable>
	v_out = input_init(V_IN_PORT, V_IN_PIN, V_IN_ACTIVE_STATE, V_IN_PULL_UP, NULL);
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	42 e0       	ldi	r20, 0x02	; 2
     c02:	67 e0       	ldi	r22, 0x07	; 7
     c04:	89 e0       	ldi	r24, 0x09	; 9
     c06:	66 db       	rcall	.-2356   	; 0x2d4 <input_init>
	
	// AVCC reference (5V).
	ADMUX |= _BV(REFS0);
     c08:	ec e7       	ldi	r30, 0x7C	; 124
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	80 83       	st	Z, r24
	
	// Input channel select ADC15.
	ADMUX |= _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
     c12:	80 81       	ld	r24, Z
     c14:	87 60       	ori	r24, 0x07	; 7
     c16:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
     c18:	ab e7       	ldi	r26, 0x7B	; 123
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	8c 91       	ld	r24, X
     c1e:	88 60       	ori	r24, 0x08	; 8
     c20:	8c 93       	st	X, r24
	
	// Set pre-scaler 64
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2);
     c22:	ea e7       	ldi	r30, 0x7A	; 122
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	86 60       	ori	r24, 0x06	; 6
     c2a:	80 83       	st	Z, r24

	// Enable ADC  
	ADCSRA |= _BV(ADEN);
     c2c:	80 81       	ld	r24, Z
     c2e:	80 68       	ori	r24, 0x80	; 128
     c30:	80 83       	st	Z, r24
	
	// ****** Interrupt and auto trigger ****
	
	// Enable interrupt.
	ADCSRA |= _BV(ADIE);
     c32:	80 81       	ld	r24, Z
     c34:	88 60       	ori	r24, 0x08	; 8
     c36:	80 83       	st	Z, r24
	
	// Enable Auto Trigger
	ADCSRA |= _BV(ADATE);
     c38:	80 81       	ld	r24, Z
     c3a:	80 62       	ori	r24, 0x20	; 32
     c3c:	80 83       	st	Z, r24
	
	// Set auto trigger source timer1 Compare Match Channel B
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
     c3e:	8c 91       	ld	r24, X
     c40:	85 60       	ori	r24, 0x05	; 5
     c42:	8c 93       	st	X, r24
	// ****** Interrupt and auto trigger end ****
	
	// ***** Configure Timer 1 Channel B. ******
	
	// Set timer to toggle on compare match.
	TCCR1A |= _BV(COM1B0);
     c44:	e0 e8       	ldi	r30, 0x80	; 128
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	80 61       	ori	r24, 0x10	; 16
     c4c:	80 83       	st	Z, r24
	
	// Set Clock frequency to 16MHz/256 = 62500kHz
	TCCR1B |=  _BV(CS12);  //256 prescaler
     c4e:	e1 e8       	ldi	r30, 0x81	; 129
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	84 60       	ori	r24, 0x04	; 4
     c56:	80 83       	st	Z, r24
	
	// Set to Clear timer on Compare Match mode (CTC).
	TCCR1B |= _BV(WGM12);
     c58:	80 81       	ld	r24, Z
     c5a:	88 60       	ori	r24, 0x08	; 8
     c5c:	80 83       	st	Z, r24
	
	// Enable Timer Interrupt
	TIMSK1 |= _BV(OCIE1B);
     c5e:	ef e6       	ldi	r30, 0x6F	; 111
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	84 60       	ori	r24, 0x04	; 4
     c66:	80 83       	st	Z, r24

	// set timer frequency 1 Hz. (16000000 / (2 * 1 * 256)) - 1 = 31249
	OCR1B = 31249;
     c68:	81 e1       	ldi	r24, 0x11	; 17
     c6a:	9a e7       	ldi	r25, 0x7A	; 122
     c6c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     c70:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	
	// ***** Timer config end *********
	
	// Set callback.
	if (0 != callback)
     c74:	20 97       	sbiw	r28, 0x00	; 0
     c76:	21 f0       	breq	.+8      	; 0xc80 <tmp36_init+0xa2>
		cb = callback;
     c78:	d0 93 8e 02 	sts	0x028E, r29	; 0x80028e <cb+0x1>
     c7c:	c0 93 8d 02 	sts	0x028D, r28	; 0x80028d <cb>
	
	// Enable TMP36
	output_set_state(enable, ACTIVE);
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <enable>
     c86:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <enable+0x1>
     c8a:	70 da       	rcall	.-2848   	; 0x16c <output_set_state>
	
	// Start Conversion.
	ADCSRA |= _BV(ADSC);
     c8c:	ea e7       	ldi	r30, 0x7A	; 122
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	80 64       	ori	r24, 0x40	; 64
     c94:	80 83       	st	Z, r24
}
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <__vector_29>:

// AD Interrupt callback.
ISR(ADC_vect)
{
     ca0:	1f 92       	push	r1
     ca2:	0f 92       	push	r0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	0f 92       	push	r0
     ca8:	11 24       	eor	r1, r1
     caa:	0b b6       	in	r0, 0x3b	; 59
     cac:	0f 92       	push	r0
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
	// ADC (16bits) = ADCH and ADCL - Default right adjusted ADC value = 0-1023.
	if (0 != cb)
     cca:	c0 91 8d 02 	lds	r28, 0x028D	; 0x80028d <cb>
     cce:	d0 91 8e 02 	lds	r29, 0x028E	; 0x80028e <cb+0x1>
     cd2:	20 97       	sbiw	r28, 0x00	; 0
     cd4:	41 f0       	breq	.+16     	; 0xce6 <__vector_29+0x46>
		cb(mv_to_c(adc_to_mv(ADC)));
     cd6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     cda:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     cde:	73 df       	rcall	.-282    	; 0xbc6 <adc_to_mv>
     ce0:	65 df       	rcall	.-310    	; 0xbac <mv_to_c>
     ce2:	fe 01       	movw	r30, r28
     ce4:	19 95       	eicall
	
	// ADC interrupt flag is high!
	// Clear ADC interrupt flag.
	ADCSRA |= ~_BV(ADIF);
     ce6:	ea e7       	ldi	r30, 0x7A	; 122
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 6e       	ori	r24, 0xEF	; 239
     cee:	80 83       	st	Z, r24
     cf0:	ff 91       	pop	r31
     cf2:	ef 91       	pop	r30
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0b be       	out	0x3b, r0	; 59
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	1f 90       	pop	r1
     d18:	18 95       	reti

00000d1a <tmp36_callback>:
static int8_t keypad_current = KEYPAD_INACTIVE;

// Temperature callback.
static void tmp36_callback(uint8_t deg_c)
{
	t_current = deg_c;  
     d1a:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <t_current>
     d1e:	08 95       	ret

00000d20 <array_to_int>:
	};
	led_init(leds);
}

static uint16_t array_to_int(uint8_t arr[])
{
     d20:	bc 01       	movw	r22, r24
	uint16_t k = 0;
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     d22:	90 e0       	ldi	r25, 0x00	; 0
	led_init(leds);
}

static uint16_t array_to_int(uint8_t arr[])
{
	uint16_t k = 0;
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     d28:	12 c0       	rjmp	.+36     	; 0xd4e <array_to_int+0x2e>
	{
		k = 10 * k + arr[i];
     d2a:	a9 01       	movw	r20, r18
     d2c:	44 0f       	add	r20, r20
     d2e:	55 1f       	adc	r21, r21
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	22 0f       	add	r18, r18
     d3a:	33 1f       	adc	r19, r19
     d3c:	24 0f       	add	r18, r20
     d3e:	35 1f       	adc	r19, r21
     d40:	fb 01       	movw	r30, r22
     d42:	e9 0f       	add	r30, r25
     d44:	f1 1d       	adc	r31, r1
     d46:	40 81       	ld	r20, Z
     d48:	24 0f       	add	r18, r20
     d4a:	31 1d       	adc	r19, r1
}

static uint16_t array_to_int(uint8_t arr[])
{
	uint16_t k = 0;
	for (uint8_t i = 0; i < D_NO_SEGMENTS; i++)
     d4c:	9f 5f       	subi	r25, 0xFF	; 255
     d4e:	94 30       	cpi	r25, 0x04	; 4
     d50:	60 f3       	brcs	.-40     	; 0xd2a <array_to_int+0xa>
	{
		k = 10 * k + arr[i];
	}
	
	return k;
}
     d52:	c9 01       	movw	r24, r18
     d54:	08 95       	ret

00000d56 <util_init>:
	tmp36_init(tmp36_callback);
	matrix_keypad_init();
}

static void util_init()
{
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
	// Initialize basic kalman filter
	kalman_init(0.001, 5, 1, 0, 1);
     d66:	8f e3       	ldi	r24, 0x3F	; 63
     d68:	8f 93       	push	r24
     d6a:	80 e8       	ldi	r24, 0x80	; 128
     d6c:	8f 93       	push	r24
     d6e:	1f 92       	push	r1
     d70:	1f 92       	push	r1
     d72:	a1 2c       	mov	r10, r1
     d74:	b1 2c       	mov	r11, r1
     d76:	65 01       	movw	r12, r10
     d78:	e1 2c       	mov	r14, r1
     d7a:	f1 2c       	mov	r15, r1
     d7c:	00 e8       	ldi	r16, 0x80	; 128
     d7e:	1f e3       	ldi	r17, 0x3F	; 63
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 ea       	ldi	r20, 0xA0	; 160
     d86:	50 e4       	ldi	r21, 0x40	; 64
     d88:	6f e6       	ldi	r22, 0x6F	; 111
     d8a:	72 e1       	ldi	r23, 0x12	; 18
     d8c:	83 e8       	ldi	r24, 0x83	; 131
     d8e:	9a e3       	ldi	r25, 0x3A	; 58
     d90:	93 d1       	rcall	.+806    	; 0x10b8 <kalman_init>
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	df 90       	pop	r13
     da4:	cf 90       	pop	r12
     da6:	bf 90       	pop	r11
     da8:	af 90       	pop	r10
     daa:	08 95       	ret

00000dac <leds_init_all>:
	};
	key_init(keys);
}

static void leds_init_all()
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	2e 97       	sbiw	r28, 0x0e	; 14
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
	io_definition_t leds[] = {
     dc0:	8e e0       	ldi	r24, 0x0E	; 14
     dc2:	e5 e1       	ldi	r30, 0x15	; 21
     dc4:	f2 e0       	ldi	r31, 0x02	; 2
     dc6:	de 01       	movw	r26, r28
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	01 90       	ld	r0, Z+
     dcc:	0d 92       	st	X+, r0
     dce:	8a 95       	dec	r24
     dd0:	e1 f7       	brne	.-8      	; 0xdca <leds_init_all+0x1e>
		{LED_5_PORT, LED_5_PIN},
		{LED_6_PORT, LED_6_PIN},
		{LED_7_PORT, LED_7_PIN},
		{LED_8_PORT, LED_8_PIN}
	};
	led_init(leds);
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	a1 dc       	rcall	.-1726   	; 0x71a <led_init>
}
     dd8:	2e 96       	adiw	r28, 0x0e	; 14
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <shift_keys_init>:
{
	t_current = deg_c;  
}

static void shift_keys_init()
{
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <shift_keys_init+0x6>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <shift_keys_init+0x8>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	io_definition_t keys[] = {
     df6:	86 e0       	ldi	r24, 0x06	; 6
     df8:	e3 e2       	ldi	r30, 0x23	; 35
     dfa:	f2 e0       	ldi	r31, 0x02	; 2
     dfc:	de 01       	movw	r26, r28
     dfe:	11 96       	adiw	r26, 0x01	; 1
     e00:	01 90       	ld	r0, Z+
     e02:	0d 92       	st	X+, r0
     e04:	8a 95       	dec	r24
     e06:	e1 f7       	brne	.-8      	; 0xe00 <shift_keys_init+0x16>
		{KEY_T_LOW_PORT, KEY_T_LOW_PIN}, 
		{KEY_T_HIGH_PORT, KEY_T_HIGH_PIN},
		{KEY_T_CURR_PORT, KEY_T_CURR_PIN}
	};
	key_init(keys);
     e08:	ce 01       	movw	r24, r28
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	40 dc       	rcall	.-1920   	; 0x68e <key_init>
}
     e0e:	26 96       	adiw	r28, 0x06	; 6
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <hal_init>:
	}
}

static void hal_init()
{
	leds_init_all();
     e20:	c5 df       	rcall	.-118    	; 0xdac <leds_init_all>
	shift_keys_init();
     e22:	e3 df       	rcall	.-58     	; 0xdea <shift_keys_init>
	pump_init();
     e24:	32 dd       	rcall	.-1436   	; 0x88a <pump_init>
     e26:	71 de       	rcall	.-798    	; 0xb0a <display_init>
	display_init();
     e28:	8d e8       	ldi	r24, 0x8D	; 141
	tmp36_init(tmp36_callback);
     e2a:	96 e0       	ldi	r25, 0x06	; 6
     e2c:	d8 de       	rcall	.-592    	; 0xbde <tmp36_init>
     e2e:	dd cc       	rjmp	.-1606   	; 0x7ea <matrix_keypad_init>
     e30:	08 95       	ret

00000e32 <enable_input>:
	matrix_keypad_init();
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
	
	return k;
}

static void enable_input()
{
     e38:	df 93       	push	r29
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <enable_input+0xa>
     e3c:	1f 92       	push	r1
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	uint16_t input_value = 0;
	uint8_t inputs[] = {0, 0, 0, 0};
     e42:	19 82       	std	Y+1, r1	; 0x01
     e44:	1a 82       	std	Y+2, r1	; 0x02
     e46:	1b 82       	std	Y+3, r1	; 0x03
     e48:	1c 82       	std	Y+4, r1	; 0x04

	display_print_uint_4(input_value);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	61 de       	rcall	.-830    	; 0xb12 <display_print_uint_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e50:	2f ef       	ldi	r18, 0xFF	; 255
     e52:	43 ec       	ldi	r20, 0xC3	; 195
     e54:	59 e0       	ldi	r21, 0x09	; 9
     e56:	21 50       	subi	r18, 0x01	; 1
     e58:	40 40       	sbci	r20, 0x00	; 0
     e5a:	50 40       	sbci	r21, 0x00	; 0
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <enable_input+0x24>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <enable_input+0x2e>
	_delay_ms(200);
	do
	{
		keypad_current = matrix_keypad_get_x();
     e60:	00 00       	nop
     e62:	c5 dc       	rcall	.-1654   	; 0x7ee <matrix_keypad_get_x>
     e64:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <keypad_current>
		
		if (keypad_current >= KEYPAD_0 && keypad_current <= KEYPAD_9)
     e68:	8a 30       	cpi	r24, 0x0A	; 10
     e6a:	a8 f0       	brcs	.+42     	; 0xe96 <enable_input+0x64>
     e6c:	19 c0       	rjmp	.+50     	; 0xea0 <enable_input+0x6e>
		{	
			// Left shift array to fit next number.
			for (uint8_t i = 0; i < D_NO_SEGMENTS - 1; i++) {
				inputs[i] = inputs[i + 1];
     e6e:	29 2f       	mov	r18, r25
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	f9 01       	movw	r30, r18
     e74:	31 96       	adiw	r30, 0x01	; 1
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	4c 0f       	add	r20, r28
     e7c:	5d 1f       	adc	r21, r29
     e7e:	e4 0f       	add	r30, r20
     e80:	f5 1f       	adc	r31, r21
     e82:	40 81       	ld	r20, Z
     e84:	e1 e0       	ldi	r30, 0x01	; 1
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	ec 0f       	add	r30, r28
     e8a:	fd 1f       	adc	r31, r29
     e8c:	e2 0f       	add	r30, r18
     e8e:	f3 1f       	adc	r31, r19
     e90:	40 83       	st	Z, r20
		keypad_current = matrix_keypad_get_x();
		
		if (keypad_current >= KEYPAD_0 && keypad_current <= KEYPAD_9)
		{	
			// Left shift array to fit next number.
			for (uint8_t i = 0; i < D_NO_SEGMENTS - 1; i++) {
     e92:	9f 5f       	subi	r25, 0xFF	; 255
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <enable_input+0x66>
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	93 30       	cpi	r25, 0x03	; 3
     e9a:	48 f3       	brcs	.-46     	; 0xe6e <enable_input+0x3c>
				inputs[i] = inputs[i + 1];
			}	
			// Add new digit to end of array.		
			inputs[3] = keypad_current;
     e9c:	8c 83       	std	Y+4, r24	; 0x04
     e9e:	18 c0       	rjmp	.+48     	; 0xed0 <enable_input+0x9e>
		}
		else if (keypad_current == KEYPAD_D)
     ea0:	8f 30       	cpi	r24, 0x0F	; 15
     ea2:	b1 f4       	brne	.+44     	; 0xed0 <enable_input+0x9e>
     ea4:	11 c0       	rjmp	.+34     	; 0xec8 <enable_input+0x96>
		{
			// right shift array to delete last input.
			for (uint8_t i = D_NO_SEGMENTS - 1; i > 0; i--)
			{
				inputs[i] = inputs[i - 1];			
     ea6:	82 2f       	mov	r24, r18
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	41 e0       	ldi	r20, 0x01	; 1
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	4c 0f       	add	r20, r28
     eb4:	5d 1f       	adc	r21, r29
     eb6:	e4 0f       	add	r30, r20
     eb8:	f5 1f       	adc	r31, r21
     eba:	30 81       	ld	r19, Z
     ebc:	fa 01       	movw	r30, r20
     ebe:	e8 0f       	add	r30, r24
     ec0:	f9 1f       	adc	r31, r25
     ec2:	30 83       	st	Z, r19
			inputs[3] = keypad_current;
		}
		else if (keypad_current == KEYPAD_D)
		{
			// right shift array to delete last input.
			for (uint8_t i = D_NO_SEGMENTS - 1; i > 0; i--)
     ec4:	21 50       	subi	r18, 0x01	; 1
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <enable_input+0x98>
     ec8:	23 e0       	ldi	r18, 0x03	; 3
     eca:	21 11       	cpse	r18, r1
     ecc:	ec cf       	rjmp	.-40     	; 0xea6 <enable_input+0x74>
			{
				inputs[i] = inputs[i - 1];			
			}
			inputs[0] = 0;		
     ece:	19 82       	std	Y+1, r1	; 0x01
		}
		
		// convert input array to int.
		input_value = array_to_int(inputs);
     ed0:	ce 01       	movw	r24, r28
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	25 df       	rcall	.-438    	; 0xd20 <array_to_int>
		
		display_print_uint_4(input_value);
     ed6:	8c 01       	movw	r16, r24
     ed8:	1c de       	rcall	.-968    	; 0xb12 <display_print_uint_4>
     eda:	5f ef       	ldi	r21, 0xFF	; 255
     edc:	85 ea       	ldi	r24, 0xA5	; 165
     ede:	9e e0       	ldi	r25, 0x0E	; 14
     ee0:	51 50       	subi	r21, 0x01	; 1
     ee2:	80 40       	sbci	r24, 0x00	; 0
     ee4:	90 40       	sbci	r25, 0x00	; 0
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <enable_input+0xae>
     ee8:	00 c0       	rjmp	.+0      	; 0xeea <enable_input+0xb8>
     eea:	00 00       	nop
		_delay_ms(300);
		
	} while (keypad_current != SAVE && keypad_current != CANCEL);
     eec:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <keypad_current>
     ef0:	93 ef       	ldi	r25, 0xF3	; 243
     ef2:	98 0f       	add	r25, r24
     ef4:	92 30       	cpi	r25, 0x02	; 2
     ef6:	08 f0       	brcs	.+2      	; 0xefa <enable_input+0xc8>
	
	// save new vaule.
	if (keypad_current == SAVE)
     ef8:	b4 cf       	rjmp	.-152    	; 0xe62 <enable_input+0x30>
     efa:	8e 30       	cpi	r24, 0x0E	; 14
	{
		display_save();
     efc:	e9 f4       	brne	.+58     	; 0xf38 <enable_input+0x106>
     efe:	0d de       	rcall	.-998    	; 0xb1a <display_save>
		switch (display_current)
     f00:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <display_current>
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	19 f0       	breq	.+6      	; 0xf0e <enable_input+0xdc>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	31 f0       	breq	.+12     	; 0xf18 <enable_input+0xe6>
     f0c:	09 c0       	rjmp	.+18     	; 0xf20 <enable_input+0xee>
		{
			case 1:
				t_low = input_value;
     f0e:	10 93 0c 02 	sts	0x020C, r17	; 0x80020c <t_low+0x1>
     f12:	00 93 0b 02 	sts	0x020B, r16	; 0x80020b <t_low>
				break;
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <enable_input+0xee>
			case 2:
				t_high = input_value;
     f18:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <t_high+0x1>
     f1c:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <t_high>
     f20:	2f ef       	ldi	r18, 0xFF	; 255
     f22:	43 ed       	ldi	r20, 0xD3	; 211
     f24:	50 e3       	ldi	r21, 0x30	; 48
     f26:	21 50       	subi	r18, 0x01	; 1
     f28:	40 40       	sbci	r20, 0x00	; 0
     f2a:	50 40       	sbci	r21, 0x00	; 0
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <enable_input+0xf4>
     f2e:	00 c0       	rjmp	.+0      	; 0xf30 <enable_input+0xfe>
     f30:	00 00       	nop
		}
		
		// Display save 1s.
		_delay_ms(1000);
		// Show current temperature when returning.
		display_current = 3;
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <display_current>
	}
}
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <run_solar_heating>:

// Application
static void run_solar_heating() {
	t_filtered = kalman_filter(t_current);
     f4a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <t_current>
     f4e:	f7 d0       	rcall	.+494    	; 0x113e <kalman_filter>
     f50:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <t_filtered>
	
	// check input keys for changeing display.
	display_selector = key_scan();
     f54:	d3 db       	rcall	.-2138   	; 0x6fc <key_scan>
     f56:	81 11       	cpse	r24, r1
	
	if (display_selector)
     f58:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <display_current>
		display_current = display_selector;
	
	keypad_current = matrix_keypad_get_x();
     f5c:	48 dc       	rcall	.-1904   	; 0x7ee <matrix_keypad_get_x>
     f5e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <keypad_current>
     f62:	8b 30       	cpi	r24, 0x0B	; 11
	
	switch (keypad_current) {
     f64:	41 f0       	breq	.+16     	; 0xf76 <run_solar_heating+0x2c>
     f66:	8c 30       	cpi	r24, 0x0C	; 12
     f68:	51 f0       	breq	.+20     	; 0xf7e <run_solar_heating+0x34>
     f6a:	8a 30       	cpi	r24, 0x0A	; 10
     f6c:	59 f4       	brne	.+22     	; 0xf84 <run_solar_heating+0x3a>
     f6e:	91 e0       	ldi	r25, 0x01	; 1
		case KEYPAD_A:
			display_current = 1;
     f70:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <display_current>
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <run_solar_heating+0x3a>
			break;
     f76:	92 e0       	ldi	r25, 0x02	; 2
		case KEYPAD_B:
			display_current = 2;
     f78:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <display_current>
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <run_solar_heating+0x3a>
			break;
     f7e:	93 e0       	ldi	r25, 0x03	; 3
		case KEYPAD_C:
			display_current = 3;
     f80:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <display_current>
     f84:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <display_current>
		default:
			break;
	}

	// set display.
	switch (display_current)
     f88:	92 30       	cpi	r25, 0x02	; 2
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <run_solar_heating+0x5e>
     f8c:	93 30       	cpi	r25, 0x03	; 3
     f8e:	b1 f0       	breq	.+44     	; 0xfbc <run_solar_heating+0x72>
     f90:	91 30       	cpi	r25, 0x01	; 1
     f92:	c1 f4       	brne	.+48     	; 0xfc4 <run_solar_heating+0x7a>
	{
		case 1:
			if (keypad_current >= KEYPAD_0 && keypad_current <= KEYPAD_9)
     f94:	8a 30       	cpi	r24, 0x0A	; 10
     f96:	10 f4       	brcc	.+4      	; 0xf9c <run_solar_heating+0x52>
				enable_input();
     f98:	4c df       	rcall	.-360    	; 0xe32 <enable_input>
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <run_solar_heating+0x7a>
     f9c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <t_low>
			else 
				display_print_uint_4(t_low);
     fa0:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <t_low+0x1>
     fa4:	b6 dd       	rcall	.-1172   	; 0xb12 <display_print_uint_4>
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <run_solar_heating+0x7a>
			break;
		case 2:
			if (keypad_current >= KEYPAD_0 && keypad_current <= KEYPAD_9)
     fa8:	8a 30       	cpi	r24, 0x0A	; 10
     faa:	10 f4       	brcc	.+4      	; 0xfb0 <run_solar_heating+0x66>
				enable_input();
     fac:	42 df       	rcall	.-380    	; 0xe32 <enable_input>
     fae:	0a c0       	rjmp	.+20     	; 0xfc4 <run_solar_heating+0x7a>
			else
				display_print_uint_4(t_high);
     fb0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <t_high>
     fb4:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <t_high+0x1>
     fb8:	ac dd       	rcall	.-1192   	; 0xb12 <display_print_uint_4>
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <run_solar_heating+0x7a>
			break;
		case 3:
			display_print_uint_4(t_filtered);
     fbc:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <t_filtered>
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a7 dd       	rcall	.-1202   	; 0xb12 <display_print_uint_4>
     fc4:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <t_filtered>
			break;
		default:
			break;
	}
	
	if (t_filtered < t_low)
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <t_low>
     fce:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <t_low+0x1>
     fd2:	82 17       	cp	r24, r18
     fd4:	93 07       	cpc	r25, r19
     fd6:	10 f4       	brcc	.+4      	; 0xfdc <run_solar_heating+0x92>
	{
		pump_stop();
     fd8:	69 cc       	rjmp	.-1838   	; 0x8ac <pump_stop>
     fda:	08 95       	ret
	}
	else if (t_filtered >= t_high)
     fdc:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <t_high>
     fe0:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <t_high+0x1>
     fe4:	82 17       	cp	r24, r18
     fe6:	93 07       	cpc	r25, r19
     fe8:	08 f0       	brcs	.+2      	; 0xfec <run_solar_heating+0xa2>
	{
		pump_start();
     fea:	59 cc       	rjmp	.-1870   	; 0x89e <pump_start>
     fec:	08 95       	ret

00000fee <main>:
     fee:	b3 de       	rcall	.-666    	; 0xd56 <util_init>
}

int main(void)
{
	util_init();
	hal_init();
     ff0:	17 df       	rcall	.-466    	; 0xe20 <hal_init>
     ff2:	78 94       	sei
	
	// Enable interrupt globally.
	sei();
     ff4:	2f ef       	ldi	r18, 0xFF	; 255
     ff6:	89 e6       	ldi	r24, 0x69	; 105
     ff8:	98 e1       	ldi	r25, 0x18	; 24
     ffa:	21 50       	subi	r18, 0x01	; 1
     ffc:	80 40       	sbci	r24, 0x00	; 0
     ffe:	90 40       	sbci	r25, 0x00	; 0
    1000:	e1 f7       	brne	.-8      	; 0xffa <main+0xc>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1004:	00 00       	nop
	_delay_ms(500);
	
	// Application
    while (1)
    {	
		run_solar_heating();
    1006:	a1 df       	rcall	.-190    	; 0xf4a <run_solar_heating>
    1008:	fe cf       	rjmp	.-4      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>

0000100a <predict>:
    100a:	cf 92       	push	r12
	_b = b;
	_c = c;
}

static double predict() 
{
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
	return (_a * _x) + (_b * _u);
    1012:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <_x>
    1016:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <_x+0x1>
    101a:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <_x+0x2>
    101e:	50 91 10 02 	lds	r21, 0x0210	; 0x800210 <_x+0x3>
    1022:	60 91 99 02 	lds	r22, 0x0299	; 0x800299 <_a>
    1026:	70 91 9a 02 	lds	r23, 0x029A	; 0x80029a <_a+0x1>
    102a:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_a+0x2>
    102e:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_a+0x3>
    1032:	24 d3       	rcall	.+1608   	; 0x167c <__mulsf3>
    1034:	6b 01       	movw	r12, r22
    1036:	7c 01       	movw	r14, r24
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	a9 01       	movw	r20, r18
    103e:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <_b>
    1042:	70 91 96 02 	lds	r23, 0x0296	; 0x800296 <_b+0x1>
    1046:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_b+0x2>
    104a:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <_b+0x3>
    104e:	16 d3       	rcall	.+1580   	; 0x167c <__mulsf3>
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	c7 01       	movw	r24, r14
    1056:	b6 01       	movw	r22, r12
    1058:	63 d1       	rcall	.+710    	; 0x1320 <__addsf3>
}
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	cf 90       	pop	r12
    1062:	08 95       	ret

00001064 <uncertenty>:

static double uncertenty()
{
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
	return ((_a * _cov) * _a) + _r; 
    106c:	c0 90 99 02 	lds	r12, 0x0299	; 0x800299 <_a>
    1070:	d0 90 9a 02 	lds	r13, 0x029A	; 0x80029a <_a+0x1>
    1074:	e0 90 9b 02 	lds	r14, 0x029B	; 0x80029b <_a+0x2>
    1078:	f0 90 9c 02 	lds	r15, 0x029C	; 0x80029c <_a+0x3>
    107c:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <_cov>
    1080:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <_cov+0x1>
    1084:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <_cov+0x2>
    1088:	50 91 14 02 	lds	r21, 0x0214	; 0x800214 <_cov+0x3>
    108c:	c7 01       	movw	r24, r14
    108e:	b6 01       	movw	r22, r12
    1090:	f5 d2       	rcall	.+1514   	; 0x167c <__mulsf3>
    1092:	9b 01       	movw	r18, r22
    1094:	ac 01       	movw	r20, r24
    1096:	c7 01       	movw	r24, r14
    1098:	b6 01       	movw	r22, r12
    109a:	f0 d2       	rcall	.+1504   	; 0x167c <__mulsf3>
    109c:	20 91 a1 02 	lds	r18, 0x02A1	; 0x8002a1 <_r>
    10a0:	30 91 a2 02 	lds	r19, 0x02A2	; 0x8002a2 <_r+0x1>
    10a4:	40 91 a3 02 	lds	r20, 0x02A3	; 0x8002a3 <_r+0x2>
    10a8:	50 91 a4 02 	lds	r21, 0x02A4	; 0x8002a4 <_r+0x3>
    10ac:	39 d1       	rcall	.+626    	; 0x1320 <__addsf3>
}
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
    10b2:	df 90       	pop	r13
    10b4:	cf 90       	pop	r12
    10b6:	08 95       	ret

000010b8 <kalman_init>:
static double _cov = -1;
static double _u = 0;
static double _x = 255; // estimated signal without noise

void kalman_init(double r, double q, double a, double b, double c)
{
    10b8:	af 92       	push	r10
    10ba:	bf 92       	push	r11
    10bc:	cf 92       	push	r12
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
	_r = r;
    10d0:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <_r>
    10d4:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <_r+0x1>
    10d8:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <_r+0x2>
    10dc:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <_r+0x3>
	_q = q;
    10e0:	20 93 9d 02 	sts	0x029D, r18	; 0x80029d <_q>
    10e4:	30 93 9e 02 	sts	0x029E, r19	; 0x80029e <_q+0x1>
    10e8:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <_q+0x2>
    10ec:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <_q+0x3>
	_a = a;
    10f0:	e0 92 99 02 	sts	0x0299, r14	; 0x800299 <_a>
    10f4:	f0 92 9a 02 	sts	0x029A, r15	; 0x80029a <_a+0x1>
    10f8:	00 93 9b 02 	sts	0x029B, r16	; 0x80029b <_a+0x2>
    10fc:	10 93 9c 02 	sts	0x029C, r17	; 0x80029c <_a+0x3>
	_b = b;
    1100:	a0 92 95 02 	sts	0x0295, r10	; 0x800295 <_b>
    1104:	b0 92 96 02 	sts	0x0296, r11	; 0x800296 <_b+0x1>
    1108:	c0 92 97 02 	sts	0x0297, r12	; 0x800297 <_b+0x2>
    110c:	d0 92 98 02 	sts	0x0298, r13	; 0x800298 <_b+0x3>
	_c = c;
    1110:	8e 85       	ldd	r24, Y+14	; 0x0e
    1112:	9f 85       	ldd	r25, Y+15	; 0x0f
    1114:	a8 89       	ldd	r26, Y+16	; 0x10
    1116:	b9 89       	ldd	r27, Y+17	; 0x11
    1118:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_c>
    111c:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <_c+0x1>
    1120:	a0 93 93 02 	sts	0x0293, r26	; 0x800293 <_c+0x2>
    1124:	b0 93 94 02 	sts	0x0294, r27	; 0x800294 <_c+0x3>
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	08 95       	ret

0000113e <kalman_filter>:
{
	return ((_a * _cov) * _a) + _r; 
}

uint8_t kalman_filter(uint8_t measurement)
{
    113e:	4f 92       	push	r4
    1140:	5f 92       	push	r5
    1142:	6f 92       	push	r6
    1144:	7f 92       	push	r7
    1146:	8f 92       	push	r8
    1148:	9f 92       	push	r9
    114a:	af 92       	push	r10
    114c:	bf 92       	push	r11
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	29 97       	sbiw	r28, 0x09	; 9
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	89 87       	std	Y+9, r24	; 0x09
	if (_x == 255)
    116c:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <_x>
    1170:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <_x+0x1>
    1174:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <_x+0x2>
    1178:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_x+0x3>
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	4f e7       	ldi	r20, 0x7F	; 127
    1182:	53 e4       	ldi	r21, 0x43	; 67
    1184:	31 d1       	rcall	.+610    	; 0x13e8 <__cmpsf2>
    1186:	81 11       	cpse	r24, r1
    1188:	39 c0       	rjmp	.+114    	; 0x11fc <kalman_filter+0xbe>
	{
		_x = (1 / _c) * measurement;
    118a:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <_c>
    118e:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <_c+0x1>
    1192:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <_c+0x2>
    1196:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <_c+0x3>
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	80 e8       	ldi	r24, 0x80	; 128
    11a0:	9f e3       	ldi	r25, 0x3F	; 63
    11a2:	26 d1       	rcall	.+588    	; 0x13f0 <__divsf3>
    11a4:	6b 01       	movw	r12, r22
    11a6:	7c 01       	movw	r14, r24
    11a8:	29 85       	ldd	r18, Y+9	; 0x09
    11aa:	62 2f       	mov	r22, r18
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	b4 d1       	rcall	.+872    	; 0x151c <__floatsisf>
    11b4:	a7 01       	movw	r20, r14
    11b6:	96 01       	movw	r18, r12
    11b8:	61 d2       	rcall	.+1218   	; 0x167c <__mulsf3>
    11ba:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <_x>
    11be:	70 93 0e 02 	sts	0x020E, r23	; 0x80020e <_x+0x1>
    11c2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_x+0x2>
    11c6:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <_x+0x3>
		_cov = (1 / _c) * _q * (1 / _c); 
    11ca:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <_q>
    11ce:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <_q+0x1>
    11d2:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <_q+0x2>
    11d6:	50 91 a0 02 	lds	r21, 0x02A0	; 0x8002a0 <_q+0x3>
    11da:	c7 01       	movw	r24, r14
    11dc:	b6 01       	movw	r22, r12
    11de:	4e d2       	rcall	.+1180   	; 0x167c <__mulsf3>
    11e0:	9b 01       	movw	r18, r22
    11e2:	ac 01       	movw	r20, r24
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	49 d2       	rcall	.+1170   	; 0x167c <__mulsf3>
    11ea:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <_cov>
    11ee:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <_cov+0x1>
    11f2:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_cov+0x2>
    11f6:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <_cov+0x3>
	}
	else 
	{
		// compute prediction
		double pred_x = predict();
    11fa:	72 c0       	rjmp	.+228    	; 0x12e0 <kalman_filter+0x1a2>
    11fc:	06 df       	rcall	.-500    	; 0x100a <predict>
    11fe:	69 83       	std	Y+1, r22	; 0x01
    1200:	7a 83       	std	Y+2, r23	; 0x02
    1202:	8b 83       	std	Y+3, r24	; 0x03
    1204:	9c 83       	std	Y+4, r25	; 0x04
		double pred_cov = uncertenty();
    1206:	2e df       	rcall	.-420    	; 0x1064 <uncertenty>
    1208:	6b 01       	movw	r12, r22
    120a:	7c 01       	movw	r14, r24
    120c:	80 90 91 02 	lds	r8, 0x0291	; 0x800291 <_c>
		
		// kalman gain
		double k = pred_cov  * _c * (1 / ((_c * pred_cov * _c) + _q));
    1210:	90 90 92 02 	lds	r9, 0x0292	; 0x800292 <_c+0x1>
    1214:	a0 90 93 02 	lds	r10, 0x0293	; 0x800293 <_c+0x2>
    1218:	b0 90 94 02 	lds	r11, 0x0294	; 0x800294 <_c+0x3>
    121c:	a5 01       	movw	r20, r10
    121e:	94 01       	movw	r18, r8
    1220:	2d d2       	rcall	.+1114   	; 0x167c <__mulsf3>
    1222:	2b 01       	movw	r4, r22
    1224:	3c 01       	movw	r6, r24
    1226:	9b 01       	movw	r18, r22
    1228:	ac 01       	movw	r20, r24
    122a:	c5 01       	movw	r24, r10
    122c:	b4 01       	movw	r22, r8
    122e:	26 d2       	rcall	.+1100   	; 0x167c <__mulsf3>
    1230:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <_q>
    1234:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <_q+0x1>
    1238:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <_q+0x2>
    123c:	50 91 a0 02 	lds	r21, 0x02A0	; 0x8002a0 <_q+0x3>
    1240:	6f d0       	rcall	.+222    	; 0x1320 <__addsf3>
    1242:	9b 01       	movw	r18, r22
    1244:	ac 01       	movw	r20, r24
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	80 e8       	ldi	r24, 0x80	; 128
    124c:	9f e3       	ldi	r25, 0x3F	; 63
    124e:	d0 d0       	rcall	.+416    	; 0x13f0 <__divsf3>
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	c3 01       	movw	r24, r6
    1256:	b2 01       	movw	r22, r4
    1258:	11 d2       	rcall	.+1058   	; 0x167c <__mulsf3>
    125a:	2b 01       	movw	r4, r22
    125c:	3c 01       	movw	r6, r24
		
		// Correction
		_x = pred_x + k * (measurement - (_c * pred_x));
    125e:	a5 01       	movw	r20, r10
    1260:	94 01       	movw	r18, r8
    1262:	69 81       	ldd	r22, Y+1	; 0x01
    1264:	7a 81       	ldd	r23, Y+2	; 0x02
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	08 d2       	rcall	.+1040   	; 0x167c <__mulsf3>
    126c:	6d 83       	std	Y+5, r22	; 0x05
    126e:	7e 83       	std	Y+6, r23	; 0x06
    1270:	8f 83       	std	Y+7, r24	; 0x07
    1272:	98 87       	std	Y+8, r25	; 0x08
    1274:	29 85       	ldd	r18, Y+9	; 0x09
    1276:	62 2f       	mov	r22, r18
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	4e d1       	rcall	.+668    	; 0x151c <__floatsisf>
    1280:	2d 81       	ldd	r18, Y+5	; 0x05
    1282:	3e 81       	ldd	r19, Y+6	; 0x06
    1284:	4f 81       	ldd	r20, Y+7	; 0x07
    1286:	58 85       	ldd	r21, Y+8	; 0x08
    1288:	4a d0       	rcall	.+148    	; 0x131e <__subsf3>
    128a:	9b 01       	movw	r18, r22
    128c:	ac 01       	movw	r20, r24
    128e:	c3 01       	movw	r24, r6
    1290:	b2 01       	movw	r22, r4
    1292:	f4 d1       	rcall	.+1000   	; 0x167c <__mulsf3>
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	69 81       	ldd	r22, Y+1	; 0x01
    129a:	7a 81       	ldd	r23, Y+2	; 0x02
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	3f d0       	rcall	.+126    	; 0x1320 <__addsf3>
    12a2:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <_x>
    12a6:	70 93 0e 02 	sts	0x020E, r23	; 0x80020e <_x+0x1>
    12aa:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_x+0x2>
    12ae:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <_x+0x3>
		_cov = pred_cov - (k * _c * pred_cov);
    12b2:	a3 01       	movw	r20, r6
    12b4:	92 01       	movw	r18, r4
    12b6:	c5 01       	movw	r24, r10
    12b8:	b4 01       	movw	r22, r8
    12ba:	e0 d1       	rcall	.+960    	; 0x167c <__mulsf3>
    12bc:	9b 01       	movw	r18, r22
    12be:	ac 01       	movw	r20, r24
    12c0:	c7 01       	movw	r24, r14
    12c2:	b6 01       	movw	r22, r12
    12c4:	db d1       	rcall	.+950    	; 0x167c <__mulsf3>
    12c6:	9b 01       	movw	r18, r22
    12c8:	ac 01       	movw	r20, r24
    12ca:	c7 01       	movw	r24, r14
    12cc:	b6 01       	movw	r22, r12
    12ce:	27 d0       	rcall	.+78     	; 0x131e <__subsf3>
    12d0:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <_cov>
    12d4:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <_cov+0x1>
    12d8:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_cov+0x2>
    12dc:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <_cov+0x3>
    12e0:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <_x>
	}
	 return _x;
    12e4:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <_x+0x1>
    12e8:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <_x+0x2>
    12ec:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_x+0x3>
    12f0:	e7 d0       	rcall	.+462    	; 0x14c0 <__fixunssfsi>
    12f2:	86 2f       	mov	r24, r22
    12f4:	29 96       	adiw	r28, 0x09	; 9
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	df 90       	pop	r13
    130a:	cf 90       	pop	r12
    130c:	bf 90       	pop	r11
    130e:	af 90       	pop	r10
    1310:	9f 90       	pop	r9
    1312:	8f 90       	pop	r8
    1314:	7f 90       	pop	r7
    1316:	6f 90       	pop	r6
    1318:	5f 90       	pop	r5
    131a:	4f 90       	pop	r4
    131c:	08 95       	ret

0000131e <__subsf3>:
    131e:	50 58       	subi	r21, 0x80	; 128

00001320 <__addsf3>:
    1320:	bb 27       	eor	r27, r27
    1322:	aa 27       	eor	r26, r26
    1324:	0e d0       	rcall	.+28     	; 0x1342 <__addsf3x>
    1326:	70 c1       	rjmp	.+736    	; 0x1608 <__fp_round>
    1328:	61 d1       	rcall	.+706    	; 0x15ec <__fp_pscA>
    132a:	30 f0       	brcs	.+12     	; 0x1338 <__addsf3+0x18>
    132c:	66 d1       	rcall	.+716    	; 0x15fa <__fp_pscB>
    132e:	20 f0       	brcs	.+8      	; 0x1338 <__addsf3+0x18>
    1330:	31 f4       	brne	.+12     	; 0x133e <__addsf3+0x1e>
    1332:	9f 3f       	cpi	r25, 0xFF	; 255
    1334:	11 f4       	brne	.+4      	; 0x133a <__addsf3+0x1a>
    1336:	1e f4       	brtc	.+6      	; 0x133e <__addsf3+0x1e>
    1338:	56 c1       	rjmp	.+684    	; 0x15e6 <__fp_nan>
    133a:	0e f4       	brtc	.+2      	; 0x133e <__addsf3+0x1e>
    133c:	e0 95       	com	r30
    133e:	e7 fb       	bst	r30, 7
    1340:	4c c1       	rjmp	.+664    	; 0x15da <__fp_inf>

00001342 <__addsf3x>:
    1342:	e9 2f       	mov	r30, r25
    1344:	72 d1       	rcall	.+740    	; 0x162a <__fp_split3>
    1346:	80 f3       	brcs	.-32     	; 0x1328 <__addsf3+0x8>
    1348:	ba 17       	cp	r27, r26
    134a:	62 07       	cpc	r22, r18
    134c:	73 07       	cpc	r23, r19
    134e:	84 07       	cpc	r24, r20
    1350:	95 07       	cpc	r25, r21
    1352:	18 f0       	brcs	.+6      	; 0x135a <__addsf3x+0x18>
    1354:	71 f4       	brne	.+28     	; 0x1372 <__addsf3x+0x30>
    1356:	9e f5       	brtc	.+102    	; 0x13be <__addsf3x+0x7c>
    1358:	8a c1       	rjmp	.+788    	; 0x166e <__fp_zero>
    135a:	0e f4       	brtc	.+2      	; 0x135e <__addsf3x+0x1c>
    135c:	e0 95       	com	r30
    135e:	0b 2e       	mov	r0, r27
    1360:	ba 2f       	mov	r27, r26
    1362:	a0 2d       	mov	r26, r0
    1364:	0b 01       	movw	r0, r22
    1366:	b9 01       	movw	r22, r18
    1368:	90 01       	movw	r18, r0
    136a:	0c 01       	movw	r0, r24
    136c:	ca 01       	movw	r24, r20
    136e:	a0 01       	movw	r20, r0
    1370:	11 24       	eor	r1, r1
    1372:	ff 27       	eor	r31, r31
    1374:	59 1b       	sub	r21, r25
    1376:	99 f0       	breq	.+38     	; 0x139e <__addsf3x+0x5c>
    1378:	59 3f       	cpi	r21, 0xF9	; 249
    137a:	50 f4       	brcc	.+20     	; 0x1390 <__addsf3x+0x4e>
    137c:	50 3e       	cpi	r21, 0xE0	; 224
    137e:	68 f1       	brcs	.+90     	; 0x13da <__addsf3x+0x98>
    1380:	1a 16       	cp	r1, r26
    1382:	f0 40       	sbci	r31, 0x00	; 0
    1384:	a2 2f       	mov	r26, r18
    1386:	23 2f       	mov	r18, r19
    1388:	34 2f       	mov	r19, r20
    138a:	44 27       	eor	r20, r20
    138c:	58 5f       	subi	r21, 0xF8	; 248
    138e:	f3 cf       	rjmp	.-26     	; 0x1376 <__addsf3x+0x34>
    1390:	46 95       	lsr	r20
    1392:	37 95       	ror	r19
    1394:	27 95       	ror	r18
    1396:	a7 95       	ror	r26
    1398:	f0 40       	sbci	r31, 0x00	; 0
    139a:	53 95       	inc	r21
    139c:	c9 f7       	brne	.-14     	; 0x1390 <__addsf3x+0x4e>
    139e:	7e f4       	brtc	.+30     	; 0x13be <__addsf3x+0x7c>
    13a0:	1f 16       	cp	r1, r31
    13a2:	ba 0b       	sbc	r27, r26
    13a4:	62 0b       	sbc	r22, r18
    13a6:	73 0b       	sbc	r23, r19
    13a8:	84 0b       	sbc	r24, r20
    13aa:	ba f0       	brmi	.+46     	; 0x13da <__addsf3x+0x98>
    13ac:	91 50       	subi	r25, 0x01	; 1
    13ae:	a1 f0       	breq	.+40     	; 0x13d8 <__addsf3x+0x96>
    13b0:	ff 0f       	add	r31, r31
    13b2:	bb 1f       	adc	r27, r27
    13b4:	66 1f       	adc	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	88 1f       	adc	r24, r24
    13ba:	c2 f7       	brpl	.-16     	; 0x13ac <__addsf3x+0x6a>
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <__addsf3x+0x98>
    13be:	ba 0f       	add	r27, r26
    13c0:	62 1f       	adc	r22, r18
    13c2:	73 1f       	adc	r23, r19
    13c4:	84 1f       	adc	r24, r20
    13c6:	48 f4       	brcc	.+18     	; 0x13da <__addsf3x+0x98>
    13c8:	87 95       	ror	r24
    13ca:	77 95       	ror	r23
    13cc:	67 95       	ror	r22
    13ce:	b7 95       	ror	r27
    13d0:	f7 95       	ror	r31
    13d2:	9e 3f       	cpi	r25, 0xFE	; 254
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <__addsf3x+0x96>
    13d6:	b3 cf       	rjmp	.-154    	; 0x133e <__addsf3+0x1e>
    13d8:	93 95       	inc	r25
    13da:	88 0f       	add	r24, r24
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <__addsf3x+0x9e>
    13de:	99 27       	eor	r25, r25
    13e0:	ee 0f       	add	r30, r30
    13e2:	97 95       	ror	r25
    13e4:	87 95       	ror	r24
    13e6:	08 95       	ret

000013e8 <__cmpsf2>:
    13e8:	d4 d0       	rcall	.+424    	; 0x1592 <__fp_cmp>
    13ea:	08 f4       	brcc	.+2      	; 0x13ee <__cmpsf2+0x6>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	08 95       	ret

000013f0 <__divsf3>:
    13f0:	0c d0       	rcall	.+24     	; 0x140a <__divsf3x>
    13f2:	0a c1       	rjmp	.+532    	; 0x1608 <__fp_round>
    13f4:	02 d1       	rcall	.+516    	; 0x15fa <__fp_pscB>
    13f6:	40 f0       	brcs	.+16     	; 0x1408 <__divsf3+0x18>
    13f8:	f9 d0       	rcall	.+498    	; 0x15ec <__fp_pscA>
    13fa:	30 f0       	brcs	.+12     	; 0x1408 <__divsf3+0x18>
    13fc:	21 f4       	brne	.+8      	; 0x1406 <__divsf3+0x16>
    13fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1400:	19 f0       	breq	.+6      	; 0x1408 <__divsf3+0x18>
    1402:	eb c0       	rjmp	.+470    	; 0x15da <__fp_inf>
    1404:	51 11       	cpse	r21, r1
    1406:	34 c1       	rjmp	.+616    	; 0x1670 <__fp_szero>
    1408:	ee c0       	rjmp	.+476    	; 0x15e6 <__fp_nan>

0000140a <__divsf3x>:
    140a:	0f d1       	rcall	.+542    	; 0x162a <__fp_split3>
    140c:	98 f3       	brcs	.-26     	; 0x13f4 <__divsf3+0x4>

0000140e <__divsf3_pse>:
    140e:	99 23       	and	r25, r25
    1410:	c9 f3       	breq	.-14     	; 0x1404 <__divsf3+0x14>
    1412:	55 23       	and	r21, r21
    1414:	b1 f3       	breq	.-20     	; 0x1402 <__divsf3+0x12>
    1416:	95 1b       	sub	r25, r21
    1418:	55 0b       	sbc	r21, r21
    141a:	bb 27       	eor	r27, r27
    141c:	aa 27       	eor	r26, r26
    141e:	62 17       	cp	r22, r18
    1420:	73 07       	cpc	r23, r19
    1422:	84 07       	cpc	r24, r20
    1424:	38 f0       	brcs	.+14     	; 0x1434 <__divsf3_pse+0x26>
    1426:	9f 5f       	subi	r25, 0xFF	; 255
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	22 0f       	add	r18, r18
    142c:	33 1f       	adc	r19, r19
    142e:	44 1f       	adc	r20, r20
    1430:	aa 1f       	adc	r26, r26
    1432:	a9 f3       	breq	.-22     	; 0x141e <__divsf3_pse+0x10>
    1434:	33 d0       	rcall	.+102    	; 0x149c <__divsf3_pse+0x8e>
    1436:	0e 2e       	mov	r0, r30
    1438:	3a f0       	brmi	.+14     	; 0x1448 <__divsf3_pse+0x3a>
    143a:	e0 e8       	ldi	r30, 0x80	; 128
    143c:	30 d0       	rcall	.+96     	; 0x149e <__divsf3_pse+0x90>
    143e:	91 50       	subi	r25, 0x01	; 1
    1440:	50 40       	sbci	r21, 0x00	; 0
    1442:	e6 95       	lsr	r30
    1444:	00 1c       	adc	r0, r0
    1446:	ca f7       	brpl	.-14     	; 0x143a <__divsf3_pse+0x2c>
    1448:	29 d0       	rcall	.+82     	; 0x149c <__divsf3_pse+0x8e>
    144a:	fe 2f       	mov	r31, r30
    144c:	27 d0       	rcall	.+78     	; 0x149c <__divsf3_pse+0x8e>
    144e:	66 0f       	add	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	bb 1f       	adc	r27, r27
    1456:	26 17       	cp	r18, r22
    1458:	37 07       	cpc	r19, r23
    145a:	48 07       	cpc	r20, r24
    145c:	ab 07       	cpc	r26, r27
    145e:	b0 e8       	ldi	r27, 0x80	; 128
    1460:	09 f0       	breq	.+2      	; 0x1464 <__divsf3_pse+0x56>
    1462:	bb 0b       	sbc	r27, r27
    1464:	80 2d       	mov	r24, r0
    1466:	bf 01       	movw	r22, r30
    1468:	ff 27       	eor	r31, r31
    146a:	93 58       	subi	r25, 0x83	; 131
    146c:	5f 4f       	sbci	r21, 0xFF	; 255
    146e:	2a f0       	brmi	.+10     	; 0x147a <__divsf3_pse+0x6c>
    1470:	9e 3f       	cpi	r25, 0xFE	; 254
    1472:	51 05       	cpc	r21, r1
    1474:	68 f0       	brcs	.+26     	; 0x1490 <__divsf3_pse+0x82>
    1476:	b1 c0       	rjmp	.+354    	; 0x15da <__fp_inf>
    1478:	fb c0       	rjmp	.+502    	; 0x1670 <__fp_szero>
    147a:	5f 3f       	cpi	r21, 0xFF	; 255
    147c:	ec f3       	brlt	.-6      	; 0x1478 <__divsf3_pse+0x6a>
    147e:	98 3e       	cpi	r25, 0xE8	; 232
    1480:	dc f3       	brlt	.-10     	; 0x1478 <__divsf3_pse+0x6a>
    1482:	86 95       	lsr	r24
    1484:	77 95       	ror	r23
    1486:	67 95       	ror	r22
    1488:	b7 95       	ror	r27
    148a:	f7 95       	ror	r31
    148c:	9f 5f       	subi	r25, 0xFF	; 255
    148e:	c9 f7       	brne	.-14     	; 0x1482 <__divsf3_pse+0x74>
    1490:	88 0f       	add	r24, r24
    1492:	91 1d       	adc	r25, r1
    1494:	96 95       	lsr	r25
    1496:	87 95       	ror	r24
    1498:	97 f9       	bld	r25, 7
    149a:	08 95       	ret
    149c:	e1 e0       	ldi	r30, 0x01	; 1
    149e:	66 0f       	add	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	88 1f       	adc	r24, r24
    14a4:	bb 1f       	adc	r27, r27
    14a6:	62 17       	cp	r22, r18
    14a8:	73 07       	cpc	r23, r19
    14aa:	84 07       	cpc	r24, r20
    14ac:	ba 07       	cpc	r27, r26
    14ae:	20 f0       	brcs	.+8      	; 0x14b8 <__divsf3_pse+0xaa>
    14b0:	62 1b       	sub	r22, r18
    14b2:	73 0b       	sbc	r23, r19
    14b4:	84 0b       	sbc	r24, r20
    14b6:	ba 0b       	sbc	r27, r26
    14b8:	ee 1f       	adc	r30, r30
    14ba:	88 f7       	brcc	.-30     	; 0x149e <__divsf3_pse+0x90>
    14bc:	e0 95       	com	r30
    14be:	08 95       	ret

000014c0 <__fixunssfsi>:
    14c0:	bc d0       	rcall	.+376    	; 0x163a <__fp_splitA>
    14c2:	88 f0       	brcs	.+34     	; 0x14e6 <__fixunssfsi+0x26>
    14c4:	9f 57       	subi	r25, 0x7F	; 127
    14c6:	90 f0       	brcs	.+36     	; 0x14ec <__fixunssfsi+0x2c>
    14c8:	b9 2f       	mov	r27, r25
    14ca:	99 27       	eor	r25, r25
    14cc:	b7 51       	subi	r27, 0x17	; 23
    14ce:	a0 f0       	brcs	.+40     	; 0x14f8 <__fixunssfsi+0x38>
    14d0:	d1 f0       	breq	.+52     	; 0x1506 <__fixunssfsi+0x46>
    14d2:	66 0f       	add	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	1a f0       	brmi	.+6      	; 0x14e2 <__fixunssfsi+0x22>
    14dc:	ba 95       	dec	r27
    14de:	c9 f7       	brne	.-14     	; 0x14d2 <__fixunssfsi+0x12>
    14e0:	12 c0       	rjmp	.+36     	; 0x1506 <__fixunssfsi+0x46>
    14e2:	b1 30       	cpi	r27, 0x01	; 1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <__fixunssfsi+0x46>
    14e6:	c3 d0       	rcall	.+390    	; 0x166e <__fp_zero>
    14e8:	b1 e0       	ldi	r27, 0x01	; 1
    14ea:	08 95       	ret
    14ec:	c0 c0       	rjmp	.+384    	; 0x166e <__fp_zero>
    14ee:	67 2f       	mov	r22, r23
    14f0:	78 2f       	mov	r23, r24
    14f2:	88 27       	eor	r24, r24
    14f4:	b8 5f       	subi	r27, 0xF8	; 248
    14f6:	39 f0       	breq	.+14     	; 0x1506 <__fixunssfsi+0x46>
    14f8:	b9 3f       	cpi	r27, 0xF9	; 249
    14fa:	cc f3       	brlt	.-14     	; 0x14ee <__fixunssfsi+0x2e>
    14fc:	86 95       	lsr	r24
    14fe:	77 95       	ror	r23
    1500:	67 95       	ror	r22
    1502:	b3 95       	inc	r27
    1504:	d9 f7       	brne	.-10     	; 0x14fc <__fixunssfsi+0x3c>
    1506:	3e f4       	brtc	.+14     	; 0x1516 <__fixunssfsi+0x56>
    1508:	90 95       	com	r25
    150a:	80 95       	com	r24
    150c:	70 95       	com	r23
    150e:	61 95       	neg	r22
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	8f 4f       	sbci	r24, 0xFF	; 255
    1514:	9f 4f       	sbci	r25, 0xFF	; 255
    1516:	08 95       	ret

00001518 <__floatunsisf>:
    1518:	e8 94       	clt
    151a:	09 c0       	rjmp	.+18     	; 0x152e <__floatsisf+0x12>

0000151c <__floatsisf>:
    151c:	97 fb       	bst	r25, 7
    151e:	3e f4       	brtc	.+14     	; 0x152e <__floatsisf+0x12>
    1520:	90 95       	com	r25
    1522:	80 95       	com	r24
    1524:	70 95       	com	r23
    1526:	61 95       	neg	r22
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	8f 4f       	sbci	r24, 0xFF	; 255
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	99 23       	and	r25, r25
    1530:	a9 f0       	breq	.+42     	; 0x155c <__floatsisf+0x40>
    1532:	f9 2f       	mov	r31, r25
    1534:	96 e9       	ldi	r25, 0x96	; 150
    1536:	bb 27       	eor	r27, r27
    1538:	93 95       	inc	r25
    153a:	f6 95       	lsr	r31
    153c:	87 95       	ror	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b7 95       	ror	r27
    1544:	f1 11       	cpse	r31, r1
    1546:	f8 cf       	rjmp	.-16     	; 0x1538 <__floatsisf+0x1c>
    1548:	fa f4       	brpl	.+62     	; 0x1588 <__floatsisf+0x6c>
    154a:	bb 0f       	add	r27, r27
    154c:	11 f4       	brne	.+4      	; 0x1552 <__floatsisf+0x36>
    154e:	60 ff       	sbrs	r22, 0
    1550:	1b c0       	rjmp	.+54     	; 0x1588 <__floatsisf+0x6c>
    1552:	6f 5f       	subi	r22, 0xFF	; 255
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	16 c0       	rjmp	.+44     	; 0x1588 <__floatsisf+0x6c>
    155c:	88 23       	and	r24, r24
    155e:	11 f0       	breq	.+4      	; 0x1564 <__floatsisf+0x48>
    1560:	96 e9       	ldi	r25, 0x96	; 150
    1562:	11 c0       	rjmp	.+34     	; 0x1586 <__floatsisf+0x6a>
    1564:	77 23       	and	r23, r23
    1566:	21 f0       	breq	.+8      	; 0x1570 <__floatsisf+0x54>
    1568:	9e e8       	ldi	r25, 0x8E	; 142
    156a:	87 2f       	mov	r24, r23
    156c:	76 2f       	mov	r23, r22
    156e:	05 c0       	rjmp	.+10     	; 0x157a <__floatsisf+0x5e>
    1570:	66 23       	and	r22, r22
    1572:	71 f0       	breq	.+28     	; 0x1590 <__floatsisf+0x74>
    1574:	96 e8       	ldi	r25, 0x86	; 134
    1576:	86 2f       	mov	r24, r22
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	2a f0       	brmi	.+10     	; 0x1588 <__floatsisf+0x6c>
    157e:	9a 95       	dec	r25
    1580:	66 0f       	add	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	da f7       	brpl	.-10     	; 0x157e <__floatsisf+0x62>
    1588:	88 0f       	add	r24, r24
    158a:	96 95       	lsr	r25
    158c:	87 95       	ror	r24
    158e:	97 f9       	bld	r25, 7
    1590:	08 95       	ret

00001592 <__fp_cmp>:
    1592:	99 0f       	add	r25, r25
    1594:	00 08       	sbc	r0, r0
    1596:	55 0f       	add	r21, r21
    1598:	aa 0b       	sbc	r26, r26
    159a:	e0 e8       	ldi	r30, 0x80	; 128
    159c:	fe ef       	ldi	r31, 0xFE	; 254
    159e:	16 16       	cp	r1, r22
    15a0:	17 06       	cpc	r1, r23
    15a2:	e8 07       	cpc	r30, r24
    15a4:	f9 07       	cpc	r31, r25
    15a6:	c0 f0       	brcs	.+48     	; 0x15d8 <__fp_cmp+0x46>
    15a8:	12 16       	cp	r1, r18
    15aa:	13 06       	cpc	r1, r19
    15ac:	e4 07       	cpc	r30, r20
    15ae:	f5 07       	cpc	r31, r21
    15b0:	98 f0       	brcs	.+38     	; 0x15d8 <__fp_cmp+0x46>
    15b2:	62 1b       	sub	r22, r18
    15b4:	73 0b       	sbc	r23, r19
    15b6:	84 0b       	sbc	r24, r20
    15b8:	95 0b       	sbc	r25, r21
    15ba:	39 f4       	brne	.+14     	; 0x15ca <__fp_cmp+0x38>
    15bc:	0a 26       	eor	r0, r26
    15be:	61 f0       	breq	.+24     	; 0x15d8 <__fp_cmp+0x46>
    15c0:	23 2b       	or	r18, r19
    15c2:	24 2b       	or	r18, r20
    15c4:	25 2b       	or	r18, r21
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <__fp_cmp+0x3e>
    15c8:	08 95       	ret
    15ca:	0a 26       	eor	r0, r26
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <__fp_cmp+0x3e>
    15ce:	a1 40       	sbci	r26, 0x01	; 1
    15d0:	a6 95       	lsr	r26
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	81 1d       	adc	r24, r1
    15d6:	81 1d       	adc	r24, r1
    15d8:	08 95       	ret

000015da <__fp_inf>:
    15da:	97 f9       	bld	r25, 7
    15dc:	9f 67       	ori	r25, 0x7F	; 127
    15de:	80 e8       	ldi	r24, 0x80	; 128
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	08 95       	ret

000015e6 <__fp_nan>:
    15e6:	9f ef       	ldi	r25, 0xFF	; 255
    15e8:	80 ec       	ldi	r24, 0xC0	; 192
    15ea:	08 95       	ret

000015ec <__fp_pscA>:
    15ec:	00 24       	eor	r0, r0
    15ee:	0a 94       	dec	r0
    15f0:	16 16       	cp	r1, r22
    15f2:	17 06       	cpc	r1, r23
    15f4:	18 06       	cpc	r1, r24
    15f6:	09 06       	cpc	r0, r25
    15f8:	08 95       	ret

000015fa <__fp_pscB>:
    15fa:	00 24       	eor	r0, r0
    15fc:	0a 94       	dec	r0
    15fe:	12 16       	cp	r1, r18
    1600:	13 06       	cpc	r1, r19
    1602:	14 06       	cpc	r1, r20
    1604:	05 06       	cpc	r0, r21
    1606:	08 95       	ret

00001608 <__fp_round>:
    1608:	09 2e       	mov	r0, r25
    160a:	03 94       	inc	r0
    160c:	00 0c       	add	r0, r0
    160e:	11 f4       	brne	.+4      	; 0x1614 <__fp_round+0xc>
    1610:	88 23       	and	r24, r24
    1612:	52 f0       	brmi	.+20     	; 0x1628 <__fp_round+0x20>
    1614:	bb 0f       	add	r27, r27
    1616:	40 f4       	brcc	.+16     	; 0x1628 <__fp_round+0x20>
    1618:	bf 2b       	or	r27, r31
    161a:	11 f4       	brne	.+4      	; 0x1620 <__fp_round+0x18>
    161c:	60 ff       	sbrs	r22, 0
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <__fp_round+0x20>
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	08 95       	ret

0000162a <__fp_split3>:
    162a:	57 fd       	sbrc	r21, 7
    162c:	90 58       	subi	r25, 0x80	; 128
    162e:	44 0f       	add	r20, r20
    1630:	55 1f       	adc	r21, r21
    1632:	59 f0       	breq	.+22     	; 0x164a <__fp_splitA+0x10>
    1634:	5f 3f       	cpi	r21, 0xFF	; 255
    1636:	71 f0       	breq	.+28     	; 0x1654 <__fp_splitA+0x1a>
    1638:	47 95       	ror	r20

0000163a <__fp_splitA>:
    163a:	88 0f       	add	r24, r24
    163c:	97 fb       	bst	r25, 7
    163e:	99 1f       	adc	r25, r25
    1640:	61 f0       	breq	.+24     	; 0x165a <__fp_splitA+0x20>
    1642:	9f 3f       	cpi	r25, 0xFF	; 255
    1644:	79 f0       	breq	.+30     	; 0x1664 <__fp_splitA+0x2a>
    1646:	87 95       	ror	r24
    1648:	08 95       	ret
    164a:	12 16       	cp	r1, r18
    164c:	13 06       	cpc	r1, r19
    164e:	14 06       	cpc	r1, r20
    1650:	55 1f       	adc	r21, r21
    1652:	f2 cf       	rjmp	.-28     	; 0x1638 <__fp_split3+0xe>
    1654:	46 95       	lsr	r20
    1656:	f1 df       	rcall	.-30     	; 0x163a <__fp_splitA>
    1658:	08 c0       	rjmp	.+16     	; 0x166a <__fp_splitA+0x30>
    165a:	16 16       	cp	r1, r22
    165c:	17 06       	cpc	r1, r23
    165e:	18 06       	cpc	r1, r24
    1660:	99 1f       	adc	r25, r25
    1662:	f1 cf       	rjmp	.-30     	; 0x1646 <__fp_splitA+0xc>
    1664:	86 95       	lsr	r24
    1666:	71 05       	cpc	r23, r1
    1668:	61 05       	cpc	r22, r1
    166a:	08 94       	sec
    166c:	08 95       	ret

0000166e <__fp_zero>:
    166e:	e8 94       	clt

00001670 <__fp_szero>:
    1670:	bb 27       	eor	r27, r27
    1672:	66 27       	eor	r22, r22
    1674:	77 27       	eor	r23, r23
    1676:	cb 01       	movw	r24, r22
    1678:	97 f9       	bld	r25, 7
    167a:	08 95       	ret

0000167c <__mulsf3>:
    167c:	0b d0       	rcall	.+22     	; 0x1694 <__mulsf3x>
    167e:	c4 cf       	rjmp	.-120    	; 0x1608 <__fp_round>
    1680:	b5 df       	rcall	.-150    	; 0x15ec <__fp_pscA>
    1682:	28 f0       	brcs	.+10     	; 0x168e <__mulsf3+0x12>
    1684:	ba df       	rcall	.-140    	; 0x15fa <__fp_pscB>
    1686:	18 f0       	brcs	.+6      	; 0x168e <__mulsf3+0x12>
    1688:	95 23       	and	r25, r21
    168a:	09 f0       	breq	.+2      	; 0x168e <__mulsf3+0x12>
    168c:	a6 cf       	rjmp	.-180    	; 0x15da <__fp_inf>
    168e:	ab cf       	rjmp	.-170    	; 0x15e6 <__fp_nan>
    1690:	11 24       	eor	r1, r1
    1692:	ee cf       	rjmp	.-36     	; 0x1670 <__fp_szero>

00001694 <__mulsf3x>:
    1694:	ca df       	rcall	.-108    	; 0x162a <__fp_split3>
    1696:	a0 f3       	brcs	.-24     	; 0x1680 <__mulsf3+0x4>

00001698 <__mulsf3_pse>:
    1698:	95 9f       	mul	r25, r21
    169a:	d1 f3       	breq	.-12     	; 0x1690 <__mulsf3+0x14>
    169c:	95 0f       	add	r25, r21
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	55 1f       	adc	r21, r21
    16a2:	62 9f       	mul	r22, r18
    16a4:	f0 01       	movw	r30, r0
    16a6:	72 9f       	mul	r23, r18
    16a8:	bb 27       	eor	r27, r27
    16aa:	f0 0d       	add	r31, r0
    16ac:	b1 1d       	adc	r27, r1
    16ae:	63 9f       	mul	r22, r19
    16b0:	aa 27       	eor	r26, r26
    16b2:	f0 0d       	add	r31, r0
    16b4:	b1 1d       	adc	r27, r1
    16b6:	aa 1f       	adc	r26, r26
    16b8:	64 9f       	mul	r22, r20
    16ba:	66 27       	eor	r22, r22
    16bc:	b0 0d       	add	r27, r0
    16be:	a1 1d       	adc	r26, r1
    16c0:	66 1f       	adc	r22, r22
    16c2:	82 9f       	mul	r24, r18
    16c4:	22 27       	eor	r18, r18
    16c6:	b0 0d       	add	r27, r0
    16c8:	a1 1d       	adc	r26, r1
    16ca:	62 1f       	adc	r22, r18
    16cc:	73 9f       	mul	r23, r19
    16ce:	b0 0d       	add	r27, r0
    16d0:	a1 1d       	adc	r26, r1
    16d2:	62 1f       	adc	r22, r18
    16d4:	83 9f       	mul	r24, r19
    16d6:	a0 0d       	add	r26, r0
    16d8:	61 1d       	adc	r22, r1
    16da:	22 1f       	adc	r18, r18
    16dc:	74 9f       	mul	r23, r20
    16de:	33 27       	eor	r19, r19
    16e0:	a0 0d       	add	r26, r0
    16e2:	61 1d       	adc	r22, r1
    16e4:	23 1f       	adc	r18, r19
    16e6:	84 9f       	mul	r24, r20
    16e8:	60 0d       	add	r22, r0
    16ea:	21 1d       	adc	r18, r1
    16ec:	82 2f       	mov	r24, r18
    16ee:	76 2f       	mov	r23, r22
    16f0:	6a 2f       	mov	r22, r26
    16f2:	11 24       	eor	r1, r1
    16f4:	9f 57       	subi	r25, 0x7F	; 127
    16f6:	50 40       	sbci	r21, 0x00	; 0
    16f8:	8a f0       	brmi	.+34     	; 0x171c <__mulsf3_pse+0x84>
    16fa:	e1 f0       	breq	.+56     	; 0x1734 <__mulsf3_pse+0x9c>
    16fc:	88 23       	and	r24, r24
    16fe:	4a f0       	brmi	.+18     	; 0x1712 <__mulsf3_pse+0x7a>
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	bb 1f       	adc	r27, r27
    1706:	66 1f       	adc	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	91 50       	subi	r25, 0x01	; 1
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	a9 f7       	brne	.-22     	; 0x16fc <__mulsf3_pse+0x64>
    1712:	9e 3f       	cpi	r25, 0xFE	; 254
    1714:	51 05       	cpc	r21, r1
    1716:	70 f0       	brcs	.+28     	; 0x1734 <__mulsf3_pse+0x9c>
    1718:	60 cf       	rjmp	.-320    	; 0x15da <__fp_inf>
    171a:	aa cf       	rjmp	.-172    	; 0x1670 <__fp_szero>
    171c:	5f 3f       	cpi	r21, 0xFF	; 255
    171e:	ec f3       	brlt	.-6      	; 0x171a <__mulsf3_pse+0x82>
    1720:	98 3e       	cpi	r25, 0xE8	; 232
    1722:	dc f3       	brlt	.-10     	; 0x171a <__mulsf3_pse+0x82>
    1724:	86 95       	lsr	r24
    1726:	77 95       	ror	r23
    1728:	67 95       	ror	r22
    172a:	b7 95       	ror	r27
    172c:	f7 95       	ror	r31
    172e:	e7 95       	ror	r30
    1730:	9f 5f       	subi	r25, 0xFF	; 255
    1732:	c1 f7       	brne	.-16     	; 0x1724 <__mulsf3_pse+0x8c>
    1734:	fe 2b       	or	r31, r30
    1736:	88 0f       	add	r24, r24
    1738:	91 1d       	adc	r25, r1
    173a:	96 95       	lsr	r25
    173c:	87 95       	ror	r24
    173e:	97 f9       	bld	r25, 7
    1740:	08 95       	ret

00001742 <__tablejump2__>:
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	88 1f       	adc	r24, r24
    1748:	8b bf       	out	0x3b, r24	; 59
    174a:	07 90       	elpm	r0, Z+
    174c:	f6 91       	elpm	r31, Z
    174e:	e0 2d       	mov	r30, r0
    1750:	19 94       	eijmp

00001752 <__umulhisi3>:
    1752:	a2 9f       	mul	r26, r18
    1754:	b0 01       	movw	r22, r0
    1756:	b3 9f       	mul	r27, r19
    1758:	c0 01       	movw	r24, r0
    175a:	a3 9f       	mul	r26, r19
    175c:	70 0d       	add	r23, r0
    175e:	81 1d       	adc	r24, r1
    1760:	11 24       	eor	r1, r1
    1762:	91 1d       	adc	r25, r1
    1764:	b2 9f       	mul	r27, r18
    1766:	70 0d       	add	r23, r0
    1768:	81 1d       	adc	r24, r1
    176a:	11 24       	eor	r1, r1
    176c:	91 1d       	adc	r25, r1
    176e:	08 95       	ret

00001770 <malloc>:
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	82 30       	cpi	r24, 0x02	; 2
    177a:	91 05       	cpc	r25, r1
    177c:	10 f4       	brcc	.+4      	; 0x1782 <malloc+0x12>
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <__flp>
    1786:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <__flp+0x1>
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	a0 e0       	ldi	r26, 0x00	; 0
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	30 97       	sbiw	r30, 0x00	; 0
    1794:	19 f1       	breq	.+70     	; 0x17dc <malloc+0x6c>
    1796:	40 81       	ld	r20, Z
    1798:	51 81       	ldd	r21, Z+1	; 0x01
    179a:	02 81       	ldd	r16, Z+2	; 0x02
    179c:	13 81       	ldd	r17, Z+3	; 0x03
    179e:	48 17       	cp	r20, r24
    17a0:	59 07       	cpc	r21, r25
    17a2:	c8 f0       	brcs	.+50     	; 0x17d6 <malloc+0x66>
    17a4:	84 17       	cp	r24, r20
    17a6:	95 07       	cpc	r25, r21
    17a8:	69 f4       	brne	.+26     	; 0x17c4 <malloc+0x54>
    17aa:	10 97       	sbiw	r26, 0x00	; 0
    17ac:	31 f0       	breq	.+12     	; 0x17ba <malloc+0x4a>
    17ae:	12 96       	adiw	r26, 0x02	; 2
    17b0:	0c 93       	st	X, r16
    17b2:	12 97       	sbiw	r26, 0x02	; 2
    17b4:	13 96       	adiw	r26, 0x03	; 3
    17b6:	1c 93       	st	X, r17
    17b8:	27 c0       	rjmp	.+78     	; 0x1808 <malloc+0x98>
    17ba:	00 93 a7 02 	sts	0x02A7, r16	; 0x8002a7 <__flp>
    17be:	10 93 a8 02 	sts	0x02A8, r17	; 0x8002a8 <__flp+0x1>
    17c2:	22 c0       	rjmp	.+68     	; 0x1808 <malloc+0x98>
    17c4:	21 15       	cp	r18, r1
    17c6:	31 05       	cpc	r19, r1
    17c8:	19 f0       	breq	.+6      	; 0x17d0 <malloc+0x60>
    17ca:	42 17       	cp	r20, r18
    17cc:	53 07       	cpc	r21, r19
    17ce:	18 f4       	brcc	.+6      	; 0x17d6 <malloc+0x66>
    17d0:	9a 01       	movw	r18, r20
    17d2:	bd 01       	movw	r22, r26
    17d4:	ef 01       	movw	r28, r30
    17d6:	df 01       	movw	r26, r30
    17d8:	f8 01       	movw	r30, r16
    17da:	db cf       	rjmp	.-74     	; 0x1792 <malloc+0x22>
    17dc:	21 15       	cp	r18, r1
    17de:	31 05       	cpc	r19, r1
    17e0:	f9 f0       	breq	.+62     	; 0x1820 <malloc+0xb0>
    17e2:	28 1b       	sub	r18, r24
    17e4:	39 0b       	sbc	r19, r25
    17e6:	24 30       	cpi	r18, 0x04	; 4
    17e8:	31 05       	cpc	r19, r1
    17ea:	80 f4       	brcc	.+32     	; 0x180c <malloc+0x9c>
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	9b 81       	ldd	r25, Y+3	; 0x03
    17f0:	61 15       	cp	r22, r1
    17f2:	71 05       	cpc	r23, r1
    17f4:	21 f0       	breq	.+8      	; 0x17fe <malloc+0x8e>
    17f6:	fb 01       	movw	r30, r22
    17f8:	93 83       	std	Z+3, r25	; 0x03
    17fa:	82 83       	std	Z+2, r24	; 0x02
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <malloc+0x96>
    17fe:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <__flp+0x1>
    1802:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <__flp>
    1806:	fe 01       	movw	r30, r28
    1808:	32 96       	adiw	r30, 0x02	; 2
    180a:	44 c0       	rjmp	.+136    	; 0x1894 <malloc+0x124>
    180c:	fe 01       	movw	r30, r28
    180e:	e2 0f       	add	r30, r18
    1810:	f3 1f       	adc	r31, r19
    1812:	81 93       	st	Z+, r24
    1814:	91 93       	st	Z+, r25
    1816:	22 50       	subi	r18, 0x02	; 2
    1818:	31 09       	sbc	r19, r1
    181a:	39 83       	std	Y+1, r19	; 0x01
    181c:	28 83       	st	Y, r18
    181e:	3a c0       	rjmp	.+116    	; 0x1894 <malloc+0x124>
    1820:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__brkval>
    1824:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__brkval+0x1>
    1828:	23 2b       	or	r18, r19
    182a:	41 f4       	brne	.+16     	; 0x183c <malloc+0xcc>
    182c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1830:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1834:	30 93 a6 02 	sts	0x02A6, r19	; 0x8002a6 <__brkval+0x1>
    1838:	20 93 a5 02 	sts	0x02A5, r18	; 0x8002a5 <__brkval>
    183c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1840:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1844:	21 15       	cp	r18, r1
    1846:	31 05       	cpc	r19, r1
    1848:	41 f4       	brne	.+16     	; 0x185a <malloc+0xea>
    184a:	2d b7       	in	r18, 0x3d	; 61
    184c:	3e b7       	in	r19, 0x3e	; 62
    184e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1852:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1856:	24 1b       	sub	r18, r20
    1858:	35 0b       	sbc	r19, r21
    185a:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <__brkval>
    185e:	f0 91 a6 02 	lds	r31, 0x02A6	; 0x8002a6 <__brkval+0x1>
    1862:	e2 17       	cp	r30, r18
    1864:	f3 07       	cpc	r31, r19
    1866:	a0 f4       	brcc	.+40     	; 0x1890 <malloc+0x120>
    1868:	2e 1b       	sub	r18, r30
    186a:	3f 0b       	sbc	r19, r31
    186c:	28 17       	cp	r18, r24
    186e:	39 07       	cpc	r19, r25
    1870:	78 f0       	brcs	.+30     	; 0x1890 <malloc+0x120>
    1872:	ac 01       	movw	r20, r24
    1874:	4e 5f       	subi	r20, 0xFE	; 254
    1876:	5f 4f       	sbci	r21, 0xFF	; 255
    1878:	24 17       	cp	r18, r20
    187a:	35 07       	cpc	r19, r21
    187c:	48 f0       	brcs	.+18     	; 0x1890 <malloc+0x120>
    187e:	4e 0f       	add	r20, r30
    1880:	5f 1f       	adc	r21, r31
    1882:	50 93 a6 02 	sts	0x02A6, r21	; 0x8002a6 <__brkval+0x1>
    1886:	40 93 a5 02 	sts	0x02A5, r20	; 0x8002a5 <__brkval>
    188a:	81 93       	st	Z+, r24
    188c:	91 93       	st	Z+, r25
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <malloc+0x124>
    1890:	e0 e0       	ldi	r30, 0x00	; 0
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	cf 01       	movw	r24, r30
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	08 95       	ret

000018a0 <free>:
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	09 f4       	brne	.+2      	; 0x18aa <free+0xa>
    18a8:	81 c0       	rjmp	.+258    	; 0x19ac <free+0x10c>
    18aa:	fc 01       	movw	r30, r24
    18ac:	32 97       	sbiw	r30, 0x02	; 2
    18ae:	13 82       	std	Z+3, r1	; 0x03
    18b0:	12 82       	std	Z+2, r1	; 0x02
    18b2:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <__flp>
    18b6:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <__flp+0x1>
    18ba:	10 97       	sbiw	r26, 0x00	; 0
    18bc:	81 f4       	brne	.+32     	; 0x18de <free+0x3e>
    18be:	20 81       	ld	r18, Z
    18c0:	31 81       	ldd	r19, Z+1	; 0x01
    18c2:	82 0f       	add	r24, r18
    18c4:	93 1f       	adc	r25, r19
    18c6:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__brkval>
    18ca:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__brkval+0x1>
    18ce:	28 17       	cp	r18, r24
    18d0:	39 07       	cpc	r19, r25
    18d2:	51 f5       	brne	.+84     	; 0x1928 <free+0x88>
    18d4:	f0 93 a6 02 	sts	0x02A6, r31	; 0x8002a6 <__brkval+0x1>
    18d8:	e0 93 a5 02 	sts	0x02A5, r30	; 0x8002a5 <__brkval>
    18dc:	67 c0       	rjmp	.+206    	; 0x19ac <free+0x10c>
    18de:	ed 01       	movw	r28, r26
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	ce 17       	cp	r28, r30
    18e6:	df 07       	cpc	r29, r31
    18e8:	40 f4       	brcc	.+16     	; 0x18fa <free+0x5a>
    18ea:	4a 81       	ldd	r20, Y+2	; 0x02
    18ec:	5b 81       	ldd	r21, Y+3	; 0x03
    18ee:	9e 01       	movw	r18, r28
    18f0:	41 15       	cp	r20, r1
    18f2:	51 05       	cpc	r21, r1
    18f4:	f1 f0       	breq	.+60     	; 0x1932 <free+0x92>
    18f6:	ea 01       	movw	r28, r20
    18f8:	f5 cf       	rjmp	.-22     	; 0x18e4 <free+0x44>
    18fa:	d3 83       	std	Z+3, r29	; 0x03
    18fc:	c2 83       	std	Z+2, r28	; 0x02
    18fe:	40 81       	ld	r20, Z
    1900:	51 81       	ldd	r21, Z+1	; 0x01
    1902:	84 0f       	add	r24, r20
    1904:	95 1f       	adc	r25, r21
    1906:	c8 17       	cp	r28, r24
    1908:	d9 07       	cpc	r29, r25
    190a:	59 f4       	brne	.+22     	; 0x1922 <free+0x82>
    190c:	88 81       	ld	r24, Y
    190e:	99 81       	ldd	r25, Y+1	; 0x01
    1910:	84 0f       	add	r24, r20
    1912:	95 1f       	adc	r25, r21
    1914:	02 96       	adiw	r24, 0x02	; 2
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	93 83       	std	Z+3, r25	; 0x03
    1920:	82 83       	std	Z+2, r24	; 0x02
    1922:	21 15       	cp	r18, r1
    1924:	31 05       	cpc	r19, r1
    1926:	29 f4       	brne	.+10     	; 0x1932 <free+0x92>
    1928:	f0 93 a8 02 	sts	0x02A8, r31	; 0x8002a8 <__flp+0x1>
    192c:	e0 93 a7 02 	sts	0x02A7, r30	; 0x8002a7 <__flp>
    1930:	3d c0       	rjmp	.+122    	; 0x19ac <free+0x10c>
    1932:	e9 01       	movw	r28, r18
    1934:	fb 83       	std	Y+3, r31	; 0x03
    1936:	ea 83       	std	Y+2, r30	; 0x02
    1938:	49 91       	ld	r20, Y+
    193a:	59 91       	ld	r21, Y+
    193c:	c4 0f       	add	r28, r20
    193e:	d5 1f       	adc	r29, r21
    1940:	ec 17       	cp	r30, r28
    1942:	fd 07       	cpc	r31, r29
    1944:	61 f4       	brne	.+24     	; 0x195e <free+0xbe>
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	84 0f       	add	r24, r20
    194c:	95 1f       	adc	r25, r21
    194e:	02 96       	adiw	r24, 0x02	; 2
    1950:	e9 01       	movw	r28, r18
    1952:	99 83       	std	Y+1, r25	; 0x01
    1954:	88 83       	st	Y, r24
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	9b 83       	std	Y+3, r25	; 0x03
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	e0 e0       	ldi	r30, 0x00	; 0
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	12 96       	adiw	r26, 0x02	; 2
    1964:	8d 91       	ld	r24, X+
    1966:	9c 91       	ld	r25, X
    1968:	13 97       	sbiw	r26, 0x03	; 3
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	19 f0       	breq	.+6      	; 0x1974 <free+0xd4>
    196e:	fd 01       	movw	r30, r26
    1970:	dc 01       	movw	r26, r24
    1972:	f7 cf       	rjmp	.-18     	; 0x1962 <free+0xc2>
    1974:	8d 91       	ld	r24, X+
    1976:	9c 91       	ld	r25, X
    1978:	11 97       	sbiw	r26, 0x01	; 1
    197a:	9d 01       	movw	r18, r26
    197c:	2e 5f       	subi	r18, 0xFE	; 254
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	82 0f       	add	r24, r18
    1982:	93 1f       	adc	r25, r19
    1984:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__brkval>
    1988:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__brkval+0x1>
    198c:	28 17       	cp	r18, r24
    198e:	39 07       	cpc	r19, r25
    1990:	69 f4       	brne	.+26     	; 0x19ac <free+0x10c>
    1992:	30 97       	sbiw	r30, 0x00	; 0
    1994:	29 f4       	brne	.+10     	; 0x19a0 <free+0x100>
    1996:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <__flp+0x1>
    199a:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <__flp>
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <free+0x104>
    19a0:	13 82       	std	Z+3, r1	; 0x03
    19a2:	12 82       	std	Z+2, r1	; 0x02
    19a4:	b0 93 a6 02 	sts	0x02A6, r27	; 0x8002a6 <__brkval+0x1>
    19a8:	a0 93 a5 02 	sts	0x02A5, r26	; 0x8002a5 <__brkval>
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	08 95       	ret

000019b2 <_exit>:
    19b2:	f8 94       	cli

000019b4 <__stop_program>:
    19b4:	ff cf       	rjmp	.-2      	; 0x19b4 <__stop_program>
